!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t="length"in e&&e.length,n=Z.type(e);return"function"===n||Z.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(Z.isFunction(t))return Z.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return Z.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(ae.test(t))return Z.filter(t,e,n);t=Z.filter(t,e)}return Z.grep(e,function(e){return U.call(t,e)>=0!==n})}function i(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t=he[e]={};return Z.each(e.match(de)||[],function(e,n){t[n]=!0}),t}function s(){J.removeEventListener("DOMContentLoaded",s,!1),e.removeEventListener("load",s,!1),Z.ready()}function a(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=Z.expando+a.uid++}function u(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(be,"-$1").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:xe.test(n)?Z.parseJSON(n):n}catch(i){}ye.set(e,t,n)}else n=void 0;return n}function l(){return!0}function c(){return!1}function f(){try{return J.activeElement}catch(e){}}function p(e,t){return Z.nodeName(e,"table")&&Z.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function d(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function h(e){var t=Pe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function g(e,t){for(var n=0,r=e.length;r>n;n++)ve.set(e[n],"globalEval",!t||ve.get(t[n],"globalEval"))}function m(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(ve.hasData(e)&&(o=ve.access(e),s=ve.set(t,o),l=o.events)){delete s.handle,s.events={};for(i in l)for(n=0,r=l[i].length;r>n;n++)Z.event.add(t,i,l[i][n])}ye.hasData(e)&&(a=ye.access(e),u=Z.extend({},a),ye.set(t,u))}}function v(e,t){var n=e.getElementsByTagName?e.getElementsByTagName(t||"*"):e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&Z.nodeName(e,t)?Z.merge([e],n):n}function y(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ne.test(e.type)?t.checked=e.checked:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}function x(t,n){var r,i=Z(n.createElement(t)).appendTo(n.body),o=e.getDefaultComputedStyle&&(r=e.getDefaultComputedStyle(i[0]))?r.display:Z.css(i[0],"display");return i.detach(),o}function b(e){var t=J,n=$e[e];return n||(n=x(e,t),"none"!==n&&n||(We=(We||Z("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=We[0].contentDocument,t.write(),t.close(),n=x(e,t),We.detach()),$e[e]=n),n}function w(e,t,n){var r,i,o,s,a=e.style;return n=n||_e(e),n&&(s=n.getPropertyValue(t)||n[t]),n&&(""!==s||Z.contains(e.ownerDocument,e)||(s=Z.style(e,t)),Be.test(s)&&Ie.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function T(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function C(e,t){if(t in e)return t;for(var n=t[0].toUpperCase()+t.slice(1),r=t,i=Ge.length;i--;)if(t=Ge[i]+n,t in e)return t;return r}function N(e,t,n){var r=Xe.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function k(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=Z.css(e,n+Te[o],!0,i)),r?("content"===n&&(s-=Z.css(e,"padding"+Te[o],!0,i)),"margin"!==n&&(s-=Z.css(e,"border"+Te[o]+"Width",!0,i))):(s+=Z.css(e,"padding"+Te[o],!0,i),"padding"!==n&&(s+=Z.css(e,"border"+Te[o]+"Width",!0,i)));return s}function E(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=_e(e),s="border-box"===Z.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=w(e,t,o),(0>i||null==i)&&(i=e.style[t]),Be.test(i))return i;r=s&&(Q.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+k(e,t,n||(s?"border":"content"),r,o)+"px"}function S(e,t){for(var n,r,i,o=[],s=0,a=e.length;a>s;s++)r=e[s],r.style&&(o[s]=ve.get(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&Ce(r)&&(o[s]=ve.access(r,"olddisplay",b(r.nodeName)))):(i=Ce(r),"none"===n&&i||ve.set(r,"olddisplay",i?n:Z.css(r,"display"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}function D(e,t,n,r,i){return new D.prototype.init(e,t,n,r,i)}function j(){return setTimeout(function(){Qe=void 0}),Qe=Z.now()}function A(e,t){var n,r=0,i={height:e};for(t=t?1:0;4>r;r+=2-t)n=Te[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function L(e,t,n){for(var r,i=(nt[t]||[]).concat(nt["*"]),o=0,s=i.length;s>o;o++)if(r=i[o].call(n,t,e))return r}function q(e,t,n){var r,i,o,s,a,u,l,c,f=this,p={},d=e.style,h=e.nodeType&&Ce(e),g=ve.get(e,"fxshow");n.queue||(a=Z._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,Z.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],l=Z.css(e,"display"),c="none"===l?ve.get(e,"olddisplay")||b(e.nodeName):l,"inline"===c&&"none"===Z.css(e,"float")&&(d.display="inline-block")),n.overflow&&(d.overflow="hidden",f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],Ke.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;h=!0}p[r]=g&&g[r]||Z.style(e,r)}else l=void 0;if(Z.isEmptyObject(p))"inline"===("none"===l?b(e.nodeName):l)&&(d.display=l);else{g?"hidden"in g&&(h=g.hidden):g=ve.access(e,"fxshow",{}),o&&(g.hidden=!h),h?Z(e).show():f.done(function(){Z(e).hide()}),f.done(function(){var t;ve.remove(e,"fxshow");for(t in p)Z.style(e,t,p[t])});for(r in p)s=L(h?g[r]:0,r,f),r in g||(g[r]=s.start,h&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function H(e,t){var n,r,i,o,s;for(n in e)if(r=Z.camelCase(n),i=t[r],o=e[n],Z.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=Z.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function O(e,t,n){var r,i,o=0,s=tt.length,a=Z.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=Qe||j(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,s=0,u=l.tweens.length;u>s;s++)l.tweens[s].run(o);return a.notifyWith(e,[l,o,n]),1>o&&u?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:Z.extend({},t),opts:Z.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Qe||j(),duration:n.duration,tweens:[],createTween:function(t,n){var r=Z.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?a.resolveWith(e,[l,t]):a.rejectWith(e,[l,t]),this}}),c=l.props;for(H(c,l.opts.specialEasing);s>o;o++)if(r=tt[o].call(l,e,c,l.opts))return r;return Z.map(c,L,l),Z.isFunction(l.opts.start)&&l.opts.start.call(e,l),Z.fx.timer(Z.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function F(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(de)||[];if(Z.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function P(e,t,n,r){function i(a){var u;return o[a]=!0,Z.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||s||o[l]?s?!(u=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),u}var o={},s=e===xt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function R(e,t){var n,r,i=Z.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&Z.extend(!0,e,r),e}function M(e,t,n){for(var r,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function W(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=l[u+" "+o]||l["* "+o],!s)for(i in l)if(a=i.split(" "),a[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){s===!0?s=l[i]:l[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(f){return{state:"parsererror",error:s?f:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function $(e,t,n,r){var i;if(Z.isArray(t))Z.each(t,function(t,i){n||Nt.test(e)?r(e,i):$(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==Z.type(t))r(e,t);else for(i in t)$(e+"["+i+"]",t[i],n,r)}function I(e){return Z.isWindow(e)?e:9===e.nodeType&&e.defaultView}var B=[],_=B.slice,z=B.concat,X=B.push,U=B.indexOf,V={},Y=V.toString,G=V.hasOwnProperty,Q={},J=e.document,K="2.1.4",Z=function(e,t){return new Z.fn.init(e,t)},ee=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,te=/^-ms-/,ne=/-([\da-z])/gi,re=function(e,t){return t.toUpperCase()};Z.fn=Z.prototype={jquery:K,constructor:Z,selector:"",length:0,toArray:function(){return _.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:_.call(this)},pushStack:function(e){var t=Z.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return Z.each(this,e,t)},map:function(e){return this.pushStack(Z.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(_.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:X,sort:B.sort,splice:B.splice},Z.extend=Z.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||Z.isFunction(s)||(s={}),a===u&&(s=this,a--);u>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(Z.isPlainObject(r)||(i=Z.isArray(r)))?(i?(i=!1,o=n&&Z.isArray(n)?n:[]):o=n&&Z.isPlainObject(n)?n:{},s[t]=Z.extend(l,o,r)):void 0!==r&&(s[t]=r));return s},Z.extend({expando:"jQuery"+(K+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===Z.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!Z.isArray(e)&&e-parseFloat(e)+1>=0},isPlainObject:function(e){return"object"!==Z.type(e)||e.nodeType||Z.isWindow(e)?!1:e.constructor&&!G.call(e.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?V[Y.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=Z.trim(e),e&&(1===e.indexOf("use strict")?(t=J.createElement("script"),t.text=e,J.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(te,"ms-").replace(ne,re)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,r){var i,o=0,s=e.length,a=n(e);if(r){if(a)for(;s>o&&(i=t.apply(e[o],r),i!==!1);o++);else for(o in e)if(i=t.apply(e[o],r),i===!1)break}else if(a)for(;s>o&&(i=t.call(e[o],o,e[o]),i!==!1);o++);else for(o in e)if(i=t.call(e[o],o,e[o]),i===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(ee,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?Z.merge(r,"string"==typeof e?[e]:e):X.call(r,e)),r},inArray:function(e,t,n){return null==t?-1:U.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,s=e.length,a=!n;s>o;o++)r=!t(e[o],o),r!==a&&i.push(e[o]);return i},map:function(e,t,r){var i,o=0,s=e.length,a=n(e),u=[];if(a)for(;s>o;o++)i=t(e[o],o,r),null!=i&&u.push(i);else for(o in e)i=t(e[o],o,r),null!=i&&u.push(i);return z.apply([],u)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(n=e[t],t=e,e=n),Z.isFunction(e)?(r=_.call(arguments,2),i=function(){return e.apply(t||this,r.concat(_.call(arguments)))},i.guid=e.guid=e.guid||Z.guid++,i):void 0},now:Date.now,support:Q}),Z.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){V["[object "+t+"]"]=t.toLowerCase()});var ie=function(e){function t(e,t,n,r){var i,o,s,a,u,l,f,d,h,g;if((t?t.ownerDocument||t:$)!==q&&L(t),t=t||q,n=n||[],a=t.nodeType,"string"!=typeof e||!e||1!==a&&9!==a&&11!==a)return n;if(!r&&O){if(11!==a&&(i=ye.exec(e)))if(s=i[1]){if(9===a){if(o=t.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(s))&&M(t,o)&&o.id===s)return n.push(o),n}else{if(i[2])return K.apply(n,t.getElementsByTagName(e)),n;if((s=i[3])&&w.getElementsByClassName)return K.apply(n,t.getElementsByClassName(s)),n}if(w.qsa&&(!F||!F.test(e))){if(d=f=W,h=t,g=1!==a&&e,1===a&&"object"!==t.nodeName.toLowerCase()){for(l=k(e),(f=t.getAttribute("id"))?d=f.replace(be,"\\$&"):t.setAttribute("id",d),d="[id='"+d+"'] ",u=l.length;u--;)l[u]=d+p(l[u]);h=xe.test(e)&&c(t.parentNode)||t,g=l.join(",")}if(g)try{return K.apply(n,h.querySelectorAll(g)),n}catch(m){}finally{f||t.removeAttribute("id")}}}return S(e.replace(ue,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>T.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[W]=!0,e}function i(e){var t=q.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=e.length;r--;)T.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||V)-(~e.sourceIndex||V);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function p(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function d(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=B++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,s){var a,u,l=[I,o];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(u=t[W]||(t[W]={}),(a=u[r])&&a[0]===I&&a[1]===o)return l[2]=a[2];if(u[r]=l,l[2]=e(t,n,s))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function g(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var o,s=[],a=0,u=e.length,l=null!=t;u>a;a++)(o=e[a])&&(!n||n(o,r,i))&&(s.push(o),l&&t.push(a));return s}function v(e,t,n,i,o,s){return i&&!i[W]&&(i=v(i)),o&&!o[W]&&(o=v(o,s)),r(function(r,s,a,u){var l,c,f,p=[],d=[],h=s.length,v=r||g(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?v:m(v,p,e,a,u),x=n?o||(r?e:h||i)?[]:s:y;if(n&&n(y,x,a,u),i)for(l=m(x,d),i(l,[],a,u),c=l.length;c--;)(f=l[c])&&(x[d[c]]=!(y[d[c]]=f));if(r){if(o||e){if(o){for(l=[],c=x.length;c--;)(f=x[c])&&l.push(y[c]=f);o(null,x=[],l,u)}for(c=x.length;c--;)(f=x[c])&&(l=o?ee(r,f):p[c])>-1&&(r[l]=!(s[l]=f))}}else x=m(x===s?x.splice(h,x.length):x),o?o(null,s,x,u):K.apply(s,x)})}function y(e){for(var t,n,r,i=e.length,o=T.relative[e[0].type],s=o||T.relative[" "],a=o?1:0,u=d(function(e){return e===t},s,!0),l=d(function(e){return ee(t,e)>-1},s,!0),c=[function(e,n,r){var i=!o&&(r||n!==D)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,i}];i>a;a++)if(n=T.relative[e[a].type])c=[d(h(c),n)];else{if(n=T.filter[e[a].type].apply(null,e[a].matches),n[W]){for(r=++a;i>r&&!T.relative[e[r].type];r++);return v(a>1&&h(c),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ue,"$1"),n,r>a&&y(e.slice(a,r)),i>r&&y(e=e.slice(r)),i>r&&p(e))}c.push(n)}return h(c)}function x(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,u,l){var c,f,p,d=0,h="0",g=r&&[],v=[],y=D,x=r||o&&T.find.TAG("*",l),b=I+=null==y?1:Math.random()||.1,w=x.length;for(l&&(D=s!==q&&s);h!==w&&null!=(c=x[h]);h++){if(o&&c){for(f=0;p=e[f++];)if(p(c,s,a)){u.push(c);break}l&&(I=b)}i&&((c=!p&&c)&&d--,r&&g.push(c))}if(d+=h,i&&h!==d){for(f=0;p=n[f++];)p(g,v,s,a);if(r){if(d>0)for(;h--;)g[h]||v[h]||(v[h]=Q.call(u));v=m(v)}K.apply(u,v),l&&!r&&v.length>0&&d+n.length>1&&t.uniqueSort(u)}return l&&(I=b,D=y),g};return i?r(s):s}var b,w,T,C,N,k,E,S,D,j,A,L,q,H,O,F,P,R,M,W="sizzle"+1*new Date,$=e.document,I=0,B=0,_=n(),z=n(),X=n(),U=function(e,t){return e===t&&(A=!0),0},V=1<<31,Y={}.hasOwnProperty,G=[],Q=G.pop,J=G.push,K=G.push,Z=G.slice,ee=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie=re.replace("w","w#"),oe="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ie+"))|)"+ne+"*\\]",se=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+oe+")*)|.*)\\)|)",ae=new RegExp(ne+"+","g"),ue=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),le=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),fe=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),pe=new RegExp(se),de=new RegExp("^"+ie+"$"),he={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re.replace("w","w*")+")"),ATTR:new RegExp("^"+oe),PSEUDO:new RegExp("^"+se),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},ge=/^(?:input|select|textarea|button)$/i,me=/^h\d$/i,ve=/^[^{]+\{\s*\[native \w/,ye=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,xe=/[+~]/,be=/'|\\/g,we=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),Te=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},Ce=function(){L()};try{K.apply(G=Z.call($.childNodes),$.childNodes),G[$.childNodes.length].nodeType}catch(Ne){K={apply:G.length?function(e,t){J.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}w=t.support={},N=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},L=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:$;return r!==q&&9===r.nodeType&&r.documentElement?(q=r,H=r.documentElement,n=r.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Ce,!1):n.attachEvent&&n.attachEvent("onunload",Ce)),O=!N(r),w.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=i(function(e){return e.appendChild(r.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=ve.test(r.getElementsByClassName),w.getById=i(function(e){return H.appendChild(e).id=W,!r.getElementsByName||!r.getElementsByName(W).length}),w.getById?(T.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&O){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},T.filter.ID=function(e){var t=e.replace(we,Te);return function(e){return e.getAttribute("id")===t}}):(delete T.find.ID,T.filter.ID=function(e){var t=e.replace(we,Te);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),T.find.TAG=w.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},T.find.CLASS=w.getElementsByClassName&&function(e,t){return O?t.getElementsByClassName(e):void 0},P=[],F=[],(w.qsa=ve.test(r.querySelectorAll))&&(i(function(e){H.appendChild(e).innerHTML="<a id='"+W+"'></a><select id='"+W+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&F.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||F.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+W+"-]").length||F.push("~="),e.querySelectorAll(":checked").length||F.push(":checked"),e.querySelectorAll("a#"+W+"+*").length||F.push(".#.+[+~]")}),i(function(e){var t=r.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&F.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||F.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),F.push(",.*:")})),(w.matchesSelector=ve.test(R=H.matches||H.webkitMatchesSelector||H.mozMatchesSelector||H.oMatchesSelector||H.msMatchesSelector))&&i(function(e){w.disconnectedMatch=R.call(e,"div"),R.call(e,"[s!='']:x"),P.push("!=",se)}),F=F.length&&new RegExp(F.join("|")),P=P.length&&new RegExp(P.join("|")),t=ve.test(H.compareDocumentPosition),M=t||ve.test(H.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return A=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===r||e.ownerDocument===$&&M($,e)?-1:t===r||t.ownerDocument===$&&M($,t)?1:j?ee(j,e)-ee(j,t):0:4&n?-1:1)}:function(e,t){if(e===t)return A=!0,0;var n,i=0,o=e.parentNode,a=t.parentNode,u=[e],l=[t];if(!o||!a)return e===r?-1:t===r?1:o?-1:a?1:j?ee(j,e)-ee(j,t):0;if(o===a)return s(e,t);for(n=e;n=n.parentNode;)u.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;u[i]===l[i];)i++;return i?s(u[i],l[i]):u[i]===$?-1:l[i]===$?1:0},r):q},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==q&&L(e),n=n.replace(fe,"='$1']"),w.matchesSelector&&O&&(!P||!P.test(n))&&(!F||!F.test(n)))try{var r=R.call(e,n);if(r||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,q,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==q&&L(e),M(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==q&&L(e);var n=T.attrHandle[t.toLowerCase()],r=n&&Y.call(T.attrHandle,t.toLowerCase())?n(e,t,!O):void 0;return void 0!==r?r:w.attributes||!O?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(A=!w.detectDuplicates,j=!w.sortStable&&e.slice(0),e.sort(U),A){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return j=null,e},C=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=C(t);return n},T=t.selectors={cacheLength:50,createPseudo:r,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(we,Te),e[3]=(e[3]||e[4]||e[5]||"").replace(we,Te),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return he.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&pe.test(n)&&(t=k(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(we,Te).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&_(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ae," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!u&&!a;if(m){if(o){for(;g;){for(f=t;f=f[g];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(c=m[W]||(m[W]={}),l=c[e]||[],d=l[0]===I&&l[1],p=l[0]===I&&l[2],f=d&&m.childNodes[d];f=++d&&f&&f[g]||(p=d=0)||h.pop();)if(1===f.nodeType&&++p&&f===t){c[e]=[I,d,p];break}}else if(y&&(l=(t[W]||(t[W]={}))[e])&&l[0]===I)p=l[1];else for(;(f=++d&&f&&f[g]||(p=d=0)||h.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++p||(y&&((f[W]||(f[W]={}))[e]=[I,p]),f!==t)););return p-=i,p===r||p%r===0&&p/r>=0}}},PSEUDO:function(e,n){var i,o=T.pseudos[e]||T.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[W]?o(n):o.length>1?(i=[e,e,"",n],T.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)r=ee(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=E(e.replace(ue,"$1"));return i[W]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(we,Te),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:r(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(we,Te).toLowerCase(),function(t){var n;do if(n=O?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===H},focus:function(e){return e===q.activeElement&&(!q.hasFocus||q.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!T.pseudos.empty(e)},header:function(e){return me.test(e.nodeName)},input:function(e){return ge.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[0>n?n+t:n]}),even:l(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},T.pseudos.nth=T.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})T.pseudos[b]=u(b);return f.prototype=T.filters=T.pseudos,T.setFilters=new f,k=t.tokenize=function(e,n){var r,i,o,s,a,u,l,c=z[e+" "];if(c)return n?0:c.slice(0);for(a=e,u=[],l=T.preFilter;a;){(!r||(i=le.exec(a)))&&(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=ce.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ue," ")}),a=a.slice(r.length));for(s in T.filter)!(i=he[s].exec(a))||l[s]&&!(i=l[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):z(e,u).slice(0)},E=t.compile=function(e,t){var n,r=[],i=[],o=X[e+" "];if(!o){for(t||(t=k(e)),n=t.length;n--;)o=y(t[n]),o[W]?r.push(o):i.push(o);o=X(e,x(i,r)),o.selector=e}return o},S=t.select=function(e,t,n,r){var i,o,s,a,u,l="function"==typeof e&&e,f=!r&&k(e=l.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&w.getById&&9===t.nodeType&&O&&T.relative[o[1].type]){if(t=(T.find.ID(s.matches[0].replace(we,Te),t)||[])[0],!t)return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=he.needsContext.test(e)?0:o.length;i--&&(s=o[i],!T.relative[a=s.type]);)if((u=T.find[a])&&(r=u(s.matches[0].replace(we,Te),xe.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&p(o),!e)return K.apply(n,r),n;break}}return(l||E(e,f))(r,t,!O,n,xe.test(e)&&c(t.parentNode)||t),n},w.sortStable=W.split("").sort(U).join("")===W,w.detectDuplicates=!!A,L(),w.sortDetached=i(function(e){return 1&e.compareDocumentPosition(q.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);Z.find=ie,Z.expr=ie.selectors,Z.expr[":"]=Z.expr.pseudos,Z.unique=ie.uniqueSort,Z.text=ie.getText,Z.isXMLDoc=ie.isXML,Z.contains=ie.contains;var oe=Z.expr.match.needsContext,se=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,ae=/^.[^:#\[\.,]*$/;Z.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?Z.find.matchesSelector(r,e)?[r]:[]:Z.find.matches(e,Z.grep(t,function(e){return 1===e.nodeType}))},Z.fn.extend({find:function(e){var t,n=this.length,r=[],i=this;
if("string"!=typeof e)return this.pushStack(Z(e).filter(function(){for(t=0;n>t;t++)if(Z.contains(i[t],this))return!0}));for(t=0;n>t;t++)Z.find(e,i[t],r);return r=this.pushStack(n>1?Z.unique(r):r),r.selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&oe.test(e)?Z(e):e||[],!1).length}});var ue,le=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ce=Z.fn.init=function(e,t){var n,r;if(!e)return this;if("string"==typeof e){if(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:le.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||ue).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof Z?t[0]:t,Z.merge(this,Z.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:J,!0)),se.test(n[1])&&Z.isPlainObject(t))for(n in t)Z.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return r=J.getElementById(n[2]),r&&r.parentNode&&(this.length=1,this[0]=r),this.context=J,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):Z.isFunction(e)?"undefined"!=typeof ue.ready?ue.ready(e):e(Z):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),Z.makeArray(e,this))};ce.prototype=Z.fn,ue=Z(J);var fe=/^(?:parents|prev(?:Until|All))/,pe={children:!0,contents:!0,next:!0,prev:!0};Z.extend({dir:function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&Z(e).is(n))break;r.push(e)}return r},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),Z.fn.extend({has:function(e){var t=Z(e,this),n=t.length;return this.filter(function(){for(var e=0;n>e;e++)if(Z.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],s=oe.test(e)||"string"!=typeof e?Z(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&Z.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?Z.unique(o):o)},index:function(e){return e?"string"==typeof e?U.call(Z(e),this[0]):U.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(Z.unique(Z.merge(this.get(),Z(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),Z.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return Z.dir(e,"parentNode")},parentsUntil:function(e,t,n){return Z.dir(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return Z.dir(e,"nextSibling")},prevAll:function(e){return Z.dir(e,"previousSibling")},nextUntil:function(e,t,n){return Z.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return Z.dir(e,"previousSibling",n)},siblings:function(e){return Z.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return Z.sibling(e.firstChild)},contents:function(e){return e.contentDocument||Z.merge([],e.childNodes)}},function(e,t){Z.fn[e]=function(n,r){var i=Z.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=Z.filter(r,i)),this.length>1&&(pe[e]||Z.unique(i),fe.test(e)&&i.reverse()),this.pushStack(i)}});var de=/\S+/g,he={};Z.Callbacks=function(e){e="string"==typeof e?he[e]||o(e):Z.extend({},e);var t,n,r,i,s,a,u=[],l=!e.once&&[],c=function(o){for(t=e.memory&&o,n=!0,a=i||0,i=0,s=u.length,r=!0;u&&s>a;a++)if(u[a].apply(o[0],o[1])===!1&&e.stopOnFalse){t=!1;break}r=!1,u&&(l?l.length&&c(l.shift()):t?u=[]:f.disable())},f={add:function(){if(u){var n=u.length;!function o(t){Z.each(t,function(t,n){var r=Z.type(n);"function"===r?e.unique&&f.has(n)||u.push(n):n&&n.length&&"string"!==r&&o(n)})}(arguments),r?s=u.length:t&&(i=n,c(t))}return this},remove:function(){return u&&Z.each(arguments,function(e,t){for(var n;(n=Z.inArray(t,u,n))>-1;)u.splice(n,1),r&&(s>=n&&s--,a>=n&&a--)}),this},has:function(e){return e?Z.inArray(e,u)>-1:!(!u||!u.length)},empty:function(){return u=[],s=0,this},disable:function(){return u=l=t=void 0,this},disabled:function(){return!u},lock:function(){return l=void 0,t||f.disable(),this},locked:function(){return!l},fireWith:function(e,t){return!u||n&&!l||(t=t||[],t=[e,t.slice?t.slice():t],r?l.push(t):c(t)),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!n}};return f},Z.extend({Deferred:function(e){var t=[["resolve","done",Z.Callbacks("once memory"),"resolved"],["reject","fail",Z.Callbacks("once memory"),"rejected"],["notify","progress",Z.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return Z.Deferred(function(n){Z.each(t,function(t,o){var s=Z.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&Z.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?Z.extend(e,r):r}},i={};return r.pipe=r.then,Z.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=_.call(arguments),s=o.length,a=1!==s||e&&Z.isFunction(e.promise)?s:0,u=1===a?e:Z.Deferred(),l=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?_.call(arguments):i,r===t?u.notifyWith(n,r):--a||u.resolveWith(n,r)}};if(s>1)for(t=new Array(s),n=new Array(s),r=new Array(s);s>i;i++)o[i]&&Z.isFunction(o[i].promise)?o[i].promise().done(l(i,r,o)).fail(u.reject).progress(l(i,n,t)):--a;return a||u.resolveWith(r,o),u.promise()}});var ge;Z.fn.ready=function(e){return Z.ready.promise().done(e),this},Z.extend({isReady:!1,readyWait:1,holdReady:function(e){e?Z.readyWait++:Z.ready(!0)},ready:function(e){(e===!0?--Z.readyWait:Z.isReady)||(Z.isReady=!0,e!==!0&&--Z.readyWait>0||(ge.resolveWith(J,[Z]),Z.fn.triggerHandler&&(Z(J).triggerHandler("ready"),Z(J).off("ready"))))}}),Z.ready.promise=function(t){return ge||(ge=Z.Deferred(),"complete"===J.readyState?setTimeout(Z.ready):(J.addEventListener("DOMContentLoaded",s,!1),e.addEventListener("load",s,!1))),ge.promise(t)},Z.ready.promise();var me=Z.access=function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if("object"===Z.type(n)){i=!0;for(a in n)Z.access(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,Z.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(Z(e),n)})),t))for(;u>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o};Z.acceptData=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType},a.uid=1,a.accepts=Z.acceptData,a.prototype={key:function(e){if(!a.accepts(e))return 0;var t={},n=e[this.expando];if(!n){n=a.uid++;try{t[this.expando]={value:n},Object.defineProperties(e,t)}catch(r){t[this.expando]=n,Z.extend(e,t)}}return this.cache[n]||(this.cache[n]={}),n},set:function(e,t,n){var r,i=this.key(e),o=this.cache[i];if("string"==typeof t)o[t]=n;else if(Z.isEmptyObject(o))Z.extend(this.cache[i],t);else for(r in t)o[r]=t[r];return o},get:function(e,t){var n=this.cache[this.key(e)];return void 0===t?n:n[t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?(r=this.get(e,t),void 0!==r?r:this.get(e,Z.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,i,o=this.key(e),s=this.cache[o];if(void 0===t)this.cache[o]={};else{Z.isArray(t)?r=t.concat(t.map(Z.camelCase)):(i=Z.camelCase(t),t in s?r=[t,i]:(r=i,r=r in s?[r]:r.match(de)||[])),n=r.length;for(;n--;)delete s[r[n]]}},hasData:function(e){return!Z.isEmptyObject(this.cache[e[this.expando]]||{})},discard:function(e){e[this.expando]&&delete this.cache[e[this.expando]]}};var ve=new a,ye=new a,xe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,be=/([A-Z])/g;Z.extend({hasData:function(e){return ye.hasData(e)||ve.hasData(e)},data:function(e,t,n){return ye.access(e,t,n)},removeData:function(e,t){ye.remove(e,t)},_data:function(e,t,n){return ve.access(e,t,n)},_removeData:function(e,t){ve.remove(e,t)}}),Z.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=ye.get(o),1===o.nodeType&&!ve.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=Z.camelCase(r.slice(5)),u(o,r,i[r])));ve.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){ye.set(this,e)}):me(this,function(t){var n,r=Z.camelCase(e);if(o&&void 0===t){if(n=ye.get(o,e),void 0!==n)return n;if(n=ye.get(o,r),void 0!==n)return n;if(n=u(o,r,void 0),void 0!==n)return n}else this.each(function(){var n=ye.get(this,r);ye.set(this,r,t),-1!==e.indexOf("-")&&void 0!==n&&ye.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){ye.remove(this,e)})}}),Z.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=ve.get(e,t),n&&(!r||Z.isArray(n)?r=ve.access(e,t,Z.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=Z.queue(e,t),r=n.length,i=n.shift(),o=Z._queueHooks(e,t),s=function(){Z.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ve.get(e,n)||ve.access(e,n,{empty:Z.Callbacks("once memory").add(function(){ve.remove(e,[t+"queue",n])})})}}),Z.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?Z.queue(this[0],e):void 0===t?this:this.each(function(){var n=Z.queue(this,e,t);Z._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&Z.dequeue(this,e)})},dequeue:function(e){return this.each(function(){Z.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=Z.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=ve.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var we=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Te=["Top","Right","Bottom","Left"],Ce=function(e,t){return e=t||e,"none"===Z.css(e,"display")||!Z.contains(e.ownerDocument,e)},Ne=/^(?:checkbox|radio)$/i;!function(){var e=J.createDocumentFragment(),t=e.appendChild(J.createElement("div")),n=J.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),Q.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",Q.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var ke="undefined";Q.focusinBubbles="onfocusin"in e;var Ee=/^key/,Se=/^(?:mouse|pointer|contextmenu)|click/,De=/^(?:focusinfocus|focusoutblur)$/,je=/^([^.]*)(?:\.(.+)|)$/;Z.event={global:{},add:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,m=ve.get(e);if(m)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=Z.guid++),(u=m.events)||(u=m.events={}),(s=m.handle)||(s=m.handle=function(t){return typeof Z!==ke&&Z.event.triggered!==t.type?Z.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(de)||[""],l=t.length;l--;)a=je.exec(t[l])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d&&(f=Z.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=Z.event.special[d]||{},c=Z.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&Z.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||(p=u[d]=[],p.delegateCount=0,f.setup&&f.setup.call(e,r,h,s)!==!1||e.addEventListener&&e.addEventListener(d,s,!1)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),Z.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,m=ve.hasData(e)&&ve.get(e);if(m&&(u=m.events)){for(t=(t||"").match(de)||[""],l=t.length;l--;)if(a=je.exec(t[l])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d){for(f=Z.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,p=u[d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));s&&!p.length&&(f.teardown&&f.teardown.call(e,h,m.handle)!==!1||Z.removeEvent(e,d,m.handle),delete u[d])}else for(d in u)Z.event.remove(e,d+t[l],n,r,!0);Z.isEmptyObject(u)&&(delete m.handle,ve.remove(e,"events"))}},trigger:function(t,n,r,i){var o,s,a,u,l,c,f,p=[r||J],d=G.call(t,"type")?t.type:t,h=G.call(t,"namespace")?t.namespace.split("."):[];if(s=a=r=r||J,3!==r.nodeType&&8!==r.nodeType&&!De.test(d+Z.event.triggered)&&(d.indexOf(".")>=0&&(h=d.split("."),d=h.shift(),h.sort()),l=d.indexOf(":")<0&&"on"+d,t=t[Z.expando]?t:new Z.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:Z.makeArray(n,[t]),f=Z.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!Z.isWindow(r)){for(u=f.delegateType||d,De.test(u+d)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(r.ownerDocument||J)&&p.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=p[o++])&&!t.isPropagationStopped();)t.type=o>1?u:f.bindType||d,c=(ve.get(s,"events")||{})[t.type]&&ve.get(s,"handle"),c&&c.apply(s,n),c=l&&s[l],c&&c.apply&&Z.acceptData(s)&&(t.result=c.apply(s,n),t.result===!1&&t.preventDefault());return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(p.pop(),n)!==!1||!Z.acceptData(r)||l&&Z.isFunction(r[d])&&!Z.isWindow(r)&&(a=r[l],a&&(r[l]=null),Z.event.triggered=d,r[d](),Z.event.triggered=void 0,a&&(r[l]=a)),t.result}},dispatch:function(e){e=Z.event.fix(e);var t,n,r,i,o,s=[],a=_.call(arguments),u=(ve.get(this,"events")||{})[e.type]||[],l=Z.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){for(s=Z.event.handlers.call(this,e,u),t=0;(i=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)(!e.namespace_re||e.namespace_re.test(o.namespace))&&(e.handleObj=o,e.data=o.data,r=((Z.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!==this;u=u.parentNode||this)if(u.disabled!==!0||"click"!==e.type){for(r=[],n=0;a>n;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?Z(i,this).index(u)>=0:Z.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&s.push({elem:u,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||J,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},fix:function(e){if(e[Z.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];for(s||(this.fixHooks[i]=s=Se.test(i)?this.mouseHooks:Ee.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new Z.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=J),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,o):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==f()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===f()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&Z.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(e){return Z.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=Z.extend(new Z.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?Z.event.trigger(i,null,t):Z.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},Z.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)},Z.Event=function(e,t){return this instanceof Z.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?l:c):this.type=e,t&&Z.extend(this,t),this.timeStamp=e&&e.timeStamp||Z.now(),void(this[Z.expando]=!0)):new Z.Event(e,t)},Z.Event.prototype={isDefaultPrevented:c,isPropagationStopped:c,isImmediatePropagationStopped:c,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=l,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=l,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=l,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},Z.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){Z.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!Z.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),Q.focusinBubbles||Z.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){Z.event.simulate(t,e.target,Z.event.fix(e),!0)};Z.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=ve.access(r,t);i||r.addEventListener(e,n,!0),ve.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=ve.access(r,t)-1;i?ve.access(r,t,i):(r.removeEventListener(e,n,!0),ve.remove(r,t))}}}),Z.fn.extend({on:function(e,t,n,r,i){var o,s;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(s in e)this.on(s,t,n,e[s],i);return this}if(null==n&&null==r?(r=t,n=t=void 0):null==r&&("string"==typeof t?(r=n,n=void 0):(r=n,n=t,t=void 0)),r===!1)r=c;else if(!r)return this;return 1===i&&(o=r,r=function(e){return Z().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=Z.guid++)),this.each(function(){Z.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,Z(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=c),this.each(function(){Z.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){Z.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?Z.event.trigger(e,t,n,!0):void 0}});var Ae=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Le=/<([\w:]+)/,qe=/<|&#?\w+;/,He=/<(?:script|style|link)/i,Oe=/checked\s*(?:[^=]|=\s*.checked.)/i,Fe=/^$|\/(?:java|ecma)script/i,Pe=/^true\/(.*)/,Re=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Me.optgroup=Me.option,Me.tbody=Me.tfoot=Me.colgroup=Me.caption=Me.thead,Me.th=Me.td,Z.extend({clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),u=Z.contains(e.ownerDocument,e);if(!(Q.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||Z.isXMLDoc(e)))for(s=v(a),o=v(e),r=0,i=o.length;i>r;r++)y(o[r],s[r]);if(t)if(n)for(o=o||v(e),s=s||v(a),r=0,i=o.length;i>r;r++)m(o[r],s[r]);else m(e,a);return s=v(a,"script"),s.length>0&&g(s,!u&&v(e,"script")),a},buildFragment:function(e,t,n,r){for(var i,o,s,a,u,l,c=t.createDocumentFragment(),f=[],p=0,d=e.length;d>p;p++)if(i=e[p],i||0===i)if("object"===Z.type(i))Z.merge(f,i.nodeType?[i]:i);else if(qe.test(i)){for(o=o||c.appendChild(t.createElement("div")),s=(Le.exec(i)||["",""])[1].toLowerCase(),a=Me[s]||Me._default,o.innerHTML=a[1]+i.replace(Ae,"<$1></$2>")+a[2],l=a[0];l--;)o=o.lastChild;Z.merge(f,o.childNodes),o=c.firstChild,o.textContent=""}else f.push(t.createTextNode(i));for(c.textContent="",p=0;i=f[p++];)if((!r||-1===Z.inArray(i,r))&&(u=Z.contains(i.ownerDocument,i),o=v(c.appendChild(i),"script"),u&&g(o),n))for(l=0;i=o[l++];)Fe.test(i.type||"")&&n.push(i);return c},cleanData:function(e){for(var t,n,r,i,o=Z.event.special,s=0;void 0!==(n=e[s]);s++){if(Z.acceptData(n)&&(i=n[ve.expando],i&&(t=ve.cache[i]))){if(t.events)for(r in t.events)o[r]?Z.event.remove(n,r):Z.removeEvent(n,r,t.handle);ve.cache[i]&&delete ve.cache[i]}delete ye.cache[n[ye.expando]]}}}),Z.fn.extend({text:function(e){return me(this,function(e){return void 0===e?Z.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=e)})},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=p(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=p(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,r=e?Z.filter(e,this):this,i=0;null!=(n=r[i]);i++)t||1!==n.nodeType||Z.cleanData(v(n)),n.parentNode&&(t&&Z.contains(n.ownerDocument,n)&&g(v(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(Z.cleanData(v(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return Z.clone(this,e,t)})},html:function(e){return me(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!He.test(e)&&!Me[(Le.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(Ae,"<$1></$2>");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(Z.cleanData(v(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,Z.cleanData(v(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=z.apply([],e);var n,r,i,o,s,a,u=0,l=this.length,c=this,f=l-1,p=e[0],g=Z.isFunction(p);if(g||l>1&&"string"==typeof p&&!Q.checkClone&&Oe.test(p))return this.each(function(n){var r=c.eq(n);g&&(e[0]=p.call(this,n,r.html())),r.domManip(e,t)});if(l&&(n=Z.buildFragment(e,this[0].ownerDocument,!1,this),r=n.firstChild,1===n.childNodes.length&&(n=r),r)){for(i=Z.map(v(n,"script"),d),o=i.length;l>u;u++)s=n,u!==f&&(s=Z.clone(s,!0,!0),o&&Z.merge(i,v(s,"script"))),t.call(this[u],s,u);if(o)for(a=i[i.length-1].ownerDocument,Z.map(i,h),u=0;o>u;u++)s=i[u],Fe.test(s.type||"")&&!ve.access(s,"globalEval")&&Z.contains(a,s)&&(s.src?Z._evalUrl&&Z._evalUrl(s.src):Z.globalEval(s.textContent.replace(Re,"")))}return this}}),Z.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){Z.fn[e]=function(e){for(var n,r=[],i=Z(e),o=i.length-1,s=0;o>=s;s++)n=s===o?this:this.clone(!0),Z(i[s])[t](n),X.apply(r,n.get());return this.pushStack(r)}});var We,$e={},Ie=/^margin/,Be=new RegExp("^("+we+")(?!px)[a-z%]+$","i"),_e=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)};!function(){function t(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",s.innerHTML="",i.appendChild(o);var t=e.getComputedStyle(s,null);n="1%"!==t.top,r="4px"===t.width,i.removeChild(o)}var n,r,i=J.documentElement,o=J.createElement("div"),s=J.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",Q.clearCloneStyle="content-box"===s.style.backgroundClip,o.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",o.appendChild(s),e.getComputedStyle&&Z.extend(Q,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==r&&t(),r},reliableMarginRight:function(){var t,n=s.appendChild(J.createElement("div"));return n.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",s.style.width="1px",i.appendChild(o),t=!parseFloat(e.getComputedStyle(n,null).marginRight),i.removeChild(o),s.removeChild(n),t}}))}(),Z.swap=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i};var ze=/^(none|table(?!-c[ea]).+)/,Xe=new RegExp("^("+we+")(.*)$","i"),Ue=new RegExp("^([+-])=("+we+")","i"),Ve={position:"absolute",visibility:"hidden",display:"block"},Ye={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","O","Moz","ms"];Z.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=w(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=Z.camelCase(t),u=e.style;return t=Z.cssProps[a]||(Z.cssProps[a]=C(u,a)),s=Z.cssHooks[t]||Z.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t]:(o=typeof n,"string"===o&&(i=Ue.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(Z.css(e,t)),o="number"),null!=n&&n===n&&("number"!==o||Z.cssNumber[a]||(n+="px"),Q.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(u[t]=n)),void 0)}},css:function(e,t,n,r){var i,o,s,a=Z.camelCase(t);return t=Z.cssProps[a]||(Z.cssProps[a]=C(e.style,a)),s=Z.cssHooks[t]||Z.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=w(e,t,r)),"normal"===i&&t in Ye&&(i=Ye[t]),""===n||n?(o=parseFloat(i),n===!0||Z.isNumeric(o)?o||0:i):i}}),Z.each(["height","width"],function(e,t){Z.cssHooks[t]={get:function(e,n,r){return n?ze.test(Z.css(e,"display"))&&0===e.offsetWidth?Z.swap(e,Ve,function(){return E(e,t,r)}):E(e,t,r):void 0},set:function(e,n,r){var i=r&&_e(e);return N(e,n,r?k(e,t,r,"border-box"===Z.css(e,"boxSizing",!1,i),i):0)}}}),Z.cssHooks.marginRight=T(Q.reliableMarginRight,function(e,t){return t?Z.swap(e,{display:"inline-block"},w,[e,"marginRight"]):void 0}),Z.each({margin:"",padding:"",border:"Width"},function(e,t){Z.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+Te[r]+t]=o[r]||o[r-2]||o[0];return i}},Ie.test(e)||(Z.cssHooks[e+t].set=N)}),Z.fn.extend({css:function(e,t){return me(this,function(e,t,n){var r,i,o={},s=0;if(Z.isArray(t)){for(r=_e(e),i=t.length;i>s;s++)o[t[s]]=Z.css(e,t[s],!1,r);return o}return void 0!==n?Z.style(e,t,n):Z.css(e,t)},e,t,arguments.length>1)},show:function(){return S(this,!0)},hide:function(){return S(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ce(this)?Z(this).show():Z(this).hide()})}}),Z.Tween=D,D.prototype={constructor:D,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(Z.cssNumber[n]?"":"px")},cur:function(){var e=D.propHooks[this.prop];return e&&e.get?e.get(this):D.propHooks._default.get(this)},run:function(e){var t,n=D.propHooks[this.prop];return this.options.duration?this.pos=t=Z.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):D.propHooks._default.set(this),this}},D.prototype.init.prototype=D.prototype,D.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=Z.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){Z.fx.step[e.prop]?Z.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[Z.cssProps[e.prop]]||Z.cssHooks[e.prop])?Z.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},D.propHooks.scrollTop=D.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},Z.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},Z.fx=D.prototype.init,Z.fx.step={};var Qe,Je,Ke=/^(?:toggle|show|hide)$/,Ze=new RegExp("^(?:([+-])=|)("+we+")([a-z%]*)$","i"),et=/queueHooks$/,tt=[q],nt={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Ze.exec(t),o=i&&i[3]||(Z.cssNumber[e]?"":"px"),s=(Z.cssNumber[e]||"px"!==o&&+r)&&Ze.exec(Z.css(n.elem,e)),a=1,u=20;if(s&&s[3]!==o){o=o||s[3],i=i||[],s=+r||1;do a=a||".5",s/=a,Z.style(n.elem,e,s+o);while(a!==(a=n.cur()/r)&&1!==a&&--u)}return i&&(s=n.start=+s||+r||0,n.unit=o,n.end=i[1]?s+(i[1]+1)*i[2]:+i[2]),n}]};Z.Animation=Z.extend(O,{tweener:function(e,t){Z.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,r=0,i=e.length;i>r;r++)n=e[r],nt[n]=nt[n]||[],nt[n].unshift(t)},prefilter:function(e,t){t?tt.unshift(e):tt.push(e)}}),Z.speed=function(e,t,n){var r=e&&"object"==typeof e?Z.extend({},e):{complete:n||!n&&t||Z.isFunction(e)&&e,duration:e,easing:n&&t||t&&!Z.isFunction(t)&&t};return r.duration=Z.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in Z.fx.speeds?Z.fx.speeds[r.duration]:Z.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){Z.isFunction(r.old)&&r.old.call(this),r.queue&&Z.dequeue(this,r.queue)},r},Z.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Ce).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=Z.isEmptyObject(e),o=Z.speed(t,n,r),s=function(){var t=O(this,Z.extend({},e),o);(i||ve.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=Z.timers,s=ve.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&et.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&Z.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=ve.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=Z.timers,s=r?r.length:0;for(n.finish=!0,Z.queue(this,e,[]),
i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),Z.each(["toggle","show","hide"],function(e,t){var n=Z.fn[t];Z.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(A(t,!0),e,r,i)}}),Z.each({slideDown:A("show"),slideUp:A("hide"),slideToggle:A("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){Z.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),Z.timers=[],Z.fx.tick=function(){var e,t=0,n=Z.timers;for(Qe=Z.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||Z.fx.stop(),Qe=void 0},Z.fx.timer=function(e){Z.timers.push(e),e()?Z.fx.start():Z.timers.pop()},Z.fx.interval=13,Z.fx.start=function(){Je||(Je=setInterval(Z.fx.tick,Z.fx.interval))},Z.fx.stop=function(){clearInterval(Je),Je=null},Z.fx.speeds={slow:600,fast:200,_default:400},Z.fn.delay=function(e,t){return e=Z.fx?Z.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},function(){var e=J.createElement("input"),t=J.createElement("select"),n=t.appendChild(J.createElement("option"));e.type="checkbox",Q.checkOn=""!==e.value,Q.optSelected=n.selected,t.disabled=!0,Q.optDisabled=!n.disabled,e=J.createElement("input"),e.value="t",e.type="radio",Q.radioValue="t"===e.value}();var rt,it,ot=Z.expr.attrHandle;Z.fn.extend({attr:function(e,t){return me(this,Z.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){Z.removeAttr(this,e)})}}),Z.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return typeof e.getAttribute===ke?Z.prop(e,t,n):(1===o&&Z.isXMLDoc(e)||(t=t.toLowerCase(),r=Z.attrHooks[t]||(Z.expr.match.bool.test(t)?it:rt)),void 0===n?r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=Z.find.attr(e,t),null==i?void 0:i):null!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):void Z.removeAttr(e,t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(de);if(o&&1===e.nodeType)for(;n=o[i++];)r=Z.propFix[n]||n,Z.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)},attrHooks:{type:{set:function(e,t){if(!Q.radioValue&&"radio"===t&&Z.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),it={set:function(e,t,n){return t===!1?Z.removeAttr(e,n):e.setAttribute(n,n),n}},Z.each(Z.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ot[t]||Z.find.attr;ot[t]=function(e,t,r){var i,o;return r||(o=ot[t],ot[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,ot[t]=o),i}});var st=/^(?:input|select|textarea|button)$/i;Z.fn.extend({prop:function(e,t){return me(this,Z.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[Z.propFix[e]||e]})}}),Z.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return o=1!==s||!Z.isXMLDoc(e),o&&(t=Z.propFix[t]||t,i=Z.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){return e.hasAttribute("tabindex")||st.test(e.nodeName)||e.href?e.tabIndex:-1}}}}),Q.optSelected||(Z.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),Z.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){Z.propFix[this.toLowerCase()]=this});var at=/[\t\r\n\f]/g;Z.fn.extend({addClass:function(e){var t,n,r,i,o,s,a="string"==typeof e&&e,u=0,l=this.length;if(Z.isFunction(e))return this.each(function(t){Z(this).addClass(e.call(this,t,this.className))});if(a)for(t=(e||"").match(de)||[];l>u;u++)if(n=this[u],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(at," "):" ")){for(o=0;i=t[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");s=Z.trim(r),n.className!==s&&(n.className=s)}return this},removeClass:function(e){var t,n,r,i,o,s,a=0===arguments.length||"string"==typeof e&&e,u=0,l=this.length;if(Z.isFunction(e))return this.each(function(t){Z(this).removeClass(e.call(this,t,this.className))});if(a)for(t=(e||"").match(de)||[];l>u;u++)if(n=this[u],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(at," "):"")){for(o=0;i=t[o++];)for(;r.indexOf(" "+i+" ")>=0;)r=r.replace(" "+i+" "," ");s=e?Z.trim(r):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):Z.isFunction(e)?this.each(function(n){Z(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n)for(var t,r=0,i=Z(this),o=e.match(de)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else(n===ke||"boolean"===n)&&(this.className&&ve.set(this,"__className__",this.className),this.className=this.className||e===!1?"":ve.get(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,r=this.length;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(at," ").indexOf(t)>=0)return!0;return!1}});var ut=/\r/g;Z.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=Z.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,Z(this).val()):e,null==i?i="":"number"==typeof i?i+="":Z.isArray(i)&&(i=Z.map(i,function(e){return null==e?"":e+""})),t=Z.valHooks[this.type]||Z.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=Z.valHooks[i.type]||Z.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(ut,""):null==n?"":n)}}}),Z.extend({valHooks:{option:{get:function(e){var t=Z.find.attr(e,"value");return null!=t?t:Z.trim(Z.text(e))}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,u=0>i?a:o?i:0;a>u;u++)if(n=r[u],(n.selected||u===i)&&(Q.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!Z.nodeName(n.parentNode,"optgroup"))){if(t=Z(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=Z.makeArray(t),s=i.length;s--;)r=i[s],(r.selected=Z.inArray(r.value,o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),Z.each(["radio","checkbox"],function(){Z.valHooks[this]={set:function(e,t){return Z.isArray(t)?e.checked=Z.inArray(Z(e).val(),t)>=0:void 0}},Q.checkOn||(Z.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),Z.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){Z.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),Z.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var lt=Z.now(),ct=/\?/;Z.parseJSON=function(e){return JSON.parse(e+"")},Z.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,"text/xml")}catch(r){t=void 0}return(!t||t.getElementsByTagName("parsererror").length)&&Z.error("Invalid XML: "+e),t};var ft=/#.*$/,pt=/([?&])_=[^&]*/,dt=/^(.*?):[ \t]*([^\r\n]*)$/gm,ht=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,gt=/^(?:GET|HEAD)$/,mt=/^\/\//,vt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,yt={},xt={},bt="*/".concat("*"),wt=e.location.href,Tt=vt.exec(wt.toLowerCase())||[];Z.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt,type:"GET",isLocal:ht.test(Tt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":Z.parseJSON,"text xml":Z.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?R(R(e,Z.ajaxSettings),t):R(Z.ajaxSettings,e)},ajaxPrefilter:F(yt),ajaxTransport:F(xt),ajax:function(e,t){function n(e,t,n,s){var u,c,v,y,b,T=t;2!==x&&(x=2,a&&clearTimeout(a),r=void 0,o=s||"",w.readyState=e>0?4:0,u=e>=200&&300>e||304===e,n&&(y=M(f,w,n)),y=W(f,y,w,u),u?(f.ifModified&&(b=w.getResponseHeader("Last-Modified"),b&&(Z.lastModified[i]=b),b=w.getResponseHeader("etag"),b&&(Z.etag[i]=b)),204===e||"HEAD"===f.type?T="nocontent":304===e?T="notmodified":(T=y.state,c=y.data,v=y.error,u=!v)):(v=T,(e||!T)&&(T="error",0>e&&(e=0))),w.status=e,w.statusText=(t||T)+"",u?h.resolveWith(p,[c,T,w]):h.rejectWith(p,[w,T,v]),w.statusCode(m),m=void 0,l&&d.trigger(u?"ajaxSuccess":"ajaxError",[w,f,u?c:v]),g.fireWith(p,[w,T]),l&&(d.trigger("ajaxComplete",[w,f]),--Z.active||Z.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,s,a,u,l,c,f=Z.ajaxSetup({},t),p=f.context||f,d=f.context&&(p.nodeType||p.jquery)?Z(p):Z.event,h=Z.Deferred(),g=Z.Callbacks("once memory"),m=f.statusCode||{},v={},y={},x=0,b="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!s)for(s={};t=dt.exec(o);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?o:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=y[n]=y[n]||e,v[e]=t),this},overrideMimeType:function(e){return x||(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>x)for(t in e)m[t]=[m[t],e[t]];else w.always(e[w.status]);return this},abort:function(e){var t=e||b;return r&&r.abort(t),n(0,t),this}};if(h.promise(w).complete=g.add,w.success=w.done,w.error=w.fail,f.url=((e||f.url||wt)+"").replace(ft,"").replace(mt,Tt[1]+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=Z.trim(f.dataType||"*").toLowerCase().match(de)||[""],null==f.crossDomain&&(u=vt.exec(f.url.toLowerCase()),f.crossDomain=!(!u||u[1]===Tt[1]&&u[2]===Tt[2]&&(u[3]||("http:"===u[1]?"80":"443"))===(Tt[3]||("http:"===Tt[1]?"80":"443")))),f.data&&f.processData&&"string"!=typeof f.data&&(f.data=Z.param(f.data,f.traditional)),P(yt,f,t,w),2===x)return w;l=Z.event&&f.global,l&&0===Z.active++&&Z.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!gt.test(f.type),i=f.url,f.hasContent||(f.data&&(i=f.url+=(ct.test(i)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=pt.test(i)?i.replace(pt,"$1_="+lt++):i+(ct.test(i)?"&":"?")+"_="+lt++)),f.ifModified&&(Z.lastModified[i]&&w.setRequestHeader("If-Modified-Since",Z.lastModified[i]),Z.etag[i]&&w.setRequestHeader("If-None-Match",Z.etag[i])),(f.data&&f.hasContent&&f.contentType!==!1||t.contentType)&&w.setRequestHeader("Content-Type",f.contentType),w.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+bt+"; q=0.01":""):f.accepts["*"]);for(c in f.headers)w.setRequestHeader(c,f.headers[c]);if(f.beforeSend&&(f.beforeSend.call(p,w,f)===!1||2===x))return w.abort();b="abort";for(c in{success:1,error:1,complete:1})w[c](f[c]);if(r=P(xt,f,t,w)){w.readyState=1,l&&d.trigger("ajaxSend",[w,f]),f.async&&f.timeout>0&&(a=setTimeout(function(){w.abort("timeout")},f.timeout));try{x=1,r.send(v,n)}catch(T){if(!(2>x))throw T;n(-1,T)}}else n(-1,"No Transport");return w},getJSON:function(e,t,n){return Z.get(e,t,n,"json")},getScript:function(e,t){return Z.get(e,void 0,t,"script")}}),Z.each(["get","post"],function(e,t){Z[t]=function(e,n,r,i){return Z.isFunction(n)&&(i=i||r,r=n,n=void 0),Z.ajax({url:e,type:t,dataType:i,data:n,success:r})}}),Z._evalUrl=function(e){return Z.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},Z.fn.extend({wrapAll:function(e){var t;return Z.isFunction(e)?this.each(function(t){Z(this).wrapAll(e.call(this,t))}):(this[0]&&(t=Z(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return Z.isFunction(e)?this.each(function(t){Z(this).wrapInner(e.call(this,t))}):this.each(function(){var t=Z(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=Z.isFunction(e);return this.each(function(n){Z(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){Z.nodeName(this,"body")||Z(this).replaceWith(this.childNodes)}).end()}}),Z.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0},Z.expr.filters.visible=function(e){return!Z.expr.filters.hidden(e)};var Ct=/%20/g,Nt=/\[\]$/,kt=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,St=/^(?:input|select|textarea|keygen)/i;Z.param=function(e,t){var n,r=[],i=function(e,t){t=Z.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=Z.ajaxSettings&&Z.ajaxSettings.traditional),Z.isArray(e)||e.jquery&&!Z.isPlainObject(e))Z.each(e,function(){i(this.name,this.value)});else for(n in e)$(n,e[n],t,i);return r.join("&").replace(Ct,"+")},Z.fn.extend({serialize:function(){return Z.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=Z.prop(this,"elements");return e?Z.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!Z(this).is(":disabled")&&St.test(this.nodeName)&&!Et.test(e)&&(this.checked||!Ne.test(e))}).map(function(e,t){var n=Z(this).val();return null==n?null:Z.isArray(n)?Z.map(n,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:n.replace(kt,"\r\n")}}).get()}}),Z.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(e){}};var Dt=0,jt={},At={0:200,1223:204},Lt=Z.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in jt)jt[e]()}),Q.cors=!!Lt&&"withCredentials"in Lt,Q.ajax=Lt=!!Lt,Z.ajaxTransport(function(e){var t;return Q.cors||Lt&&!e.crossDomain?{send:function(n,r){var i,o=e.xhr(),s=++Dt;if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)o[i]=e.xhrFields[i];e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)o.setRequestHeader(i,n[i]);t=function(e){return function(){t&&(delete jt[s],t=o.onload=o.onerror=null,"abort"===e?o.abort():"error"===e?r(o.status,o.statusText):r(At[o.status]||o.status,o.statusText,"string"==typeof o.responseText?{text:o.responseText}:void 0,o.getAllResponseHeaders()))}},o.onload=t(),o.onerror=t("error"),t=jt[s]=t("abort");try{o.send(e.hasContent&&e.data||null)}catch(a){if(t)throw a}},abort:function(){t&&t()}}:void 0}),Z.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return Z.globalEval(e),e}}}),Z.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),Z.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=Z("<script>").prop({async:!0,charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),J.head.appendChild(t[0])},abort:function(){n&&n()}}}});var qt=[],Ht=/(=)\?(?=&|$)|\?\?/;Z.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=qt.pop()||Z.expando+"_"+lt++;return this[e]=!0,e}}),Z.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(Ht.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ht.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=Z.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ht,"$1"+i):t.jsonp!==!1&&(t.url+=(ct.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||Z.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,qt.push(i)),s&&Z.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),Z.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||J;var r=se.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=Z.buildFragment([e],t,i),i&&i.length&&Z(i).remove(),Z.merge([],r.childNodes))};var Ot=Z.fn.load;Z.fn.load=function(e,t,n){if("string"!=typeof e&&Ot)return Ot.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>=0&&(r=Z.trim(e.slice(a)),e=e.slice(0,a)),Z.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&Z.ajax({url:e,type:i,dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?Z("<div>").append(Z.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){s.each(n,o||[e.responseText,t,e])}),this},Z.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){Z.fn[t]=function(e){return this.on(t,e)}}),Z.expr.filters.animated=function(e){return Z.grep(Z.timers,function(t){return e===t.elem}).length};var Ft=e.document.documentElement;Z.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l,c=Z.css(e,"position"),f=Z(e),p={};"static"===c&&(e.style.position="relative"),a=f.offset(),o=Z.css(e,"top"),u=Z.css(e,"left"),l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1,l?(r=f.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),Z.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):f.css(p)}},Z.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){Z.offset.setOffset(this,e,t)});var t,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)return t=o.documentElement,Z.contains(t,r)?(typeof r.getBoundingClientRect!==ke&&(i=r.getBoundingClientRect()),n=I(o),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===Z.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),Z.nodeName(e[0],"html")||(r=e.offset()),r.top+=Z.css(e[0],"borderTopWidth",!0),r.left+=Z.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-Z.css(n,"marginTop",!0),left:t.left-r.left-Z.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||Ft;e&&!Z.nodeName(e,"html")&&"static"===Z.css(e,"position");)e=e.offsetParent;return e||Ft})}}),Z.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var r="pageYOffset"===n;Z.fn[t]=function(i){return me(this,function(t,i,o){var s=I(t);return void 0===o?s?s[n]:t[i]:void(s?s.scrollTo(r?e.pageXOffset:o,r?o:e.pageYOffset):t[i]=o)},t,i,arguments.length,null)}}),Z.each(["top","left"],function(e,t){Z.cssHooks[t]=T(Q.pixelPosition,function(e,n){return n?(n=w(e,t),Be.test(n)?Z(e).position()[t]+"px":n):void 0})}),Z.each({Height:"height",Width:"width"},function(e,t){Z.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){Z.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return me(this,function(t,n,r){var i;return Z.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?Z.css(t,n,s):Z.style(t,n,r,s)},t,o?r:void 0,o,null)}})}),Z.fn.size=function(){return this.length},Z.fn.andSelf=Z.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return Z});var Pt=e.jQuery,Rt=e.$;return Z.noConflict=function(t){return e.$===Z&&(e.$=Rt),t&&e.jQuery===Z&&(e.jQuery=Pt),Z},typeof t===ke&&(e.jQuery=e.$=Z),Z});
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher")}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}t.fn.emulateTransitionEnd=function(e){var i=!1,o=this;t(this).one("bsTransitionEnd",function(){i=!0});var n=function(){i||t(o).trigger(t.support.transition.end)};return setTimeout(n,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),n=i.data("bs.alert");n||i.data("bs.alert",n=new o(this)),"string"==typeof e&&n[e].call(i)})}var i='[data-dismiss="alert"]',o=function(e){t(e).on("click",i,this.close)};o.VERSION="3.3.5",o.TRANSITION_DURATION=150,o.prototype.close=function(e){function i(){a.detach().trigger("closed.bs.alert").remove()}var n=t(this),s=n.attr("data-target");s||(s=n.attr("href"),s=s&&s.replace(/.*(?=#[^\s]*$)/,""));var a=t(s);e&&e.preventDefault(),a.length||(a=n.closest(".alert")),a.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",i).emulateTransitionEnd(o.TRANSITION_DURATION):i())};var n=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=o,t.fn.alert.noConflict=function(){return t.fn.alert=n,this},t(document).on("click.bs.alert.data-api",i,o.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.button"),s="object"==typeof e&&e;n||o.data("bs.button",n=new i(this,s)),"toggle"==e?n.toggle():e&&n.setState(e)})}var i=function(e,o){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,o),this.isLoading=!1};i.VERSION="3.3.5",i.DEFAULTS={loadingText:"loading..."},i.prototype.setState=function(e){var i="disabled",o=this.$element,n=o.is("input")?"val":"html",s=o.data();e+="Text",null==s.resetText&&o.data("resetText",o[n]()),setTimeout(t.proxy(function(){o[n](null==s[e]?this.options[e]:s[e]),"loadingText"==e?(this.isLoading=!0,o.addClass(i).attr(i,i)):this.isLoading&&(this.isLoading=!1,o.removeClass(i).removeAttr(i))},this),0)},i.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var i=this.$element.find("input");"radio"==i.prop("type")?(i.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==i.prop("type")&&(i.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),i.prop("checked",this.$element.hasClass("active")),t&&i.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var o=t.fn.button;t.fn.button=e,t.fn.button.Constructor=i,t.fn.button.noConflict=function(){return t.fn.button=o,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(i){var o=t(i.target);o.hasClass("btn")||(o=o.closest(".btn")),e.call(o,"toggle"),t(i.target).is('input[type="radio"]')||t(i.target).is('input[type="checkbox"]')||i.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.carousel"),s=t.extend({},i.DEFAULTS,o.data(),"object"==typeof e&&e),a="string"==typeof e?e:s.slide;n||o.data("bs.carousel",n=new i(this,s)),"number"==typeof e?n.to(e):a?n[a]():s.interval&&n.pause().cycle()})}var i=function(e,i){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=i,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};i.VERSION="3.3.5",i.TRANSITION_DURATION=600,i.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},i.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},i.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},i.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},i.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e),o="prev"==t&&0===i||"next"==t&&i==this.$items.length-1;if(o&&!this.options.wrap)return e;var n="prev"==t?-1:1,s=(i+n)%this.$items.length;return this.$items.eq(s)},i.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));return t>this.$items.length-1||0>t?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):i==t?this.pause().cycle():this.slide(t>i?"next":"prev",this.$items.eq(t))},i.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},i.prototype.next=function(){return this.sliding?void 0:this.slide("next")},i.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},i.prototype.slide=function(e,o){var n=this.$element.find(".item.active"),s=o||this.getItemForDirection(e,n),a=this.interval,r="next"==e?"left":"right",l=this;if(s.hasClass("active"))return this.sliding=!1;var h=s[0],d=t.Event("slide.bs.carousel",{relatedTarget:h,direction:r});if(this.$element.trigger(d),!d.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var p=t(this.$indicators.children()[this.getItemIndex(s)]);p&&p.addClass("active")}var c=t.Event("slid.bs.carousel",{relatedTarget:h,direction:r});return t.support.transition&&this.$element.hasClass("slide")?(s.addClass(e),s[0].offsetWidth,n.addClass(r),s.addClass(r),n.one("bsTransitionEnd",function(){s.removeClass([e,r].join(" ")).addClass("active"),n.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(c)},0)}).emulateTransitionEnd(i.TRANSITION_DURATION)):(n.removeClass("active"),s.addClass("active"),this.sliding=!1,this.$element.trigger(c)),a&&this.cycle(),this}};var o=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=i,t.fn.carousel.noConflict=function(){return t.fn.carousel=o,this};var n=function(i){var o,n=t(this),s=t(n.attr("data-target")||(o=n.attr("href"))&&o.replace(/.*(?=#[^\s]+$)/,""));if(s.hasClass("carousel")){var a=t.extend({},s.data(),n.data()),r=n.attr("data-slide-to");r&&(a.interval=!1),e.call(s,a),r&&s.data("bs.carousel").to(r),i.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",n).on("click.bs.carousel.data-api","[data-slide-to]",n),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var i=t(this);e.call(i,i.data())})})}(jQuery),+function(t){"use strict";function e(e){var i,o=e.attr("data-target")||(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return t(o)}function i(e){return this.each(function(){var i=t(this),n=i.data("bs.collapse"),s=t.extend({},o.DEFAULTS,i.data(),"object"==typeof e&&e);!n&&s.toggle&&/show|hide/.test(e)&&(s.toggle=!1),n||i.data("bs.collapse",n=new o(this,s)),"string"==typeof e&&n[e]()})}var o=function(e,i){this.$element=t(e),this.options=t.extend({},o.DEFAULTS,i),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};o.VERSION="3.3.5",o.TRANSITION_DURATION=350,o.DEFAULTS={toggle:!0},o.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},o.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,n=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(n&&n.length&&(e=n.data("bs.collapse"),e&&e.transitioning))){var s=t.Event("show.bs.collapse");if(this.$element.trigger(s),!s.isDefaultPrevented()){n&&n.length&&(i.call(n,"hide"),e||n.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var r=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return r.call(this);var l=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(o.TRANSITION_DURATION)[a](this.$element[0][l])}}}},o.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[i](0).one("bsTransitionEnd",t.proxy(n,this)).emulateTransitionEnd(o.TRANSITION_DURATION):n.call(this)}}},o.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},o.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(i,o){var n=t(o);this.addAriaAndCollapsedClass(e(n),n)},this)).end()},o.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var n=t.fn.collapse;t.fn.collapse=i,t.fn.collapse.Constructor=o,t.fn.collapse.noConflict=function(){return t.fn.collapse=n,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(o){var n=t(this);n.attr("data-target")||o.preventDefault();var s=e(n),a=s.data("bs.collapse"),r=a?"toggle":n.data();i.call(s,r)})}(jQuery),+function(t){"use strict";function e(e){var i=e.attr("data-target");i||(i=e.attr("href"),i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,""));var o=i&&t(i);return o&&o.length?o:e.parent()}function i(i){i&&3===i.which||(t(n).remove(),t(s).each(function(){var o=t(this),n=e(o),s={relatedTarget:this};n.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&t.contains(n[0],i.target)||(n.trigger(i=t.Event("hide.bs.dropdown",s)),i.isDefaultPrevented()||(o.attr("aria-expanded","false"),n.removeClass("open").trigger("hidden.bs.dropdown",s))))}))}function o(e){return this.each(function(){var i=t(this),o=i.data("bs.dropdown");o||i.data("bs.dropdown",o=new a(this)),"string"==typeof e&&o[e].call(i)})}var n=".dropdown-backdrop",s='[data-toggle="dropdown"]',a=function(e){t(e).on("click.bs.dropdown",this.toggle)};a.VERSION="3.3.5",a.prototype.toggle=function(o){var n=t(this);if(!n.is(".disabled, :disabled")){var s=e(n),a=s.hasClass("open");if(i(),!a){"ontouchstart"in document.documentElement&&!s.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",i);var r={relatedTarget:this};if(s.trigger(o=t.Event("show.bs.dropdown",r)),o.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),s.toggleClass("open").trigger("shown.bs.dropdown",r)}return!1}},a.prototype.keydown=function(i){if(/(38|40|27|32)/.test(i.which)&&!/input|textarea/i.test(i.target.tagName)){var o=t(this);if(i.preventDefault(),i.stopPropagation(),!o.is(".disabled, :disabled")){var n=e(o),a=n.hasClass("open");if(!a&&27!=i.which||a&&27==i.which)return 27==i.which&&n.find(s).trigger("focus"),o.trigger("click");var r=" li:not(.disabled):visible a",l=n.find(".dropdown-menu"+r);if(l.length){var h=l.index(i.target);38==i.which&&h>0&&h--,40==i.which&&h<l.length-1&&h++,~h||(h=0),l.eq(h).trigger("focus")}}}};var r=t.fn.dropdown;t.fn.dropdown=o,t.fn.dropdown.Constructor=a,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=r,this},t(document).on("click.bs.dropdown.data-api",i).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",s,a.prototype.toggle).on("keydown.bs.dropdown.data-api",s,a.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",a.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,o){return this.each(function(){var n=t(this),s=n.data("bs.modal"),a=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);s||n.data("bs.modal",s=new i(this,a)),"string"==typeof e?s[e](o):a.show&&s.show(o)})}var i=function(e,i){this.options=i,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};i.VERSION="3.3.5",i.TRANSITION_DURATION=300,i.BACKDROP_TRANSITION_DURATION=150,i.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},i.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},i.prototype.show=function(e){var o=this,n=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(n),this.isShown||n.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){o.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(o.$element)&&(o.ignoreBackdropClick=!0)})}),this.backdrop(function(){var n=t.support.transition&&o.$element.hasClass("fade");o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.adjustDialog(),n&&o.$element[0].offsetWidth,o.$element.addClass("in"),o.enforceFocus();var s=t.Event("shown.bs.modal",{relatedTarget:e});n?o.$dialog.one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(s)}).emulateTransitionEnd(i.TRANSITION_DURATION):o.$element.trigger("focus").trigger(s)}))},i.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(i.TRANSITION_DURATION):this.hideModal())},i.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},i.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},i.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},i.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},i.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},i.prototype.backdrop=function(e){var o=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var s=t.support.transition&&n;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+n).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),s&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;s?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){o.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},i.prototype.handleUpdate=function(){this.adjustDialog()},i.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},i.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},i.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},i.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},i.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},i.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var o=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=i,t.fn.modal.noConflict=function(){return t.fn.modal=o,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(i){var o=t(this),n=o.attr("href"),s=t(o.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),a=s.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(n)&&n},s.data(),o.data());o.is("a")&&i.preventDefault(),s.one("show.bs.modal",function(t){t.isDefaultPrevented()||s.one("hidden.bs.modal",function(){o.is(":visible")&&o.trigger("focus")})}),e.call(s,a,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tooltip"),s="object"==typeof e&&e;(n||!/destroy|hide/.test(e))&&(n||o.data("bs.tooltip",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};i.VERSION="3.3.5",i.TRANSITION_DURATION=150,i.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},i.prototype.init=function(e,i,o){if(this.enabled=!0,this.type=e,this.$element=t(i),this.options=this.getOptions(o),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var n=this.options.trigger.split(" "),s=n.length;s--;){var a=n[s];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var r="hover"==a?"mouseenter":"focusin",l="hover"==a?"mouseleave":"focusout";this.$element.on(r+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},i.prototype.getDelegateOptions=function(){var e={},i=this.getDefaults();return this._options&&t.each(this._options,function(t,o){i[t]!=o&&(e[t]=o)}),e},i.prototype.enter=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusin"==e.type?"focus":"hover"]=!0),i.tip().hasClass("in")||"in"==i.hoverState?void(i.hoverState="in"):(clearTimeout(i.timeout),i.hoverState="in",i.options.delay&&i.options.delay.show?void(i.timeout=setTimeout(function(){"in"==i.hoverState&&i.show()},i.options.delay.show)):i.show())},i.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},i.prototype.leave=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusout"==e.type?"focus":"hover"]=!1),i.isInStateTrue()?void 0:(clearTimeout(i.timeout),i.hoverState="out",i.options.delay&&i.options.delay.hide?void(i.timeout=setTimeout(function(){"out"==i.hoverState&&i.hide()},i.options.delay.hide)):i.hide())},i.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var o=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!o)return;var n=this,s=this.tip(),a=this.getUID(this.type);this.setContent(),s.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&s.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,s[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,h=l.test(r);h&&(r=r.replace(l,"")||"top"),s.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?s.appendTo(this.options.container):s.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var d=this.getPosition(),p=s[0].offsetWidth,c=s[0].offsetHeight;if(h){var f=r,u=this.getPosition(this.$viewport);r="bottom"==r&&d.bottom+c>u.bottom?"top":"top"==r&&d.top-c<u.top?"bottom":"right"==r&&d.right+p>u.width?"left":"left"==r&&d.left-p<u.left?"right":r,s.removeClass(f).addClass(r)}var g=this.getCalculatedOffset(r,d,p,c);this.applyPlacement(g,r);var m=function(){var t=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==t&&n.leave(n)};t.support.transition&&this.$tip.hasClass("fade")?s.one("bsTransitionEnd",m).emulateTransitionEnd(i.TRANSITION_DURATION):m()}},i.prototype.applyPlacement=function(e,i){var o=this.tip(),n=o[0].offsetWidth,s=o[0].offsetHeight,a=parseInt(o.css("margin-top"),10),r=parseInt(o.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(r)&&(r=0),e.top+=a,e.left+=r,t.offset.setOffset(o[0],t.extend({using:function(t){o.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),o.addClass("in");var l=o[0].offsetWidth,h=o[0].offsetHeight;"top"==i&&h!=s&&(e.top=e.top+s-h);var d=this.getViewportAdjustedDelta(i,e,l,h);d.left?e.left+=d.left:e.top+=d.top;var p=/top|bottom/.test(i),c=p?2*d.left-n+l:2*d.top-s+h,f=p?"offsetWidth":"offsetHeight";o.offset(e),this.replaceArrow(c,o[0][f],p)},i.prototype.replaceArrow=function(t,e,i){this.arrow().css(i?"left":"top",50*(1-t/e)+"%").css(i?"top":"left","")},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},i.prototype.hide=function(e){function o(){"in"!=n.hoverState&&s.detach(),n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type),e&&e()}var n=this,s=t(this.$tip),a=t.Event("hide.bs."+this.type);return this.$element.trigger(a),a.isDefaultPrevented()?void 0:(s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",o).emulateTransitionEnd(i.TRANSITION_DURATION):o(),this.hoverState=null,this)},i.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},i.prototype.hasContent=function(){return this.getTitle()},i.prototype.getPosition=function(e){e=e||this.$element;var i=e[0],o="BODY"==i.tagName,n=i.getBoundingClientRect();null==n.width&&(n=t.extend({},n,{width:n.right-n.left,height:n.bottom-n.top}));var s=o?{top:0,left:0}:e.offset(),a={scroll:o?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},r=o?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},n,a,r,s)},i.prototype.getCalculatedOffset=function(t,e,i,o){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-i/2}:"top"==t?{top:e.top-o,left:e.left+e.width/2-i/2}:"left"==t?{top:e.top+e.height/2-o/2,left:e.left-i}:{top:e.top+e.height/2-o/2,left:e.left+e.width}},i.prototype.getViewportAdjustedDelta=function(t,e,i,o){var n={top:0,left:0};if(!this.$viewport)return n;var s=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var r=e.top-s-a.scroll,l=e.top+s-a.scroll+o;r<a.top?n.top=a.top-r:l>a.top+a.height&&(n.top=a.top+a.height-l)}else{var h=e.left-s,d=e.left+s+i;h<a.left?n.left=a.left-h:d>a.right&&(n.left=a.left+a.width-d)}return n},i.prototype.getTitle=function(){var t,e=this.$element,i=this.options;return t=e.attr("data-original-title")||("function"==typeof i.title?i.title.call(e[0]):i.title)},i.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},i.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},i.prototype.enable=function(){this.enabled=!0},i.prototype.disable=function(){this.enabled=!1},i.prototype.toggleEnabled=function(){this.enabled=!this.enabled},i.prototype.toggle=function(e){var i=this;e&&(i=t(e.currentTarget).data("bs."+this.type),i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i))),e?(i.inState.click=!i.inState.click,i.isInStateTrue()?i.enter(i):i.leave(i)):i.tip().hasClass("in")?i.leave(i):i.enter(i)},i.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null})};var o=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=i,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=o,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.popover"),s="object"==typeof e&&e;(n||!/destroy|hide/.test(e))&&(n||o.data("bs.popover",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");i.VERSION="3.3.5",i.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),i.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),i.prototype.constructor=i,i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),i=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof i?"html":"append":"text"](i),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},i.prototype.hasContent=function(){return this.getTitle()||this.getContent()},i.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var o=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=i,t.fn.popover.noConflict=function(){return t.fn.popover=o,this}}(jQuery),+function(t){"use strict";function e(i,o){this.$body=t(document.body),this.$scrollElement=t(t(i).is(document.body)?window:i),this.options=t.extend({},e.DEFAULTS,o),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function i(i){return this.each(function(){var o=t(this),n=o.data("bs.scrollspy"),s="object"==typeof i&&i;n||o.data("bs.scrollspy",n=new e(this,s)),"string"==typeof i&&n[i]()})}e.VERSION="3.3.5",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,i="offset",o=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(i="position",o=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),n=e.data("target")||e.attr("href"),s=/^#./.test(n)&&t(n);return s&&s.length&&s.is(":visible")&&[[s[i]().top+o,n]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,i=this.getScrollHeight(),o=this.options.offset+i-this.$scrollElement.height(),n=this.offsets,s=this.targets,a=this.activeTarget;if(this.scrollHeight!=i&&this.refresh(),e>=o)return a!=(t=s[s.length-1])&&this.activate(t);if(a&&e<n[0])return this.activeTarget=null,this.clear();for(t=n.length;t--;)a!=s[t]&&e>=n[t]&&(void 0===n[t+1]||e<n[t+1])&&this.activate(s[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var i=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',o=t(i).parents("li").addClass("active");o.parent(".dropdown-menu").length&&(o=o.closest("li.dropdown").addClass("active")),
o.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var o=t.fn.scrollspy;t.fn.scrollspy=i,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=o,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);i.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tab");n||o.data("bs.tab",n=new i(this)),"string"==typeof e&&n[e]()})}var i=function(e){this.element=t(e)};i.VERSION="3.3.5",i.TRANSITION_DURATION=150,i.prototype.show=function(){var e=this.element,i=e.closest("ul:not(.dropdown-menu)"),o=e.data("target");if(o||(o=e.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var n=i.find(".active:last a"),s=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:n[0]});if(n.trigger(s),e.trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){var r=t(o);this.activate(e.closest("li"),i),this.activate(r,r.parent(),function(){n.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:n[0]})})}}},i.prototype.activate=function(e,o,n){function s(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),r?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}var a=o.find("> .active"),r=n&&t.support.transition&&(a.length&&a.hasClass("fade")||!!o.find("> .fade").length);a.length&&r?a.one("bsTransitionEnd",s).emulateTransitionEnd(i.TRANSITION_DURATION):s(),a.removeClass("in")};var o=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=i,t.fn.tab.noConflict=function(){return t.fn.tab=o,this};var n=function(i){i.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',n).on("click.bs.tab.data-api",'[data-toggle="pill"]',n)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.affix"),s="object"==typeof e&&e;n||o.data("bs.affix",n=new i(this,s)),"string"==typeof e&&n[e]()})}var i=function(e,o){this.options=t.extend({},i.DEFAULTS,o),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};i.VERSION="3.3.5",i.RESET="affix affix-top affix-bottom",i.DEFAULTS={offset:0,target:window},i.prototype.getState=function(t,e,i,o){var n=this.$target.scrollTop(),s=this.$element.offset(),a=this.$target.height();if(null!=i&&"top"==this.affixed)return i>n?"top":!1;if("bottom"==this.affixed)return null!=i?n+this.unpin<=s.top?!1:"bottom":t-o>=n+a?!1:"bottom";var r=null==this.affixed,l=r?n:s.top,h=r?a:e;return null!=i&&i>=n?"top":null!=o&&l+h>=t-o?"bottom":!1},i.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(i.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},i.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},i.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),o=this.options.offset,n=o.top,s=o.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=typeof o&&(s=n=o),"function"==typeof n&&(n=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var r=this.getState(a,e,n,s);if(this.affixed!=r){null!=this.unpin&&this.$element.css("top","");var l="affix"+(r?"-"+r:""),h=t.Event(l+".bs.affix");if(this.$element.trigger(h),h.isDefaultPrevented())return;this.affixed=r,this.unpin="bottom"==r?this.getPinnedOffset():null,this.$element.removeClass(i.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==r&&this.$element.offset({top:a-e-s})}};var o=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=i,t.fn.affix.noConflict=function(){return t.fn.affix=o,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var i=t(this),o=i.data();o.offset=o.offset||{},null!=o.offsetBottom&&(o.offset.bottom=o.offsetBottom),null!=o.offsetTop&&(o.offset.top=o.offsetTop),e.call(i,o)})})}(jQuery);
!function(){!function(e){var n=this||(0,eval)("this"),t=n.document,a=n.navigator,r=n.jQuery,o=n.JSON;!function(e){"function"==typeof define&&define.amd?define(["exports","require"],e):e("function"==typeof require&&"object"==typeof exports&&"object"==typeof module?module.exports||exports:n.ko={})}(function(i,u){function c(e,n){return null===e||typeof e in p?e===n:!1}function s(n,t){var a;return function(){a||(a=setTimeout(function(){a=e,n()},t))}}function f(e,n){var t;return function(){clearTimeout(t),t=setTimeout(e,n)}}function l(e,n,t,a){d.d[e]={init:function(e,r,o,i,u){var c,s;return d.w(function(){var o=d.a.c(r()),i=!t!=!o,f=!s;(f||n||i!==c)&&(f&&d.Z.oa()&&(s=d.a.la(d.e.childNodes(e),!0)),i?(f||d.e.T(e,d.a.la(s)),d.Ja(a?a(u,o):u,e)):d.e.ma(e),c=i)},null,{q:e}),{controlsDescendantBindings:!0}}},d.h.ka[e]=!1,d.e.R[e]=!0}var d="undefined"!=typeof i?i:{};d.b=function(e,n){for(var t=e.split("."),a=d,r=0;r<t.length-1;r++)a=a[t[r]];a[t[t.length-1]]=n},d.D=function(e,n,t){e[n]=t},d.version="3.3.0",d.b("version",d.version),d.a=function(){function i(e,n){for(var t in e)e.hasOwnProperty(t)&&n(t,e[t])}function u(e,n){if(n)for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t]);return e}function c(e,n){return e.__proto__=n,e}function s(e,n,t,a){var r=e[n].match(g)||[];d.a.o(t.match(g),function(e){d.a.ga(r,e,a)}),e[n]=r.join(" ")}var f={__proto__:[]}instanceof Array,l={},p={};l[a&&/Firefox\/2/i.test(a.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"],l.MouseEvents="click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" "),i(l,function(e,n){if(n.length)for(var t=0,a=n.length;a>t;t++)p[n[t]]=e});var h={propertychange:!0},b=t&&function(){for(var n=3,a=t.createElement("div"),r=a.getElementsByTagName("i");a.innerHTML="<!--[if gt IE "+ ++n+"]><i></i><![endif]-->",r[0];);return n>4?n:e}(),g=/\S+/g;return{Bb:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],o:function(e,n){for(var t=0,a=e.length;a>t;t++)n(e[t],t)},m:function(e,n){if("function"==typeof Array.prototype.indexOf)return Array.prototype.indexOf.call(e,n);for(var t=0,a=e.length;a>t;t++)if(e[t]===n)return t;return-1},vb:function(e,n,t){for(var a=0,r=e.length;r>a;a++)if(n.call(t,e[a],a))return e[a];return null},ya:function(e,n){var t=d.a.m(e,n);t>0?e.splice(t,1):0===t&&e.shift()},wb:function(e){e=e||[];for(var n=[],t=0,a=e.length;a>t;t++)0>d.a.m(n,e[t])&&n.push(e[t]);return n},Ka:function(e,n){e=e||[];for(var t=[],a=0,r=e.length;r>a;a++)t.push(n(e[a],a));return t},xa:function(e,n){e=e||[];for(var t=[],a=0,r=e.length;r>a;a++)n(e[a],a)&&t.push(e[a]);return t},ia:function(e,n){if(n instanceof Array)e.push.apply(e,n);else for(var t=0,a=n.length;a>t;t++)e.push(n[t]);return e},ga:function(e,n,t){var a=d.a.m(d.a.cb(e),n);0>a?t&&e.push(n):t||e.splice(a,1)},za:f,extend:u,Fa:c,Ga:f?c:u,A:i,pa:function(e,n){if(!e)return e;var t,a={};for(t in e)e.hasOwnProperty(t)&&(a[t]=n(e[t],t,e));return a},Ra:function(e){for(;e.firstChild;)d.removeNode(e.firstChild)},Jb:function(e){e=d.a.O(e);for(var n=(e[0]&&e[0].ownerDocument||t).createElement("div"),a=0,r=e.length;r>a;a++)n.appendChild(d.S(e[a]));return n},la:function(e,n){for(var t=0,a=e.length,r=[];a>t;t++){var o=e[t].cloneNode(!0);r.push(n?d.S(o):o)}return r},T:function(e,n){if(d.a.Ra(e),n)for(var t=0,a=n.length;a>t;t++)e.appendChild(n[t])},Qb:function(e,n){var t=e.nodeType?[e]:e;if(0<t.length){for(var a=t[0],r=a.parentNode,o=0,i=n.length;i>o;o++)r.insertBefore(n[o],a);for(o=0,i=t.length;i>o;o++)d.removeNode(t[o])}},na:function(e,n){if(e.length){for(n=8===n.nodeType&&n.parentNode||n;e.length&&e[0].parentNode!==n;)e.splice(0,1);if(1<e.length){var t=e[0],a=e[e.length-1];for(e.length=0;t!==a;)if(e.push(t),t=t.nextSibling,!t)return;e.push(a)}}return e},Sb:function(e,n){7>b?e.setAttribute("selected",n):e.selected=n},ib:function(n){return null===n||n===e?"":n.trim?n.trim():n.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},Dc:function(e,n){return e=e||"",n.length>e.length?!1:e.substring(0,n.length)===n},jc:function(e,n){if(e===n)return!0;if(11===e.nodeType)return!1;if(n.contains)return n.contains(3===e.nodeType?e.parentNode:e);if(n.compareDocumentPosition)return 16==(16&n.compareDocumentPosition(e));for(;e&&e!=n;)e=e.parentNode;return!!e},Qa:function(e){return d.a.jc(e,e.ownerDocument.documentElement)},tb:function(e){return!!d.a.vb(e,d.a.Qa)},v:function(e){return e&&e.tagName&&e.tagName.toLowerCase()},n:function(e,n,t){var a=b&&h[n];if(!a&&r)r(e).bind(n,t);else if(a||"function"!=typeof e.addEventListener){if("undefined"==typeof e.attachEvent)throw Error("Browser doesn't support addEventListener or attachEvent");var o=function(n){t.call(e,n)},i="on"+n;e.attachEvent(i,o),d.a.C.fa(e,function(){e.detachEvent(i,o)})}else e.addEventListener(n,t,!1)},qa:function(e,a){if(!e||!e.nodeType)throw Error("element must be a DOM node when calling triggerEvent");var o;if("input"===d.a.v(e)&&e.type&&"click"==a.toLowerCase()?(o=e.type,o="checkbox"==o||"radio"==o):o=!1,r&&!o)r(e).trigger(a);else if("function"==typeof t.createEvent){if("function"!=typeof e.dispatchEvent)throw Error("The supplied element doesn't support dispatchEvent");o=t.createEvent(p[a]||"HTMLEvents"),o.initEvent(a,!0,!0,n,0,0,0,0,0,!1,!1,!1,!1,0,e),e.dispatchEvent(o)}else if(o&&e.click)e.click();else{if("undefined"==typeof e.fireEvent)throw Error("Browser doesn't support triggering events");e.fireEvent("on"+a)}},c:function(e){return d.F(e)?e():e},cb:function(e){return d.F(e)?e.B():e},Ia:function(e,n,t){var a;n&&("object"==typeof e.classList?(a=e.classList[t?"add":"remove"],d.a.o(n.match(g),function(n){a.call(e.classList,n)})):"string"==typeof e.className.baseVal?s(e.className,"baseVal",n,t):s(e,"className",n,t))},Ha:function(n,t){var a=d.a.c(t);(null===a||a===e)&&(a="");var r=d.e.firstChild(n);!r||3!=r.nodeType||d.e.nextSibling(r)?d.e.T(n,[n.ownerDocument.createTextNode(a)]):r.data=a,d.a.mc(n)},Rb:function(e,n){if(e.name=n,7>=b)try{e.mergeAttributes(t.createElement("<input name='"+e.name+"'/>"),!1)}catch(a){}},mc:function(e){b>=9&&(e=1==e.nodeType?e:e.parentNode,e.style&&(e.style.zoom=e.style.zoom))},kc:function(e){if(b){var n=e.style.width;e.style.width=0,e.style.width=n}},Bc:function(e,n){e=d.a.c(e),n=d.a.c(n);for(var t=[],a=e;n>=a;a++)t.push(a);return t},O:function(e){for(var n=[],t=0,a=e.length;a>t;t++)n.push(e[t]);return n},Hc:6===b,Ic:7===b,M:b,Db:function(e,n){for(var t=d.a.O(e.getElementsByTagName("input")).concat(d.a.O(e.getElementsByTagName("textarea"))),a="string"==typeof n?function(e){return e.name===n}:function(e){return n.test(e.name)},r=[],o=t.length-1;o>=0;o--)a(t[o])&&r.push(t[o]);return r},yc:function(e){return"string"==typeof e&&(e=d.a.ib(e))?o&&o.parse?o.parse(e):new Function("return "+e)():null},jb:function(e,n,t){if(!o||!o.stringify)throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return o.stringify(d.a.c(e),n,t)},zc:function(e,n,a){a=a||{};var r=a.params||{},o=a.includeFields||this.Bb,u=e;if("object"==typeof e&&"form"===d.a.v(e))for(var u=e.action,c=o.length-1;c>=0;c--)for(var s=d.a.Db(e,o[c]),f=s.length-1;f>=0;f--)r[s[f].name]=s[f].value;n=d.a.c(n);var l=t.createElement("form");l.style.display="none",l.action=u,l.method="post";for(var p in n)e=t.createElement("input"),e.type="hidden",e.name=p,e.value=d.a.jb(d.a.c(n[p])),l.appendChild(e);i(r,function(e,n){var a=t.createElement("input");a.type="hidden",a.name=e,a.value=n,l.appendChild(a)}),t.body.appendChild(l),a.submitter?a.submitter(l):l.submit(),setTimeout(function(){l.parentNode.removeChild(l)},0)}}}(),d.b("utils",d.a),d.b("utils.arrayForEach",d.a.o),d.b("utils.arrayFirst",d.a.vb),d.b("utils.arrayFilter",d.a.xa),d.b("utils.arrayGetDistinctValues",d.a.wb),d.b("utils.arrayIndexOf",d.a.m),d.b("utils.arrayMap",d.a.Ka),d.b("utils.arrayPushAll",d.a.ia),d.b("utils.arrayRemoveItem",d.a.ya),d.b("utils.extend",d.a.extend),d.b("utils.fieldsIncludedWithJsonPost",d.a.Bb),d.b("utils.getFormFields",d.a.Db),d.b("utils.peekObservable",d.a.cb),d.b("utils.postJson",d.a.zc),d.b("utils.parseJson",d.a.yc),d.b("utils.registerEventHandler",d.a.n),d.b("utils.stringifyJson",d.a.jb),d.b("utils.range",d.a.Bc),d.b("utils.toggleDomNodeCssClass",d.a.Ia),d.b("utils.triggerEvent",d.a.qa),d.b("utils.unwrapObservable",d.a.c),d.b("utils.objectForEach",d.a.A),d.b("utils.addOrRemoveItem",d.a.ga),d.b("utils.setTextContent",d.a.Ha),d.b("unwrap",d.a.c),Function.prototype.bind||(Function.prototype.bind=function(e){var n=this;if(1===arguments.length)return function(){return n.apply(e,arguments)};var t=Array.prototype.slice.call(arguments,1);return function(){var a=t.slice(0);return a.push.apply(a,arguments),n.apply(e,a)}}),d.a.f=new function(){function n(n,o){var i=n[a];if(!i||"null"===i||!r[i]){if(!o)return e;i=n[a]="ko"+t++,r[i]={}}return r[i]}var t=0,a="__ko__"+(new Date).getTime(),r={};return{get:function(t,a){var r=n(t,!1);return r===e?e:r[a]},set:function(t,a,r){(r!==e||n(t,!1)!==e)&&(n(t,!0)[a]=r)},clear:function(e){var n=e[a];return n?(delete r[n],e[a]=null,!0):!1},I:function(){return t++ +a}}},d.b("utils.domData",d.a.f),d.b("utils.domData.clear",d.a.f.clear),d.a.C=new function(){function n(n,t){var r=d.a.f.get(n,a);return r===e&&t&&(r=[],d.a.f.set(n,a,r)),r}function t(e){var a=n(e,!1);if(a)for(var a=a.slice(0),r=0;r<a.length;r++)a[r](e);if(d.a.f.clear(e),d.a.C.cleanExternalData(e),i[e.nodeType])for(a=e.firstChild;e=a;)a=e.nextSibling,8===e.nodeType&&t(e)}var a=d.a.f.I(),o={1:!0,8:!0,9:!0},i={1:!0,9:!0};return{fa:function(e,t){if("function"!=typeof t)throw Error("Callback must be a function");n(e,!0).push(t)},Pb:function(t,r){var o=n(t,!1);o&&(d.a.ya(o,r),0==o.length&&d.a.f.set(t,a,e))},S:function(e){if(o[e.nodeType]&&(t(e),i[e.nodeType])){var n=[];d.a.ia(n,e.getElementsByTagName("*"));for(var a=0,r=n.length;r>a;a++)t(n[a])}return e},removeNode:function(e){d.S(e),e.parentNode&&e.parentNode.removeChild(e)},cleanExternalData:function(e){r&&"function"==typeof r.cleanData&&r.cleanData([e])}}},d.S=d.a.C.S,d.removeNode=d.a.C.removeNode,d.b("cleanNode",d.S),d.b("removeNode",d.removeNode),d.b("utils.domNodeDisposal",d.a.C),d.b("utils.domNodeDisposal.addDisposeCallback",d.a.C.fa),d.b("utils.domNodeDisposal.removeDisposeCallback",d.a.C.Pb),function(){d.a.ca=function(e,a){var o;if(r){if(r.parseHTML)o=r.parseHTML(e,a)||[];else if((o=r.clean([e],a))&&o[0]){for(var i=o[0];i.parentNode&&11!==i.parentNode.nodeType;)i=i.parentNode;i.parentNode&&i.parentNode.removeChild(i)}}else{(i=a)||(i=t),o=i.parentWindow||i.defaultView||n;var u=d.a.ib(e).toLowerCase(),i=i.createElement("div"),u=u.match(/^<(thead|tbody|tfoot)/)&&[1,"<table>","</table>"]||!u.indexOf("<tr")&&[2,"<table><tbody>","</tbody></table>"]||(!u.indexOf("<td")||!u.indexOf("<th"))&&[3,"<table><tbody><tr>","</tr></tbody></table>"]||[0,"",""],c="ignored<div>"+u[1]+e+u[2]+"</div>";for("function"==typeof o.innerShiv?i.appendChild(o.innerShiv(c)):i.innerHTML=c;u[0]--;)i=i.lastChild;o=d.a.O(i.lastChild.childNodes)}return o},d.a.gb=function(n,t){if(d.a.Ra(n),t=d.a.c(t),null!==t&&t!==e)if("string"!=typeof t&&(t=t.toString()),r)r(n).html(t);else for(var a=d.a.ca(t,n.ownerDocument),o=0;o<a.length;o++)n.appendChild(a[o])}}(),d.b("utils.parseHtmlFragment",d.a.ca),d.b("utils.setHtml",d.a.gb),d.H=function(){function n(e,t){if(e)if(8==e.nodeType){var a=d.H.Lb(e.nodeValue);null!=a&&t.push({ic:e,wc:a})}else if(1==e.nodeType)for(var a=0,r=e.childNodes,o=r.length;o>a;a++)n(r[a],t)}var t={};return{$a:function(e){if("function"!=typeof e)throw Error("You can only pass a function to ko.memoization.memoize()");var n=(4294967296*(1+Math.random())|0).toString(16).substring(1)+(4294967296*(1+Math.random())|0).toString(16).substring(1);return t[n]=e,"<!--[ko_memo:"+n+"]-->"},Wb:function(n,a){var r=t[n];if(r===e)throw Error("Couldn't find any memo with ID "+n+". Perhaps it's already been unmemoized.");try{return r.apply(null,a||[]),!0}finally{delete t[n]}},Xb:function(e,t){var a=[];n(e,a);for(var r=0,o=a.length;o>r;r++){var i=a[r].ic,u=[i];t&&d.a.ia(u,t),d.H.Wb(a[r].wc,u),i.nodeValue="",i.parentNode&&i.parentNode.removeChild(i)}},Lb:function(e){return(e=e.match(/^\[ko_memo\:(.*?)\]$/))?e[1]:null}}}(),d.b("memoization",d.H),d.b("memoization.memoize",d.H.$a),d.b("memoization.unmemoize",d.H.Wb),d.b("memoization.parseMemoText",d.H.Lb),d.b("memoization.unmemoizeDomNodeAndDescendants",d.H.Xb),d.Sa={throttle:function(e,n){e.throttleEvaluation=n;var t=null;return d.j({read:e,write:function(a){clearTimeout(t),t=setTimeout(function(){e(a)},n)}})},rateLimit:function(e,n){var t,a,r;"number"==typeof n?t=n:(t=n.timeout,a=n.method),r="notifyWhenChangesStop"==a?f:s,e.Za(function(e){return r(e,t)})},notify:function(e,n){e.equalityComparer="always"==n?null:c}};var p={undefined:1,"boolean":1,number:1,string:1};d.b("extenders",d.Sa),d.Ub=function(e,n,t){this.da=e,this.La=n,this.hc=t,this.Gb=!1,d.D(this,"dispose",this.p)},d.Ub.prototype.p=function(){this.Gb=!0,this.hc()},d.Q=function(){d.a.Ga(this,d.Q.fn),this.G={},this.rb=1};var h={U:function(e,n,t){var a=this;t=t||"change";var r=new d.Ub(a,n?e.bind(n):e,function(){d.a.ya(a.G[t],r),a.ua&&a.ua(t)});return a.ja&&a.ja(t),a.G[t]||(a.G[t]=[]),a.G[t].push(r),r},notifySubscribers:function(e,n){if(n=n||"change","change"===n&&this.Yb(),this.Ba(n))try{d.k.xb();for(var t,a=this.G[n].slice(0),r=0;t=a[r];++r)t.Gb||t.La(e)}finally{d.k.end()}},Aa:function(){return this.rb},pc:function(e){return this.Aa()!==e},Yb:function(){++this.rb},Za:function(e){var n,t,a,r=this,o=d.F(r);r.ta||(r.ta=r.notifySubscribers,r.notifySubscribers=function(e,n){n&&"change"!==n?"beforeChange"===n?r.pb(e):r.ta(e,n):r.qb(e)});var i=e(function(){o&&a===r&&(a=r()),n=!1,r.Wa(t,a)&&r.ta(t=a)});r.qb=function(e){n=!0,a=e,i()},r.pb=function(e){n||(t=e,r.ta(e,"beforeChange"))}},Ba:function(e){return this.G[e]&&this.G[e].length},nc:function(e){if(e)return this.G[e]&&this.G[e].length||0;var n=0;return d.a.A(this.G,function(e,t){n+=t.length}),n},Wa:function(e,n){return!this.equalityComparer||!this.equalityComparer(e,n)},extend:function(e){var n=this;return e&&d.a.A(e,function(e,t){var a=d.Sa[e];"function"==typeof a&&(n=a(n,t)||n)}),n}};d.D(h,"subscribe",h.U),d.D(h,"extend",h.extend),d.D(h,"getSubscriptionsCount",h.nc),d.a.za&&d.a.Fa(h,Function.prototype),d.Q.fn=h,d.Hb=function(e){return null!=e&&"function"==typeof e.U&&"function"==typeof e.notifySubscribers},d.b("subscribable",d.Q),d.b("isSubscribable",d.Hb),d.Z=d.k=function(){function e(e){a.push(t),t=e}function n(){t=a.pop()}var t,a=[],r=0;return{xb:e,end:n,Ob:function(e){if(t){if(!d.Hb(e))throw Error("Only subscribable things can act as dependencies");t.La(e,e.ac||(e.ac=++r))}},u:function(t,a,r){try{return e(),t.apply(a,r||[])}finally{n()}},oa:function(){return t?t.w.oa():void 0},Ca:function(){return t?t.Ca:void 0}}}(),d.b("computedContext",d.Z),d.b("computedContext.getDependenciesCount",d.Z.oa),d.b("computedContext.isInitial",d.Z.Ca),d.b("computedContext.isSleeping",d.Z.Jc),d.b("ignoreDependencies",d.Gc=d.k.u),d.r=function(e){function n(){return 0<arguments.length?(n.Wa(t,arguments[0])&&(n.X(),t=arguments[0],n.W()),this):(d.k.Ob(n),t)}var t=e;return d.Q.call(n),d.a.Ga(n,d.r.fn),n.B=function(){return t},n.W=function(){n.notifySubscribers(t)},n.X=function(){n.notifySubscribers(t,"beforeChange")},d.D(n,"peek",n.B),d.D(n,"valueHasMutated",n.W),d.D(n,"valueWillMutate",n.X),n},d.r.fn={equalityComparer:c};var b=d.r.Ac="__ko_proto__";d.r.fn[b]=d.r,d.a.za&&d.a.Fa(d.r.fn,d.Q.fn),d.Ta=function(n,t){return null===n||n===e||n[b]===e?!1:n[b]===t?!0:d.Ta(n[b],t)},d.F=function(e){return d.Ta(e,d.r)},d.Da=function(e){return"function"==typeof e&&e[b]===d.r||"function"==typeof e&&e[b]===d.j&&e.qc?!0:!1},d.b("observable",d.r),d.b("isObservable",d.F),d.b("isWriteableObservable",d.Da),d.b("isWritableObservable",d.Da),d.ba=function(e){if(e=e||[],"object"!=typeof e||!("length"in e))throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");return e=d.r(e),d.a.Ga(e,d.ba.fn),e.extend({trackArrayChanges:!0})},d.ba.fn={remove:function(e){for(var n=this.B(),t=[],a="function"!=typeof e||d.F(e)?function(n){return n===e}:e,r=0;r<n.length;r++){var o=n[r];a(o)&&(0===t.length&&this.X(),t.push(o),n.splice(r,1),r--)}return t.length&&this.W(),t},removeAll:function(n){if(n===e){var t=this.B(),a=t.slice(0);return this.X(),t.splice(0,t.length),this.W(),a}return n?this.remove(function(e){return 0<=d.a.m(n,e)}):[]},destroy:function(e){var n=this.B(),t="function"!=typeof e||d.F(e)?function(n){return n===e}:e;this.X();for(var a=n.length-1;a>=0;a--)t(n[a])&&(n[a]._destroy=!0);this.W()},destroyAll:function(n){return n===e?this.destroy(function(){return!0}):n?this.destroy(function(e){return 0<=d.a.m(n,e)}):[]},indexOf:function(e){var n=this();return d.a.m(n,e)},replace:function(e,n){var t=this.indexOf(e);t>=0&&(this.X(),this.B()[t]=n,this.W())}},d.a.o("pop push reverse shift sort splice unshift".split(" "),function(e){d.ba.fn[e]=function(){var n=this.B();return this.X(),this.yb(n,e,arguments),n=n[e].apply(n,arguments),this.W(),n}}),d.a.o(["slice"],function(e){d.ba.fn[e]=function(){var n=this();return n[e].apply(n,arguments)}}),d.a.za&&d.a.Fa(d.ba.fn,d.r.fn),d.b("observableArray",d.ba),d.Sa.trackArrayChanges=function(e){function n(){if(!a){a=!0;var n=e.notifySubscribers;e.notifySubscribers=function(e,t){return t&&"change"!==t||++o,n.apply(this,arguments)};var i=[].concat(e.B()||[]);r=null,t=e.U(function(n){if(n=[].concat(n||[]),e.Ba("arrayChange")){var t;(!r||o>1)&&(r=d.a.Ma(i,n,{sparse:!0})),t=r}i=n,r=null,o=0,t&&t.length&&e.notifySubscribers(t,"arrayChange")})}}if(!e.yb){var t,a=!1,r=null,o=0,i=e.ja,u=e.ua;e.ja=function(t){i&&i.call(e,t),"arrayChange"===t&&n()},e.ua=function(n){u&&u.call(e,n),"arrayChange"!==n||e.Ba("arrayChange")||(t.p(),a=!1)},e.yb=function(e,n,t){function i(e,n,t){return u[u.length]={status:e,value:n,index:t}}if(a&&!o){var u=[],c=e.length,s=t.length,f=0;switch(n){case"push":f=c;case"unshift":for(n=0;s>n;n++)i("added",t[n],f+n);break;case"pop":f=c-1;case"shift":c&&i("deleted",e[f],f);break;case"splice":n=Math.min(Math.max(0,0>t[0]?c+t[0]:t[0]),c);for(var c=1===s?c:Math.min(n+(t[1]||0),c),s=n+s-2,f=Math.max(c,s),l=[],p=[],h=2;f>n;++n,++h)c>n&&p.push(i("deleted",e[n],n)),s>n&&l.push(i("added",t[h],n));d.a.Cb(p,l);break;default:return}r=u}}}},d.w=d.j=function(n,t,a){function r(e,n,t){if(w&&n===s)throw Error("A 'pure' computed must not be called recursively");S[e]=t,t.sa=_++,t.ea=n.Aa()}function o(){var e,n;for(e in S)if(S.hasOwnProperty(e)&&(n=S[e],n.da.pc(n.ea)))return!0}function i(){!x&&S&&d.a.A(S,function(e,n){n.p&&n.p()}),S=null,_=0,m=!0,x=b=!1}function u(){var e=s.throttleEvaluation;e&&e>=0?(clearTimeout(D),D=setTimeout(function(){c(!0)},e)):s.nb?s.nb():c(!0)}function c(n){if(!g&&!m){if(C&&C()){if(!v)return void N()}else v=!1;g=!0;try{var a=S,o=_,i=w?e:!_;d.k.xb({La:function(e,n){m||(o&&a[n]?(r(n,e,a[n]),delete a[n],--o):S[n]||r(n,e,x?{da:e}:e.U(u)))},w:s,Ca:i}),S={},_=0;try{var c=t?y.call(t):y()}finally{d.k.end(),o&&!x&&d.a.A(a,function(e,n){n.p&&n.p()}),b=!1}s.Wa(h,c)&&(x||p(h,"beforeChange"),h=c,x?s.Yb():n&&p(h)),i&&p(h,"awake")}finally{g=!1}_||N()}}function s(){if(0<arguments.length){if("function"!=typeof k)throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return k.apply(t,arguments),this}return d.k.Ob(s),(b||x&&o())&&c(),h}function f(){return(b&&!_||x&&o())&&c(),h}function l(){return b||_>0}function p(e,n){s.notifySubscribers(e,n)}var h,b=!0,g=!1,v=!1,m=!1,y=n,w=!1,x=!1;if(y&&"object"==typeof y?(a=y,y=a.read):(a=a||{},y||(y=a.read)),"function"!=typeof y)throw Error("Pass a function that returns the value of the ko.computed");var k=a.write,E=a.disposeWhenNodeIsRemoved||a.q||null,T=a.disposeWhen||a.Pa,C=T,N=i,S={},_=0,D=null;t||(t=a.owner),d.Q.call(s),d.a.Ga(s,d.j.fn),s.B=f,s.oa=function(){return _},s.qc="function"==typeof k,s.p=function(){N()},s.$=l;var B=s.Za;return s.Za=function(e){B.call(s,e),s.nb=function(){s.pb(h),b=!0,s.qb(s)}},a.pure?(x=w=!0,s.ja=function(e){if(!m&&x&&"change"==e){if(x=!1,b||o())S=null,_=0,b=!0,c();else{var n=[];d.a.A(S,function(e,t){n[t.sa]=e}),d.a.o(n,function(e,n){var t=S[e],a=t.da.U(u);a.sa=n,a.ea=t.ea,S[e]=a})}m||p(h,"awake")}},s.ua=function(n){m||"change"!=n||s.Ba("change")||(d.a.A(S,function(e,n){n.p&&(S[e]={da:n.da,sa:n.sa,ea:n.ea},n.p())}),x=!0,p(e,"asleep"))},s.bc=s.Aa,s.Aa=function(){return x&&(b||o())&&c(),s.bc()}):a.deferEvaluation&&(s.ja=function(e){"change"!=e&&"beforeChange"!=e||f()}),d.D(s,"peek",s.B),d.D(s,"dispose",s.p),d.D(s,"isActive",s.$),d.D(s,"getDependenciesCount",s.oa),E&&(v=!0,E.nodeType&&(C=function(){return!d.a.Qa(E)||T&&T()})),x||a.deferEvaluation||c(),E&&l()&&E.nodeType&&(N=function(){d.a.C.Pb(E,N),i()},d.a.C.fa(E,N)),s},d.sc=function(e){return d.Ta(e,d.j)},h=d.r.Ac,d.j[h]=d.r,d.j.fn={equalityComparer:c},d.j.fn[h]=d.j,d.a.za&&d.a.Fa(d.j.fn,d.Q.fn),d.b("dependentObservable",d.j),d.b("computed",d.j),d.b("isComputed",d.sc),d.Nb=function(e,n){return"function"==typeof e?d.w(e,n,{pure:!0}):(e=d.a.extend({},e),e.pure=!0,d.w(e,n))},d.b("pureComputed",d.Nb),function(){function n(r,o,i){if(i=i||new a,r=o(r),"object"!=typeof r||null===r||r===e||r instanceof Date||r instanceof String||r instanceof Number||r instanceof Boolean)return r;var u=r instanceof Array?[]:{};return i.save(r,u),t(r,function(t){var a=o(r[t]);switch(typeof a){case"boolean":case"number":case"string":case"function":u[t]=a;break;case"object":case"undefined":var c=i.get(a);u[t]=c!==e?c:n(a,o,i)}}),u}function t(e,n){if(e instanceof Array){for(var t=0;t<e.length;t++)n(t);"function"==typeof e.toJSON&&n("toJSON")}else for(t in e)n(t)}function a(){this.keys=[],this.mb=[]}d.Vb=function(e){if(0==arguments.length)throw Error("When calling ko.toJS, pass the object you want to convert.");return n(e,function(e){for(var n=0;d.F(e)&&10>n;n++)e=e();return e})},d.toJSON=function(e,n,t){return e=d.Vb(e),d.a.jb(e,n,t)},a.prototype={save:function(e,n){var t=d.a.m(this.keys,e);t>=0?this.mb[t]=n:(this.keys.push(e),this.mb.push(n))},get:function(n){return n=d.a.m(this.keys,n),n>=0?this.mb[n]:e}}}(),d.b("toJS",d.Vb),d.b("toJSON",d.toJSON),function(){d.i={s:function(n){switch(d.a.v(n)){case"option":return!0===n.__ko__hasDomDataOptionValue__?d.a.f.get(n,d.d.options.ab):7>=d.a.M?n.getAttributeNode("value")&&n.getAttributeNode("value").specified?n.value:n.text:n.value;case"select":return 0<=n.selectedIndex?d.i.s(n.options[n.selectedIndex]):e;default:return n.value}},Y:function(n,t,a){switch(d.a.v(n)){case"option":switch(typeof t){case"string":d.a.f.set(n,d.d.options.ab,e),"__ko__hasDomDataOptionValue__"in n&&delete n.__ko__hasDomDataOptionValue__,n.value=t;break;default:d.a.f.set(n,d.d.options.ab,t),n.__ko__hasDomDataOptionValue__=!0,n.value="number"==typeof t?t:""}break;case"select":(""===t||null===t)&&(t=e);for(var r,o=-1,i=0,u=n.options.length;u>i;++i)if(r=d.i.s(n.options[i]),r==t||""==r&&t===e){o=i;break}(a||o>=0||t===e&&1<n.size)&&(n.selectedIndex=o);break;default:(null===t||t===e)&&(t=""),n.value=t}}}}(),d.b("selectExtensions",d.i),d.b("selectExtensions.readValue",d.i.s),d.b("selectExtensions.writeValue",d.i.Y),d.h=function(){function e(e){e=d.a.ib(e),123===e.charCodeAt(0)&&(e=e.slice(1,-1));var n,t=[],i=e.match(a),u=[],c=0;if(i){i.push(",");for(var s,f=0;s=i[f];++f){var l=s.charCodeAt(0);if(44===l){if(0>=c){t.push(n&&u.length?{key:n,value:u.join("")}:{unknown:n||u.join("")}),n=c=0,u=[];continue}}else if(58===l){if(!c&&!n&&1===u.length){n=u.pop();continue}}else 47===l&&f&&1<s.length?(l=i[f-1].match(r))&&!o[l[0]]&&(e=e.substr(e.indexOf(s)+1),i=e.match(a),i.push(","),f=-1,s="/"):40===l||123===l||91===l?++c:41===l||125===l||93===l?--c:n||u.length||34!==l&&39!==l||(s=s.slice(1,-1));u.push(s)}}return t}var n=["true","false","null","undefined"],t=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,a=RegExp("\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|/(?:[^/\\\\]|\\\\.)*/w*|[^\\s:,/][^,\"'{}()/:[\\]]*[^\\s,\"'{}()/:[\\]]|[^\\s]","g"),r=/[\])"'A-Za-z0-9_$]+$/,o={"in":1,"return":1,"typeof":1},i={};return{ka:[],V:i,bb:e,Ea:function(a,r){function o(e,a){var r;if(!f){var l=d.getBindingHandler(e);if(l&&l.preprocess&&!(a=l.preprocess(a,e,o)))return;(l=i[e])&&(r=a,0<=d.a.m(n,r)?r=!1:(l=r.match(t),r=null===l?!1:l[1]?"Object("+l[1]+")"+l[2]:r),l=r),l&&c.push("'"+e+"':function(_z){"+r+"=_z}")}s&&(a="function(){return "+a+" }"),u.push("'"+e+"':"+a)}r=r||{};var u=[],c=[],s=r.valueAccessors,f=r.bindingParams,l="string"==typeof a?e(a):a;return d.a.o(l,function(e){o(e.key||e.unknown,e.value)}),c.length&&o("_ko_property_writers","{"+c.join(",")+" }"),u.join(",")},vc:function(e,n){for(var t=0;t<e.length;t++)if(e[t].key==n)return!0;return!1},ra:function(e,n,t,a,r){e&&d.F(e)?!d.Da(e)||r&&e.B()===a||e(a):(e=n.get("_ko_property_writers"))&&e[t]&&e[t](a)}}}(),d.b("expressionRewriting",d.h),d.b("expressionRewriting.bindingRewriteValidators",d.h.ka),d.b("expressionRewriting.parseObjectLiteral",d.h.bb),d.b("expressionRewriting.preProcessBindings",d.h.Ea),d.b("expressionRewriting._twoWayBindings",d.h.V),d.b("jsonExpressionRewriting",d.h),d.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",d.h.Ea),function(){function e(e){return 8==e.nodeType&&i.test(o?e.text:e.nodeValue)}function n(e){return 8==e.nodeType&&u.test(o?e.text:e.nodeValue)}function a(t,a){for(var r=t,o=1,i=[];r=r.nextSibling;){if(n(r)&&(o--,0===o))return i;i.push(r),e(r)&&o++}if(!a)throw Error("Cannot find closing comment tag to match: "+t.nodeValue);return null}function r(e,n){var t=a(e,n);return t?0<t.length?t[t.length-1].nextSibling:e.nextSibling:null}var o=t&&"<!--test-->"===t.createComment("test").text,i=o?/^\x3c!--\s*ko(?:\s+([\s\S]+))?\s*--\x3e$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,u=o?/^\x3c!--\s*\/ko\s*--\x3e$/:/^\s*\/ko\s*$/,c={ul:!0,ol:!0};d.e={R:{},childNodes:function(n){return e(n)?a(n):n.childNodes},ma:function(n){if(e(n)){n=d.e.childNodes(n);for(var t=0,a=n.length;a>t;t++)d.removeNode(n[t])}else d.a.Ra(n)},T:function(n,t){if(e(n)){d.e.ma(n);for(var a=n.nextSibling,r=0,o=t.length;o>r;r++)a.parentNode.insertBefore(t[r],a)}else d.a.T(n,t)},Mb:function(n,t){e(n)?n.parentNode.insertBefore(t,n.nextSibling):n.firstChild?n.insertBefore(t,n.firstChild):n.appendChild(t)},Fb:function(n,t,a){a?e(n)?n.parentNode.insertBefore(t,a.nextSibling):a.nextSibling?n.insertBefore(t,a.nextSibling):n.appendChild(t):d.e.Mb(n,t)},firstChild:function(t){return e(t)?!t.nextSibling||n(t.nextSibling)?null:t.nextSibling:t.firstChild},nextSibling:function(t){return e(t)&&(t=r(t)),t.nextSibling&&n(t.nextSibling)?null:t.nextSibling},oc:e,Fc:function(e){return(e=(o?e.text:e.nodeValue).match(i))?e[1]:null},Kb:function(t){if(c[d.a.v(t)]){var a=t.firstChild;if(a)do if(1===a.nodeType){var o;o=a.firstChild;var i=null;if(o)do if(i)i.push(o);else if(e(o)){var u=r(o,!0);u?o=u:i=[o]}else n(o)&&(i=[o]);while(o=o.nextSibling);if(o=i)for(i=a.nextSibling,u=0;u<o.length;u++)i?t.insertBefore(o[u],i):t.appendChild(o[u])}while(a=a.nextSibling)}}}}(),d.b("virtualElements",d.e),d.b("virtualElements.allowedBindings",d.e.R),d.b("virtualElements.emptyNode",d.e.ma),d.b("virtualElements.insertAfter",d.e.Fb),d.b("virtualElements.prepend",d.e.Mb),d.b("virtualElements.setDomNodeChildren",d.e.T),function(){d.L=function(){this.ec={}},d.a.extend(d.L.prototype,{nodeHasBindings:function(e){switch(e.nodeType){case 1:return null!=e.getAttribute("data-bind")||d.g.getComponentNameForNode(e);case 8:return d.e.oc(e);default:return!1}},getBindings:function(e,n){var t=this.getBindingsString(e,n),t=t?this.parseBindingsString(t,n,e):null;return d.g.sb(t,e,n,!1)},getBindingAccessors:function(e,n){var t=this.getBindingsString(e,n),t=t?this.parseBindingsString(t,n,e,{valueAccessors:!0}):null;return d.g.sb(t,e,n,!0)},getBindingsString:function(e){switch(e.nodeType){case 1:return e.getAttribute("data-bind");case 8:return d.e.Fc(e);default:return null}},parseBindingsString:function(e,n,t,a){try{var r,o=this.ec,i=e+(a&&a.valueAccessors||"");if(!(r=o[i])){var u,c="with($context){with($data||{}){return{"+d.h.Ea(e,a)+"}}}";u=new Function("$context","$element",c),r=o[i]=u}return r(n,t)}catch(s){throw s.message="Unable to parse bindings.\nBindings value: "+e+"\nMessage: "+s.message,s}}}),d.L.instance=new d.L}(),d.b("bindingProvider",d.L),function(){function t(e){return function(){return e}}function a(e){return e()}function o(e){return d.a.pa(d.k.u(e),function(n,t){return function(){return e()[t]}})}function i(e,n,a){return"function"==typeof e?o(e.bind(null,n,a)):d.a.pa(e,t)}function u(e,n){return o(this.getBindings.bind(this,e,n))}function c(e,n,t){var a,r=d.e.firstChild(n),o=d.L.instance,i=o.preprocessNode;if(i){for(;a=r;)r=d.e.nextSibling(a),i.call(o,a);r=d.e.firstChild(n)}for(;a=r;)r=d.e.nextSibling(a),s(e,a,t)}function s(e,n,t){var a=!0,r=1===n.nodeType;r&&d.e.Kb(n),(r&&t||d.L.instance.nodeHasBindings(n))&&(a=l(n,null,e,t).shouldBindDescendants),a&&!h[d.a.v(n)]&&c(e,n,!r)}function f(e){var n=[],t={},a=[];return d.a.A(e,function r(o){if(!t[o]){var i=d.getBindingHandler(o);i&&(i.after&&(a.push(o),d.a.o(i.after,function(n){if(e[n]){if(-1!==d.a.m(a,n))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+a.join(", "));r(n)}}),a.length--),n.push({key:o,Eb:i})),t[o]=!0}}),n}function l(n,t,r,o){var i=d.a.f.get(n,b);if(!t){if(i)throw Error("You cannot apply bindings multiple times to the same element.");d.a.f.set(n,b,!0)}!i&&o&&d.Tb(n,r);var c;if(t&&"function"!=typeof t)c=t;else{var s=d.L.instance,l=s.getBindingAccessors||u,p=d.j(function(){return(c=t?t(r,n):l.call(s,n,r))&&r.K&&r.K(),c},null,{q:n});c&&p.$()||(p=null)}var h;if(c){var g=p?function(e){return function(){return a(p()[e])}}:function(e){return c[e]},v=function(){return d.a.pa(p?p():c,a)};v.get=function(e){return c[e]&&a(g(e))},v.has=function(e){return e in c},o=f(c),d.a.o(o,function(t){var a=t.Eb.init,o=t.Eb.update,i=t.key;if(8===n.nodeType&&!d.e.R[i])throw Error("The binding '"+i+"' cannot be used with virtual elements");try{"function"==typeof a&&d.k.u(function(){var t=a(n,g(i),v,r.$data,r);if(t&&t.controlsDescendantBindings){if(h!==e)throw Error("Multiple bindings ("+h+" and "+i+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");h=i}}),"function"==typeof o&&d.j(function(){o(n,g(i),v,r.$data,r)},null,{q:n})}catch(u){throw u.message='Unable to process binding "'+i+": "+c[i]+'"\nMessage: '+u.message,u}})}return{shouldBindDescendants:h===e}}function p(e){return e&&e instanceof d.N?e:new d.N(e)}d.d={};var h={script:!0,textarea:!0};d.getBindingHandler=function(e){return d.d[e]},d.N=function(n,t,a,r){var o,i=this,u="function"==typeof n&&!d.F(n),c=d.j(function(){var e=u?n():n,o=d.a.c(e);return t?(t.K&&t.K(),d.a.extend(i,t),c&&(i.K=c)):(i.$parents=[],i.$root=o,i.ko=d),i.$rawData=e,i.$data=o,a&&(i[a]=o),r&&r(i,t,o),i.$data},null,{Pa:function(){return o&&!d.a.tb(o)},q:!0});c.$()&&(i.K=c,c.equalityComparer=null,o=[],c.Zb=function(n){o.push(n),d.a.C.fa(n,function(n){d.a.ya(o,n),o.length||(c.p(),i.K=c=e)})})},d.N.prototype.createChildContext=function(e,n,t){return new d.N(e,this,n,function(e,n){e.$parentContext=n,e.$parent=n.$data,e.$parents=(n.$parents||[]).slice(0),e.$parents.unshift(e.$parent),t&&t(e)})},d.N.prototype.extend=function(e){return new d.N(this.K||this.$data,this,null,function(n,t){n.$rawData=t.$rawData,d.a.extend(n,"function"==typeof e?e():e)})};var b=d.a.f.I(),g=d.a.f.I();d.Tb=function(e,n){return 2!=arguments.length?d.a.f.get(e,g):(d.a.f.set(e,g,n),void(n.K&&n.K.Zb(e)))},d.va=function(e,n,t){return 1===e.nodeType&&d.e.Kb(e),l(e,n,p(t),!0)},d.cc=function(e,n,t){return t=p(t),d.va(e,i(n,t,e),t)},d.Ja=function(e,n){1!==n.nodeType&&8!==n.nodeType||c(p(e),n,!0)},d.ub=function(e,t){if(!r&&n.jQuery&&(r=n.jQuery),t&&1!==t.nodeType&&8!==t.nodeType)throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");t=t||n.document.body,s(p(e),t,!0)},d.Oa=function(n){
switch(n.nodeType){case 1:case 8:var t=d.Tb(n);if(t)return t;if(n.parentNode)return d.Oa(n.parentNode)}return e},d.gc=function(n){return(n=d.Oa(n))?n.$data:e},d.b("bindingHandlers",d.d),d.b("applyBindings",d.ub),d.b("applyBindingsToDescendants",d.Ja),d.b("applyBindingAccessorsToNode",d.va),d.b("applyBindingsToNode",d.cc),d.b("contextFor",d.Oa),d.b("dataFor",d.gc)}(),function(e){function n(n,a){var i,u=r.hasOwnProperty(n)?r[n]:e;u?u.U(a):(u=r[n]=new d.Q,u.U(a),t(n,function(e,t){var a=!(!t||!t.synchronous);o[n]={definition:e,tc:a},delete r[n],i||a?u.notifySubscribers(e):setTimeout(function(){u.notifySubscribers(e)},0)}),i=!0)}function t(e,n){a("getConfig",[e],function(t){t?a("loadComponent",[e,t],function(e){n(e,t)}):n(null,null)})}function a(n,t,r,o){o||(o=d.g.loaders.slice(0));var i=o.shift();if(i){var u=i[n];if(u){var c=!1;if(u.apply(i,t.concat(function(e){c?r(null):null!==e?r(e):a(n,t,r,o)}))!==e&&(c=!0,!i.suppressLoaderExceptions))throw Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else a(n,t,r,o)}else r(null)}var r={},o={};d.g={get:function(t,a){var r=o.hasOwnProperty(t)?o[t]:e;r?r.tc?d.k.u(function(){a(r.definition)}):setTimeout(function(){a(r.definition)},0):n(t,a)},zb:function(e){delete o[e]},ob:a},d.g.loaders=[],d.b("components",d.g),d.b("components.get",d.g.get),d.b("components.clearCachedDefinition",d.g.zb)}(),function(){function e(e,n,t,a){function r(){0===--u&&a(o)}var o={},u=2,c=t.template;t=t.viewModel,c?i(n,c,function(n){d.g.ob("loadTemplate",[e,n],function(e){o.template=e,r()})}):r(),t?i(n,t,function(n){d.g.ob("loadViewModel",[e,n],function(e){o[f]=e,r()})}):r()}function a(e,n,t){if("function"==typeof n)t(function(e){return new n(e)});else if("function"==typeof n[f])t(n[f]);else if("instance"in n){var r=n.instance;t(function(){return r})}else"viewModel"in n?a(e,n.viewModel,t):e("Unknown viewModel value: "+n)}function r(e){switch(d.a.v(e)){case"script":return d.a.ca(e.text);case"textarea":return d.a.ca(e.value);case"template":if(o(e.content))return d.a.la(e.content.childNodes)}return d.a.la(e.childNodes)}function o(e){return n.DocumentFragment?e instanceof DocumentFragment:e&&11===e.nodeType}function i(e,t,a){"string"==typeof t.require?u||n.require?(u||n.require)([t.require],a):e("Uses require, but no AMD loader is present"):a(t)}function c(e){return function(n){throw Error("Component '"+e+"': "+n)}}var s={};d.g.register=function(e,n){if(!n)throw Error("Invalid configuration for "+e);if(d.g.Xa(e))throw Error("Component "+e+" is already registered");s[e]=n},d.g.Xa=function(e){return e in s},d.g.Ec=function(e){delete s[e],d.g.zb(e)},d.g.Ab={getConfig:function(e,n){n(s.hasOwnProperty(e)?s[e]:null)},loadComponent:function(n,t,a){var r=c(n);i(r,t,function(t){e(n,r,t,a)})},loadTemplate:function(e,a,i){if(e=c(e),"string"==typeof a)i(d.a.ca(a));else if(a instanceof Array)i(a);else if(o(a))i(d.a.O(a.childNodes));else if(a.element)if(a=a.element,n.HTMLElement?a instanceof HTMLElement:a&&a.tagName&&1===a.nodeType)i(r(a));else if("string"==typeof a){var u=t.getElementById(a);u?i(r(u)):e("Cannot find element with ID "+a)}else e("Unknown element type: "+a);else e("Unknown template value: "+a)},loadViewModel:function(e,n,t){a(c(e),n,t)}};var f="createViewModel";d.b("components.register",d.g.register),d.b("components.isRegistered",d.g.Xa),d.b("components.unregister",d.g.Ec),d.b("components.defaultLoader",d.g.Ab),d.g.loaders.push(d.g.Ab),d.g.$b=s}(),function(){function e(e,t){var a=e.getAttribute("params");if(a){var a=n.parseBindingsString(a,t,e,{valueAccessors:!0,bindingParams:!0}),a=d.a.pa(a,function(n){return d.w(n,null,{q:e})}),r=d.a.pa(a,function(n){var t=n.B();return n.$()?d.w({read:function(){return d.a.c(n())},write:d.Da(t)&&function(e){n()(e)},q:e}):t});return r.hasOwnProperty("$raw")||(r.$raw=a),r}return{$raw:{}}}d.g.getComponentNameForNode=function(e){return e=d.a.v(e),d.g.Xa(e)&&e},d.g.sb=function(n,t,a,r){if(1===t.nodeType){var o=d.g.getComponentNameForNode(t);if(o){if(n=n||{},n.component)throw Error('Cannot use the "component" binding on a custom element matching a component');var i={name:o,params:e(t,a)};n.component=r?function(){return i}:i}}return n};var n=new d.L;9>d.a.M&&(d.g.register=function(e){return function(n){return t.createElement(n),e.apply(this,arguments)}}(d.g.register),t.createDocumentFragment=function(e){return function(){var n,t=e(),a=d.g.$b;for(n in a)a.hasOwnProperty(n)&&t.createElement(n);return t}}(t.createDocumentFragment))}(),function(e){function n(e,n,t){if(n=n.template,!n)throw Error("Component '"+e+"' has no template");e=d.a.la(n),d.e.T(t,e)}function t(e,n,t,a){var r=e.createViewModel;return r?r.call(e,a,{element:n,templateNodes:t}):a}var a=0;d.d.component={init:function(r,o,i,u,c){function s(){var e=f&&f.dispose;"function"==typeof e&&e.call(f),l=null}var f,l,p=d.a.O(d.e.childNodes(r));return d.a.C.fa(r,s),d.w(function(){var i,u,h=d.a.c(o());if("string"==typeof h?i=h:(i=d.a.c(h.name),u=d.a.c(h.params)),!i)throw Error("No component name specified");var b=l=++a;d.g.get(i,function(a){if(l===b){if(s(),!a)throw Error("Unknown component '"+i+"'");n(i,a,r);var o=t(a,r,p,u);a=c.createChildContext(o,e,function(e){e.$component=o,e.$componentTemplateNodes=p}),f=o,d.Ja(a,r)}})},null,{q:r}),{controlsDescendantBindings:!0}}},d.e.R.component=!0}();var g={"class":"className","for":"htmlFor"};d.d.attr={update:function(n,t){var a=d.a.c(t())||{};d.a.A(a,function(t,a){a=d.a.c(a);var r=!1===a||null===a||a===e;r&&n.removeAttribute(t),8>=d.a.M&&t in g?(t=g[t],r?n.removeAttribute(t):n[t]=a):r||n.setAttribute(t,a.toString()),"name"===t&&d.a.Rb(n,r?"":a.toString())})}},function(){d.d.checked={after:["value","attr"],init:function(n,t,a){function r(){var e=n.checked,r=l?i():e;if(!d.Z.Ca()&&(!c||e)){var o=d.k.u(t);s?f!==r?(e&&(d.a.ga(o,r,!0),d.a.ga(o,f,!1)),f=r):d.a.ga(o,r,e):d.h.ra(o,a,"checked",r,!0)}}function o(){var e=d.a.c(t());n.checked=s?0<=d.a.m(e,i()):u?e:i()===e}var i=d.Nb(function(){return a.has("checkedValue")?d.a.c(a.get("checkedValue")):a.has("value")?d.a.c(a.get("value")):n.value}),u="checkbox"==n.type,c="radio"==n.type;if(u||c){var s=u&&d.a.c(t())instanceof Array,f=s?i():e,l=c||s;c&&!n.name&&d.d.uniqueName.init(n,function(){return!0}),d.w(r,null,{q:n}),d.a.n(n,"click",r),d.w(o,null,{q:n})}}},d.h.V.checked=!0,d.d.checkedValue={update:function(e,n){e.value=d.a.c(n())}}}(),d.d.css={update:function(e,n){var t=d.a.c(n());null!==t&&"object"==typeof t?d.a.A(t,function(n,t){t=d.a.c(t),d.a.Ia(e,n,t)}):(t=String(t||""),d.a.Ia(e,e.__ko__cssValue,!1),e.__ko__cssValue=t,d.a.Ia(e,t,!0))}},d.d.enable={update:function(e,n){var t=d.a.c(n());t&&e.disabled?e.removeAttribute("disabled"):t||e.disabled||(e.disabled=!0)}},d.d.disable={update:function(e,n){d.d.enable.update(e,function(){return!d.a.c(n())})}},d.d.event={init:function(e,n,t,a,r){var o=n()||{};d.a.A(o,function(o){"string"==typeof o&&d.a.n(e,o,function(e){var i,u=n()[o];if(u){try{var c=d.a.O(arguments);a=r.$data,c.unshift(a),i=u.apply(a,c)}finally{!0!==i&&(e.preventDefault?e.preventDefault():e.returnValue=!1)}!1===t.get(o+"Bubble")&&(e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation())}})})}},d.d.foreach={Ib:function(e){return function(){var n=e(),t=d.a.cb(n);return t&&"number"!=typeof t.length?(d.a.c(n),{foreach:t.data,as:t.as,includeDestroyed:t.includeDestroyed,afterAdd:t.afterAdd,beforeRemove:t.beforeRemove,afterRender:t.afterRender,beforeMove:t.beforeMove,afterMove:t.afterMove,templateEngine:d.P.Va}):{foreach:n,templateEngine:d.P.Va}}},init:function(e,n){return d.d.template.init(e,d.d.foreach.Ib(n))},update:function(e,n,t,a,r){return d.d.template.update(e,d.d.foreach.Ib(n),t,a,r)}},d.h.ka.foreach=!1,d.e.R.foreach=!0,d.d.hasfocus={init:function(e,n,t){function a(a){e.__ko_hasfocusUpdating=!0;var r=e.ownerDocument;if("activeElement"in r){var o;try{o=r.activeElement}catch(i){o=r.body}a=o===e}r=n(),d.h.ra(r,t,"hasfocus",a,!0),e.__ko_hasfocusLastValue=a,e.__ko_hasfocusUpdating=!1}var r=a.bind(null,!0),o=a.bind(null,!1);d.a.n(e,"focus",r),d.a.n(e,"focusin",r),d.a.n(e,"blur",o),d.a.n(e,"focusout",o)},update:function(e,n){var t=!!d.a.c(n());e.__ko_hasfocusUpdating||e.__ko_hasfocusLastValue===t||(t?e.focus():e.blur(),d.k.u(d.a.qa,null,[e,t?"focusin":"focusout"]))}},d.h.V.hasfocus=!0,d.d.hasFocus=d.d.hasfocus,d.h.V.hasFocus=!0,d.d.html={init:function(){return{controlsDescendantBindings:!0}},update:function(e,n){d.a.gb(e,n())}},l("if"),l("ifnot",!1,!0),l("with",!0,!1,function(e,n){return e.createChildContext(n)});var v={};d.d.options={init:function(e){if("select"!==d.a.v(e))throw Error("options binding applies only to SELECT elements");for(;0<e.length;)e.remove(0);return{controlsDescendantBindings:!0}},update:function(n,t,a){function r(){return d.a.xa(n.options,function(e){return e.selected})}function o(e,n,t){var a=typeof n;return"function"==a?n(e):"string"==a?e[n]:t}function i(e,t){if(b&&f)d.i.Y(n,d.a.c(a.get("value")),!0);else if(h.length){var r=0<=d.a.m(h,d.i.s(t[0]));d.a.Sb(t[0],r),b&&!r&&d.k.u(d.a.qa,null,[n,"change"])}}var u=n.multiple,c=0!=n.length&&u?n.scrollTop:null,s=d.a.c(t()),f=a.get("valueAllowUnset")&&a.has("value"),l=a.get("optionsIncludeDestroyed");t={};var p,h=[];f||(u?h=d.a.Ka(r(),d.i.s):0<=n.selectedIndex&&h.push(d.i.s(n.options[n.selectedIndex]))),s&&("undefined"==typeof s.length&&(s=[s]),p=d.a.xa(s,function(n){return l||n===e||null===n||!d.a.c(n._destroy)}),a.has("optionsCaption")&&(s=d.a.c(a.get("optionsCaption")),null!==s&&s!==e&&p.unshift(v)));var b=!1;t.beforeRemove=function(e){n.removeChild(e)},s=i,a.has("optionsAfterRender")&&"function"==typeof a.get("optionsAfterRender")&&(s=function(n,t){i(0,t),d.k.u(a.get("optionsAfterRender"),null,[t[0],n!==v?n:e])}),d.a.fb(n,p,function(t,r,i){return i.length&&(h=!f&&i[0].selected?[d.i.s(i[0])]:[],b=!0),r=n.ownerDocument.createElement("option"),t===v?(d.a.Ha(r,a.get("optionsCaption")),d.i.Y(r,e)):(i=o(t,a.get("optionsValue"),t),d.i.Y(r,d.a.c(i)),t=o(t,a.get("optionsText"),i),d.a.Ha(r,t)),[r]},t,s),d.k.u(function(){f?d.i.Y(n,d.a.c(a.get("value")),!0):(u?h.length&&r().length<h.length:h.length&&0<=n.selectedIndex?d.i.s(n.options[n.selectedIndex])!==h[0]:h.length||0<=n.selectedIndex)&&d.a.qa(n,"change")}),d.a.kc(n),c&&20<Math.abs(c-n.scrollTop)&&(n.scrollTop=c)}},d.d.options.ab=d.a.f.I(),d.d.selectedOptions={after:["options","foreach"],init:function(e,n,t){d.a.n(e,"change",function(){var a=n(),r=[];d.a.o(e.getElementsByTagName("option"),function(e){e.selected&&r.push(d.i.s(e))}),d.h.ra(a,t,"selectedOptions",r)})},update:function(e,n){if("select"!=d.a.v(e))throw Error("values binding applies only to SELECT elements");var t=d.a.c(n());t&&"number"==typeof t.length&&d.a.o(e.getElementsByTagName("option"),function(e){var n=0<=d.a.m(t,d.i.s(e));d.a.Sb(e,n)})}},d.h.V.selectedOptions=!0,d.d.style={update:function(n,t){var a=d.a.c(t()||{});d.a.A(a,function(t,a){a=d.a.c(a),(null===a||a===e||!1===a)&&(a=""),n.style[t]=a})}},d.d.submit={init:function(e,n,t,a,r){if("function"!=typeof n())throw Error("The value for a submit binding must be a function");d.a.n(e,"submit",function(t){var a,o=n();try{a=o.call(r.$data,e)}finally{!0!==a&&(t.preventDefault?t.preventDefault():t.returnValue=!1)}})}},d.d.text={init:function(){return{controlsDescendantBindings:!0}},update:function(e,n){d.a.Ha(e,n())}},d.e.R.text=!0,function(){if(n&&n.navigator)var t=function(e){return e?parseFloat(e[1]):void 0},a=n.opera&&n.opera.version&&parseInt(n.opera.version()),r=n.navigator.userAgent,o=t(r.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),i=t(r.match(/Firefox\/([^ ]*)/));if(10>d.a.M)var u=d.a.f.I(),c=d.a.f.I(),s=function(e){var n=this.activeElement;(n=n&&d.a.f.get(n,c))&&n(e)},f=function(e,n){var t=e.ownerDocument;d.a.f.get(t,u)||(d.a.f.set(t,u,!0),d.a.n(t,"selectionchange",s)),d.a.f.set(e,c,n)};d.d.textInput={init:function(n,t,r){function u(e,t){d.a.n(n,e,t)}function c(){var a=d.a.c(t());(null===a||a===e)&&(a=""),h!==e&&a===h?setTimeout(c,4):n.value!==a&&(b=a,n.value=a)}function s(){p||(h=n.value,p=setTimeout(l,4))}function l(){clearTimeout(p),h=p=e;var a=n.value;b!==a&&(b=a,d.h.ra(t(),r,"textInput",a))}var p,h,b=n.value;10>d.a.M?(u("propertychange",function(e){"value"===e.propertyName&&l()}),8==d.a.M&&(u("keyup",l),u("keydown",l)),8<=d.a.M&&(f(n,l),u("dragend",s))):(u("input",l),5>o&&"textarea"===d.a.v(n)?(u("keydown",s),u("paste",s),u("cut",s)):11>a?u("keydown",s):4>i&&(u("DOMAutoComplete",l),u("dragdrop",l),u("drop",l))),u("change",l),d.w(c,null,{q:n})}},d.h.V.textInput=!0,d.d.textinput={preprocess:function(e,n,t){t("textInput",e)}}}(),d.d.uniqueName={init:function(e,n){if(n()){var t="ko_unique_"+ ++d.d.uniqueName.fc;d.a.Rb(e,t)}}},d.d.uniqueName.fc=0,d.d.value={after:["options","foreach"],init:function(e,n,t){if("input"!=e.tagName.toLowerCase()||"checkbox"!=e.type&&"radio"!=e.type){var a=["change"],r=t.get("valueUpdate"),o=!1,i=null;r&&("string"==typeof r&&(r=[r]),d.a.ia(a,r),a=d.a.wb(a));var u=function(){i=null,o=!1;var a=n(),r=d.i.s(e);d.h.ra(a,t,"value",r)};!d.a.M||"input"!=e.tagName.toLowerCase()||"text"!=e.type||"off"==e.autocomplete||e.form&&"off"==e.form.autocomplete||-1!=d.a.m(a,"propertychange")||(d.a.n(e,"propertychange",function(){o=!0}),d.a.n(e,"focus",function(){o=!1}),d.a.n(e,"blur",function(){o&&u()})),d.a.o(a,function(n){var t=u;d.a.Dc(n,"after")&&(t=function(){i=d.i.s(e),setTimeout(u,0)},n=n.substring(5)),d.a.n(e,n,t)});var c=function(){var a=d.a.c(n()),r=d.i.s(e);if(null!==i&&a===i)setTimeout(c,0);else if(a!==r)if("select"===d.a.v(e)){var o=t.get("valueAllowUnset"),r=function(){d.i.Y(e,a,o)};r(),o||a===d.i.s(e)?setTimeout(r,0):d.k.u(d.a.qa,null,[e,"change"])}else d.i.Y(e,a)};d.w(c,null,{q:e})}else d.va(e,{checkedValue:n})},update:function(){}},d.h.V.value=!0,d.d.visible={update:function(e,n){var t=d.a.c(n()),a="none"!=e.style.display;t&&!a?e.style.display="":!t&&a&&(e.style.display="none")}},function(e){d.d[e]={init:function(n,t,a,r,o){return d.d.event.init.call(this,n,function(){var n={};return n[e]=t(),n},a,r,o)}}}("click"),d.J=function(){},d.J.prototype.renderTemplateSource=function(){throw Error("Override renderTemplateSource")},d.J.prototype.createJavaScriptEvaluatorBlock=function(){throw Error("Override createJavaScriptEvaluatorBlock")},d.J.prototype.makeTemplateSource=function(e,n){if("string"==typeof e){n=n||t;var a=n.getElementById(e);if(!a)throw Error("Cannot find template with ID "+e);return new d.t.l(a)}if(1==e.nodeType||8==e.nodeType)return new d.t.ha(e);throw Error("Unknown template type: "+e)},d.J.prototype.renderTemplate=function(e,n,t,a){return e=this.makeTemplateSource(e,a),this.renderTemplateSource(e,n,t,a)},d.J.prototype.isTemplateRewritten=function(e,n){return!1===this.allowTemplateRewriting?!0:this.makeTemplateSource(e,n).data("isRewritten")},d.J.prototype.rewriteTemplate=function(e,n,t){e=this.makeTemplateSource(e,t),n=n(e.text()),e.text(n),e.data("isRewritten",!0)},d.b("templateEngine",d.J),d.kb=function(){function e(e,n,t,a){e=d.h.bb(e);for(var r=d.h.ka,o=0;o<e.length;o++){var i=e[o].key;if(r.hasOwnProperty(i)){var u=r[i];if("function"==typeof u){if(i=u(e[o].value))throw Error(i)}else if(!u)throw Error("This template engine does not support the '"+i+"' binding within its templates")}}return t="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+d.h.Ea(e,{valueAccessors:!0})+" } })()},'"+t.toLowerCase()+"')",a.createJavaScriptEvaluatorBlock(t)+n}var n=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,t=/\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;return{lc:function(e,n,t){n.isTemplateRewritten(e,t)||n.rewriteTemplate(e,function(e){return d.kb.xc(e,n)},t)},xc:function(a,r){return a.replace(n,function(n,t,a,o,i){return e(i,t,a,r)}).replace(t,function(n,t){return e(t,"<!-- ko -->","#comment",r)})},dc:function(e,n){return d.H.$a(function(t,a){var r=t.nextSibling;r&&r.nodeName.toLowerCase()===n&&d.va(r,e,a)})}}}(),d.b("__tr_ambtns",d.kb.dc),function(){d.t={},d.t.l=function(e){this.l=e},d.t.l.prototype.text=function(){var e=d.a.v(this.l),e="script"===e?"text":"textarea"===e?"value":"innerHTML";if(0==arguments.length)return this.l[e];var n=arguments[0];"innerHTML"===e?d.a.gb(this.l,n):this.l[e]=n};var n=d.a.f.I()+"_";d.t.l.prototype.data=function(e){return 1===arguments.length?d.a.f.get(this.l,n+e):void d.a.f.set(this.l,n+e,arguments[1])};var t=d.a.f.I();d.t.ha=function(e){this.l=e},d.t.ha.prototype=new d.t.l,d.t.ha.prototype.text=function(){if(0==arguments.length){var n=d.a.f.get(this.l,t)||{};return n.lb===e&&n.Na&&(n.lb=n.Na.innerHTML),n.lb}d.a.f.set(this.l,t,{lb:arguments[0]})},d.t.l.prototype.nodes=function(){return 0==arguments.length?(d.a.f.get(this.l,t)||{}).Na:void d.a.f.set(this.l,t,{Na:arguments[0]})},d.b("templateSources",d.t),d.b("templateSources.domElement",d.t.l),d.b("templateSources.anonymousTemplate",d.t.ha)}(),function(){function n(e,n,t){var a;for(n=d.e.nextSibling(n);e&&(a=e)!==n;)e=d.e.nextSibling(a),t(a,e)}function t(e,t){if(e.length){var a=e[0],r=e[e.length-1],o=a.parentNode,i=d.L.instance,u=i.preprocessNode;if(u){if(n(a,r,function(e,n){var t=e.previousSibling,o=u.call(i,e);o&&(e===a&&(a=o[0]||n),e===r&&(r=o[o.length-1]||t))}),e.length=0,!a)return;a===r?e.push(a):(e.push(a,r),d.a.na(e,o))}n(a,r,function(e){1!==e.nodeType&&8!==e.nodeType||d.ub(t,e)}),n(a,r,function(e){1!==e.nodeType&&8!==e.nodeType||d.H.Xb(e,[t])}),d.a.na(e,o)}}function a(e){return e.nodeType?e:0<e.length?e[0]:null}function r(e,n,r,o,u){u=u||{};var c=(e&&a(e)||r||{}).ownerDocument,s=u.templateEngine||i;if(d.kb.lc(r,s,c),r=s.renderTemplate(r,o,u,c),"number"!=typeof r.length||0<r.length&&"number"!=typeof r[0].nodeType)throw Error("Template engine must return an array of DOM nodes");switch(c=!1,n){case"replaceChildren":d.e.T(e,r),c=!0;break;case"replaceNode":d.a.Qb(e,r),c=!0;break;case"ignoreTargetNode":break;default:throw Error("Unknown renderMode: "+n)}return c&&(t(r,o),u.afterRender&&d.k.u(u.afterRender,null,[r,o.$data])),r}function o(e,n,t){return d.F(e)?e():"function"==typeof e?e(n,t):e}var i;d.hb=function(n){if(n!=e&&!(n instanceof d.J))throw Error("templateEngine must inherit from ko.templateEngine");i=n},d.eb=function(n,t,u,c,s){if(u=u||{},(u.templateEngine||i)==e)throw Error("Set a template engine before calling renderTemplate");if(s=s||"replaceChildren",c){var f=a(c);return d.j(function(){var e=t&&t instanceof d.N?t:new d.N(d.a.c(t)),i=o(n,e.$data,e),e=r(c,s,i,e,u);"replaceNode"==s&&(c=e,f=a(c))},null,{Pa:function(){return!f||!d.a.Qa(f)},q:f&&"replaceNode"==s?f.parentNode:f})}return d.H.$a(function(e){d.eb(n,t,u,e,"replaceNode")})},d.Cc=function(n,a,i,u,c){function s(e,n){t(n,l),i.afterRender&&i.afterRender(n,e),l=null}function f(e,t){l=c.createChildContext(e,i.as,function(e){e.$index=t});var a=o(n,e,l);return r(null,"ignoreTargetNode",a,l,i)}var l;return d.j(function(){var n=d.a.c(a)||[];"undefined"==typeof n.length&&(n=[n]),n=d.a.xa(n,function(n){return i.includeDestroyed||n===e||null===n||!d.a.c(n._destroy)}),d.k.u(d.a.fb,null,[u,n,f,i,s])},null,{q:u})};var u=d.a.f.I();d.d.template={init:function(e,n){var t=d.a.c(n());if("string"==typeof t||t.name)d.e.ma(e);else{if("nodes"in t){if(t=t.nodes||[],d.F(t))throw Error('The "nodes" option must be a plain, non-observable array.')}else t=d.e.childNodes(e);t=d.a.Jb(t),new d.t.ha(e).nodes(t)}return{controlsDescendantBindings:!0}},update:function(n,t,a,r,o){var i,c=t();t=d.a.c(c),a=!0,r=null,"string"==typeof t?t={}:(c=t.name,"if"in t&&(a=d.a.c(t["if"])),a&&"ifnot"in t&&(a=!d.a.c(t.ifnot)),i=d.a.c(t.data)),"foreach"in t?r=d.Cc(c||n,a&&t.foreach||[],t,n,o):a?(o="data"in t?o.createChildContext(i,t.as):o,r=d.eb(c||n,o,t,n)):d.e.ma(n),o=r,(i=d.a.f.get(n,u))&&"function"==typeof i.p&&i.p(),d.a.f.set(n,u,o&&o.$()?o:e)}},d.h.ka.template=function(e){return e=d.h.bb(e),1==e.length&&e[0].unknown||d.h.vc(e,"name")?null:"This template engine does not support anonymous templates nested within its templates"},d.e.R.template=!0}(),d.b("setTemplateEngine",d.hb),d.b("renderTemplate",d.eb),d.a.Cb=function(e,n,t){if(e.length&&n.length){var a,r,o,i,u;for(a=r=0;(!t||t>a)&&(i=e[r]);++r){for(o=0;u=n[o];++o)if(i.value===u.value){i.moved=u.index,u.moved=i.index,n.splice(o,1),a=o=0;break}a+=o}}},d.a.Ma=function(){function e(e,n,t,a,r){var o,i,u,c,s,f=Math.min,l=Math.max,p=[],h=e.length,b=n.length,g=b-h||1,v=h+b+1;for(o=0;h>=o;o++)for(c=u,p.push(u=[]),s=f(b,o+g),i=l(0,o-1);s>=i;i++)u[i]=i?o?e[o-1]===n[i-1]?c[i-1]:f(c[i]||v,u[i-1]||v)+1:i+1:o+1;for(f=[],l=[],g=[],o=h,i=b;o||i;)b=p[o][i]-1,i&&b===p[o][i-1]?l.push(f[f.length]={status:t,value:n[--i],index:i}):o&&b===p[o-1][i]?g.push(f[f.length]={status:a,value:e[--o],index:o}):(--i,--o,r.sparse||f.push({status:"retained",value:n[i]}));return d.a.Cb(l,g,10*h),f.reverse()}return function(n,t,a){return a="boolean"==typeof a?{dontLimitMoves:a}:a||{},n=n||[],t=t||[],n.length<=t.length?e(n,t,"added","deleted",a):e(t,n,"deleted","added",a)}}(),d.b("utils.compareArrays",d.a.Ma),function(){function n(n,t,a,r,o){var i=[],u=d.j(function(){var e=t(a,o,d.a.na(i,n))||[];0<i.length&&(d.a.Qb(i,e),r&&d.k.u(r,null,[a,e,o])),i.length=0,d.a.ia(i,e)},null,{q:n,Pa:function(){return!d.a.tb(i)}});return{aa:i,j:u.$()?u:e}}var t=d.a.f.I();d.a.fb=function(a,r,o,i,u){function c(e,n){w=l[n],v!==n&&(E[e]=w),w.Ua(v++),d.a.na(w.aa,a),b.push(w),y.push(w)}function s(e,n){if(e)for(var t=0,a=n.length;a>t;t++)n[t]&&d.a.o(n[t].aa,function(a){e(a,t,n[t].wa)})}r=r||[],i=i||{};var f=d.a.f.get(a,t)===e,l=d.a.f.get(a,t)||[],p=d.a.Ka(l,function(e){return e.wa}),h=d.a.Ma(p,r,i.dontLimitMoves),b=[],g=0,v=0,m=[],y=[];r=[];for(var w,x,k,E=[],p=[],T=0;x=h[T];T++)switch(k=x.moved,x.status){case"deleted":k===e&&(w=l[g],w.j&&w.j.p(),m.push.apply(m,d.a.na(w.aa,a)),i.beforeRemove&&(r[T]=w,y.push(w))),g++;break;case"retained":c(T,g++);break;case"added":k!==e?c(T,k):(w={wa:x.value,Ua:d.r(v++)},b.push(w),y.push(w),f||(p[T]=w))}s(i.beforeMove,E),d.a.o(m,i.beforeRemove?d.S:d.removeNode);for(var C,T=0,f=d.e.firstChild(a);w=y[T];T++){for(w.aa||d.a.extend(w,n(a,o,w.wa,u,w.Ua)),g=0;h=w.aa[g];f=h.nextSibling,C=h,g++)h!==f&&d.e.Fb(a,h,C);!w.rc&&u&&(u(w.wa,w.aa,w.Ua),w.rc=!0)}s(i.beforeRemove,r),s(i.afterMove,E),s(i.afterAdd,p),d.a.f.set(a,t,b)}}(),d.b("utils.setDomNodeChildrenFromArrayMapping",d.a.fb),d.P=function(){this.allowTemplateRewriting=!1},d.P.prototype=new d.J,d.P.prototype.renderTemplateSource=function(e,n,t,a){return(n=(9>d.a.M?0:e.nodes)?e.nodes():null)?d.a.O(n.cloneNode(!0).childNodes):(e=e.text(),d.a.ca(e,a))},d.P.Va=new d.P,d.hb(d.P.Va),d.b("nativeTemplateEngine",d.P),function(){d.Ya=function(){var e=this.uc=function(){if(!r||!r.tmpl)return 0;try{if(0<=r.tmpl.tag.tmpl.open.toString().indexOf("__"))return 2}catch(e){}return 1}();this.renderTemplateSource=function(n,a,o,i){if(i=i||t,o=o||{},2>e)throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");var u=n.data("precompiled");return u||(u=n.text()||"",u=r.template(null,"{{ko_with $item.koBindingContext}}"+u+"{{/ko_with}}"),n.data("precompiled",u)),n=[a.$data],a=r.extend({koBindingContext:a},o.templateOptions),a=r.tmpl(u,n,a),a.appendTo(i.createElement("div")),r.fragments={},a},this.createJavaScriptEvaluatorBlock=function(e){return"{{ko_code ((function() { return "+e+" })()) }}"},this.addTemplate=function(e,n){t.write("<script type='text/html' id='"+e+"'>"+n+"</script>")},e>0&&(r.tmpl.tag.ko_code={open:"__.push($1 || '');"},r.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},d.Ya.prototype=new d.J;var e=new d.Ya;0<e.uc&&d.hb(e),d.b("jqueryTmplTemplateEngine",d.Ya)}()})}()}();
<<<<<<< HEAD
var initAll=function(){var t={locations:[{continent:"Europe",country:"France",country_code:"fr",city:"Paris",type:"exact",month:"April",year:"2011",lat:48.854759,lng:2.30508,hotel:"Hôtel Prince",address:"66 Avenue Bosquet, 07. Tour Eiffel - Invalides, Paris, 75007, France",marker:null,iw_content:"",company:2,photos:[]},{continent:"Asia",country:"Israel",country_code:"il",city:"Jerusalem",type:"so-so",month:"April",year:"2015",lat:31.778245,lng:35.229397,hotel:"Not applicable",address:"Not applicable",marker:null,iw_content:"",company:2,photos:[]},{continent:"Africa",country:"Egypt",country_code:"eg",city:"Luxor",type:"so-so",month:"September",year:"2010",lat:25.714124,lng:32.649766,hotel:"Not applicable",address:"Not applicable",marker:null,iw_content:"",company:10,photos:[]},{continent:"Africa",country:"Egypt",country_code:"eg",city:"Hurghada",type:"so-so",month:"September",year:"2010",lat:27.082086,lng:33.860678,hotel:"Don't remember",address:"Don't remember",marker:null,iw_content:"",company:10,photos:[]},{continent:"Asia",country:"Thailand",country_code:"th",city:"Bangkok",type:"exact",month:"September",year:"2011",lat:13.757137,lng:100.502789,hotel:"Siamese Views Lodge",address:"211/21-23 Soi Damneon Klang Nuea, Ratchadamneon Klang Road, Bwonniwet, Pranakorn, Khaosan, Bangkok, 10200, Thailand",marker:null,iw_content:"",company:2,photos:[]},{continent:"Asia",country:"Thailand",country_code:"th",city:"Pattaya",type:"exact",month:"September",year:"2011",lat:12.930813,lng:100.880119,hotel:"Inn House",address:"322/1 Pattaya Beach Road Soi 13, Pattaya City, Banglamung, Pattaya, 20260, Thailand",marker:null,iw_content:"",company:2,photos:[]},{continent:"North America",country:"United States of America",country_code:"us",city:"New York",type:"so-so",month:"September",year:"2009",lat:40.621153,lng:-73.998114,hotel:"Don't remember",address:"Don't remember",marker:null,iw_content:"",company:2,photos:[]},{continent:"North America",country:"United States of America",country_code:"us",city:"Chicago",type:"so-so",month:"September",year:"2009",lat:41.883543,lng:-87.795953,hotel:"Don't remember",address:"Don't remember",marker:null,iw_content:"",company:2,photos:[]},{continent:"North America",country:"United States of America",country_code:"us",city:"Niagara Falls",type:"so-so",month:"September",year:"2009",lat:43.090628,lng:-79.058927,hotel:"Don't remember",address:"Don't remember",marker:null,iw_content:"",company:2,photos:[]},{continent:"Europe",country:"Germany",country_code:"de",city:"Berlin",type:"exact",month:"November",year:"2011",lat:52.501939,lng:13.384981,hotel:"Holiday Inn Express Berlin City Centre West",address:"Kurfürstenstraße 78, Tiergarten, Berlin, 10787, Germany",marker:null,iw_content:"",company:6,photos:[]},{continent:"Europe",country:"Finland",country_code:"fi",city:"Helsinki",type:"so-so",month:"June",year:"2012",lat:60.17104,lng:24.939737,hotel:"Don't remember",address:"Don't remember",marker:null,iw_content:"",company:2,photos:[]},{continent:"Europe",country:"Norway",country_code:"no",city:"Oslo",type:"so-so",month:"June",year:"2012",lat:59.913331,lng:10.749411,hotel:"Don't remember",address:"Don't remember",marker:null,iw_content:"",company:2,photos:[]},{continent:"Europe",country:"Sweden",country_code:"se",city:"Stockholm",type:"so-so",month:"June",year:"2012",lat:59.32751,lng:18.070844,hotel:"Not applicable",address:"Not applicable",marker:null,iw_content:"",company:2,photos:[]},{continent:"Europe",country:"Lithuania",country_code:"lt",city:"Vilnius",type:"exact",month:"January",year:"2010",lat:54.674072,lng:25.285036,hotel:"Alexa",address:"Pylimo str. 53 / Sodu str. 2, Vilnius , 01136, Lithuania",marker:null,iw_content:"",company:4,photos:[]},{continent:"Europe",country:"Belarus",country_code:"by",city:"Minsk",type:"exact",month:"January",year:"2015",lat:53.627318,lng:27.977858,hotel:"Dubravushka",address:"Stanki, 16, Puhovichskiy district, Minsk region, Belarus",marker:null,iw_content:"",company:12,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Vladimir",type:"so-so",month:"November",year:"2011",lat:56.128201,lng:40.403193,hotel:"Not applicable",address:"Not applicable",marker:null,iw_content:"",company:2,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Saint-Petersburg",type:"exact",month:"November",year:"2010",lat:59.932236,lng:30.353496,hotel:"Nevsky Mayak Hotel",address:"Nevsky Prospekt 94, St Petersburg, 191025, Russia",marker:null,iw_content:"",company:2,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Kursk",type:"exact",month:"May",year:"2009",lat:51.748547,lng:36.189659,hotel:"Home, sweet home :)",address:"Home, sweet home!",marker:null,iw_content:"",company:2,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Belgorod",type:"so-so",month:"May",year:"2009",lat:50.599392,lng:36.591674,hotel:"Not applicable",address:"Not applicable",marker:null,iw_content:"",company:2,photos:[]},{continent:"Asia",country:"United Arab Emirates",country_code:"ae",city:"Dubai",type:"so-so",month:"September",year:"2011",lat:25.203156,lng:55.27031,hotel:"Not applicable",address:"Not applicable",marker:null,iw_content:"",company:2,photos:[]},{continent:"Asia",country:"Kazakhstan",country_code:"kz",city:"Almaty",type:"exact",month:"April",year:"2010",lat:43.382937,lng:77.128332,hotel:"home",address:"home",marker:null,iw_content:"",company:2,photos:[]},{continent:"Asia",country:"Turkey",country_code:"tr",city:"Istanbul",type:"exact",month:"November",year:"2009",lat:41.010213,lng:28.977798,hotel:"Modern Sultan Hotel",address:"Zeynep Sultan Cad. No 19 Sultanahmet, Istanbul , 34110, Turkey",marker:null,iw_content:"",company:4,photos:[]},{continent:"Asia",country:"Cambodia",country_code:"kh",city:"Siem Reap",type:"so-so",month:"September",year:"2011",lat:13.341384,lng:103.836862,hotel:"Don't remember",address:"Don't remember",marker:null,iw_content:"",company:2,photos:[]},{continent:"Europe",country:"France",country_code:"fr",city:"Versailles",type:"so-so",month:"April",year:"2011",lat:48.804741,lng:2.12057,hotel:"Not applicable",address:"Not applicable",marker:null,iw_content:"",company:2,photos:[]},{continent:"Europe",country:"Germany",country_code:"de",city:"Potsdam",type:"so-so",month:"November",year:"2011",lat:52.403443,lng:13.061058,hotel:"Not applicable",address:"Not applicable",marker:null,iw_content:"",company:6,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Pushkin",type:"so-so",month:"June",year:"2012",lat:59.711046,lng:30.400293,hotel:"Not applicable",address:"Not applicable",marker:null,iw_content:"",company:3,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Suzdal",type:"so-so",month:"April",year:"2012",lat:56.417977,lng:40.448681,hotel:"Don't remember",address:"Don't remember",marker:null,iw_content:"",company:4,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Torzhok",type:"so-so",month:"January",year:"2012",lat:57.038911,lng:34.962243,hotel:"Not applicable",address:"Not applicable",marker:null,iw_content:"",company:2,photos:[]}],columns:["continent","country","city","year","month"],map:null,layer:null},o=function(t){var o=this;this.continent=ko.observable(t.continent),this.country=ko.observable(t.country),this.city=ko.observable(t.city),this.type=ko.observable(t.type),this.month=ko.observable(t.month),this.year=ko.observable(t.year),this.lat=ko.observable(t.lat),this.lng=ko.observable(t.lng),this.hotel=ko.observable(t.hotel),this.address=ko.observable(t.address),this.photos=ko.observableArray([]),this.show=ko.observable(t.show),this.marker=ko.observable(t.marker),this.company=ko.observable(t.company),this.isHiddenDetails=ko.observable(!0),this.iwContent=ko.observable(t.iw_content),this.showDetails=function(){this.isHiddenDetails(!o.isHiddenDetails())}},e=function(){var e,n=this;n.initialize=function(){n.isHiddenLeft=ko.observable(!0),n.isHiddenRight=ko.observable(!0),n.searchQuery=ko.observable(),n.columnsToSearch=ko.observableArray(t.columns),n.currentLocation=ko.observable(),n.currentPhotos=ko.observableArray([]),n.currentBigPhoto=ko.observable(),n.bigPhotoWidth=ko.observable(),n.bigPhotoHeight=ko.observable(),n.infoHeight=ko.observable($(window).height()-70),n.photosHeight=ko.observable($(window).height()-70),n.windowWidth=ko.observable($(window).width()),n.windowHeight=ko.observable($(window).height()),n.initMap=function(){t.map=new google.maps.Map(document.getElementById("map"),{center:{lat:39.104892,lng:9.456656},zoom:3,mapTypeControl:!0,mapTypeId:google.maps.MapTypeId.ROADMAP,mapTypeControlOptions:{position:google.maps.ControlPosition.BOTTOM_CENTER},zoomControl:!0,zoomControlOptions:{position:google.maps.ControlPosition.LEFT_CENTER},streetViewControl:!0,streetViewControlOptions:{position:google.maps.ControlPosition.LEFT_CENTER}});new google.maps.places.Autocomplete(document.getElementById("pac-input"),{types:["(cities)"]});e=new google.maps.InfoWindow({content:"",maxWidth:350}),n.fillCountries(t.map),n.addMarkers(t.map)},n.addMarkers=function(o){for(var a in t.locations){var r=new google.maps.Marker({position:t.locations[a],map:o,title:t.locations[a].city,animation:google.maps.Animation.DROP});2===t.locations[a].company?r.setIcon("img/heart.png"):r.setIcon("img/friends.png"),google.maps.event.addListener(r,"click",function(){""===t.locations[a].iw_content&&n.addInfoWindowContent(t.locations[a])(),t.layer.setMap(null),e.setContent(t.locations[a].iw_content),e.open(o,r)}),google.maps.event.addListener(o,"click",function(){e.close()}),t.locations[a].marker=r}},n.fillCountries=function(o){var e=[],n="(";for(var a in t.locations){var r=t.locations[a].country;e.indexOf(r)<=-1&&(e.push(r),n+="'"+r+"', ")}n=n.substring(0,n.length-2)+")";var i=420419;t.layer=new google.maps.FusionTablesLayer({query:{select:"kml_4326",from:i,where:"'name_0' IN "+n},styles:[{polygonOptions:{fillOpacity:"0.2",fillColor:"#06FF1D"}}]}),t.layer.setMap(o)},n.clickMarker=function(t,o){ko.utils.arrayForEach(n.locationsList(),function(e){var n=e.marker();google.maps.event.addListener(n,"click",function(){null!==n.getAnimation()?(n.setAnimation(null),o.setMap(t)):(n.setAnimation(google.maps.Animation.BOUNCE),o.setMap(null)),t.setZoom(12);var a=new google.maps.LatLng(e.lat()+.04,e.lng()+.04);t.setCenter(a)})})},n.addInfoWindowContent=function(t){return function(){var o=t.city,n="http://en.wikipedia.org/w/api.php?action=opensearch&search="+o+"&format=json&callback=wikiCallback";$.ajax({url:n,dataType:"jsonp",success:function(t){a(t)},error:function(t,e,a){alert(t.status+" failed to get Wiki resources for city "+o+"\nUrl requested: \n"+n)}});var a=function(n){for(var a=n[1],r="",i=0,s=a.length;s>i;i++)r+='<li><a href="http://en.wikipedia.org/wiki/'+a[i]+'">'+a[i]+"</a></li>";var c=a[0];"Pushkin"===o&&(c=a[7]),"Versailles"===o&&(c=a[1]);var l="https://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro=&titles="+c;$.ajax({url:l,dataType:"jsonp",success:function(t){p(t)},error:function(t,e,n){alert(t.status+" failed to get Wiki resources for city "+o+"\nUrl requested: \n"+l)}});var p=function(o){articleObjectKeys=Object.keys(o.query.pages),key=articleObjectKeys[0],wikiArticle=o.query.pages[key].extract;var n='<div id="iw-container"><div class="iw-title">'+t.continent+", "+t.country+", "+t.city+'</div><hr class="line"><div class="iw-content"><div class="iw-subTitle">Visit info</div><span class="hotel"><span class="glyphicon glyphicon-home"></span><strong> Hotel: </strong><span>'+t.hotel+'</span></span><br><span class="address"><span class="glyphicon glyphicon-book"></span><strong> Hotel address: </strong><span>'+t.address+'</span></span><br><span class="company"><span class="glyphicon glyphicon-user"></span><strong> Company: </strong><span>'+t.company+'</span></span><hr class="line"><div class="iw-subTitle">About '+t.city+"</div>"+wikiArticle+'<hr class="line"><div class="iw-subTitle">Other wikipedia articles</div><ul>'+r+'</ul></div><div class="iw-bottom-gradient"></div></div>';e.setContent(n),t.iw_content=n}}}},n.initMap(),n.locationsList=ko.observableArray([]),t.locations.forEach(function(t){n.locationsList.push(new o(t))}),n.clickMarker(t.map,t.layer)},n.initialize(),n.photosWidth=ko.computed(function(){return n.windowWidth()>700?n.windowWidth()-370:n.windowWidth()-60}),n.filteredItems=ko.computed(function(){var t=n.searchQuery();if(n.searchQuery()&&(t=t.toLowerCase()),t){e.close(),ko.utils.arrayForEach(n.locationsList(),function(t){t.marker().setVisible(!1)});var o=ko.utils.arrayFilter(n.locationsList(),function(o){var e=-1;return ko.utils.arrayForEach(n.columnsToSearch(),function(n){var a=o[n]();"number"==typeof a&&(a=a.toString()),e+=a.toLowerCase().indexOf(t.toLowerCase())+1}),e>=0});for(var a in o)o[a].marker().setVisible(!0);return o}return ko.utils.arrayForEach(n.locationsList(),function(t){t.marker().setVisible(!0)}),n.locationsList()}),n.toggleHiddenRight=function(){n.isHiddenRight(!n.isHiddenRight()),n.isHiddenLeft()||n.toggleHiddenLeft()},n.toggleHiddenLeft=function(){n.isHiddenLeft(!n.isHiddenLeft())},n.showMarker=function(o){var e=new google.maps.LatLng(o.lat()+.06,o.lng()+.04),n=o.marker();t.map.setCenter(e),t.map.setZoom(12),t.layer.setMap(null),google.maps.event.trigger(n,"click"),null!==n.getAnimation()?n.setAnimation(null):n.setAnimation(google.maps.Animation.BOUNCE)},n.fullMap=function(){myLatLng=new google.maps.LatLng(39.104892,9.456656),t.map.setCenter(myLatLng),t.map.setZoom(3),t.layer.setMap(t.map),e.close()},n.showPhotos=function(t){n.currentLocation=t,n.currentPhotos([]),n.currentBigPhoto();var o="https://api.flickr.com/services/rest/?method=flickr.photosets.getList&api_key=c69f4fb5685159e37196cb8b2b5273cb&user_id=136434920%40N04&format=json&nojsoncallback=1";$.ajax({url:o,dataType:"json",success:function(t){e(t)},error:function(e,n,a){alert(e.status+" failed to get Flickr resources for city "+t.city()+"\nUrl requested: \n"+o)}});var e=function(t){for(var o=t.photosets.photoset,e=0;e<o.length;e++){var r=o[e].title._content;if(r==n.currentLocation.city()){var i=o[e].id;a(r,i);break}}},a=function(t,o){var e="https://api.flickr.com/services/rest/?method=flickr.photosets.getPhotos&api_key=c69f4fb5685159e37196cb8b2b5273cb&photoset_id="+o+"&user_id=136434920%40N04&format=json&nojsoncallback=1";n.currentLocation.photos().length?(n.currentPhotos(n.currentLocation.photos()),n.currentBigPhoto({imgAlt:n.currentLocation.photos()[0].imgAlt,imgSrc:n.currentLocation.photos()[0].imgSrc,imgSize:r()}),n.setBigPhotoSize(n.currentBigPhoto().imgSrc+n.currentBigPhoto().imgSize)):$.ajax({url:e,dataType:"json",success:function(t){i(t)},error:function(o,n,a){alert(o.status+" failed to get Flickr resources for city "+t+"\nUrl requested: \n"+e)}})},r=function(){var t=Math.min(Math.max(n.windowWidth()-90,n.windowWidth()-400),n.windowHeight()-270),o=".jpg";return t>320&&500>=t?o="_z.jpg":t>500&&640>=t?o="_c.jpg":t>640&&800>=t?o="_b.jpg":t>800&&1024>=t?o="_h.jpg":t>1024&&1600>=t?o="_k.jpg":t>1600&&(o="_o.jpg"),o},i=function(t){var o=t.photoset.photo[0];n.currentBigPhoto({imgAlt:o.title,imgSrc:"https://farm"+o.farm+".staticflickr.com/"+o.server+"/"+o.id+"_"+o.secret,imgSize:r()}),n.setBigPhotoSize(n.currentBigPhoto().imgSrc+n.currentBigPhoto().imgSize);for(var e=0;e<t.photoset.photo.length;e++){var a=t.photoset.photo[e];n.currentLocation.photos.push({imgAlt:a.title,imgSrc:"https://farm"+a.farm+".staticflickr.com/"+a.server+"/"+a.id+"_"+a.secret,imgSize:"_s.jpg"}),n.currentPhotos.push({imgAlt:a.title,imgSrc:"https://farm"+a.farm+".staticflickr.com/"+a.server+"/"+a.id+"_"+a.secret,imgSize:"_s.jpg"})}};n.isHiddenLeft()&&n.toggleHiddenLeft()},n.changeBigPhoto=function(t){var o=n.currentBigPhoto().imgSize;n.currentBigPhoto({imgAlt:t.imgAlt,imgSrc:t.imgSrc,imgSize:o}),n.setBigPhotoSize(n.currentBigPhoto().imgSrc+n.currentBigPhoto().imgSize)},n.setBigPhotoSize=function(t){var o=new Image;o.onload=function(){var t={h:o.height,w:o.width},e=n.windowHeight()-270,a=Math.max(n.windowWidth()-90,n.windowWidth()-400);a<t.w&&e>t.h?n.bigPhotoWidth(a):a>t.w&&e<t.h?n.bigPhotoHeight(e):t.w/a<t.h/e?n.bigPhotoHeight(e):n.bigPhotoWidth(a)},o.src=t}},n=new e;ko.applyBindings(n)};
//# sourceMappingURL=data:application/json;base64,
||||||| merged common ancestors
var initAll=function(){var o={locations:[{continent:"Europe",country:"France",country_code:"fr",city:"Paris",type:"exact",month:"April",year:"2011",lat:48.854759,lng:2.30508,hotel:"Hôtel Prince",address:"66 Avenue Bosquet, 07. Tour Eiffel - Invalides, Paris, 75007, France",marker:null,company:2,photos:[]},{continent:"Asia",country:"Israel",country_code:"il",city:"Jerusalem",type:"so-so",month:"April",year:"2015",lat:31.778245,lng:35.229397,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]},{continent:"Africa",country:"Egypt",country_code:"eg",city:"Luxor",type:"so-so",month:"September",year:"2010",lat:25.714124,lng:32.649766,hotel:"Not applicable",address:"Not applicable",marker:null,company:10,photos:[]},{continent:"Africa",country:"Egypt",country_code:"eg",city:"Hurghada",type:"so-so",month:"September",year:"2010",lat:27.082086,lng:33.860678,hotel:"Don't remember",address:"Don't remember",marker:null,company:10,photos:[]},{continent:"Asia",country:"Thailand",country_code:"th",city:"Bangkok",type:"exact",month:"September",year:"2011",lat:13.757137,lng:100.502789,hotel:"Siamese Views Lodge",address:"211/21-23 Soi Damneon Klang Nuea, Ratchadamneon Klang Road, Bwonniwet, Pranakorn, Khaosan, Bangkok, 10200, Thailand",marker:null,company:2,photos:[]},{continent:"Asia",country:"Thailand",country_code:"th",city:"Pattaya",type:"exact",month:"September",year:"2011",lat:12.930813,lng:100.880119,hotel:"Inn House",address:"322/1 Pattaya Beach Road Soi 13, Pattaya City, Banglamung, Pattaya, 20260, Thailand",marker:null,company:2,photos:[]},{continent:"North America",country:"United States of America",country_code:"us",city:"New York",type:"so-so",month:"September",year:"2009",lat:40.621153,lng:-73.998114,hotel:"Don't remember",address:"Don't remember",marker:null,company:2,photos:[]},{continent:"North America",country:"United States of America",country_code:"us",city:"Chicago",type:"so-so",month:"September",year:"2009",lat:41.883543,lng:-87.795953,hotel:"Don't remember",address:"Don't remember",marker:null,company:2,photos:[]},{continent:"North America",country:"United States of America",country_code:"us",city:"Niagara Falls",type:"so-so",month:"September",year:"2009",lat:43.090628,lng:-79.058927,hotel:"Don't remember",address:"Don't remember",marker:null,company:2,photos:[]},{continent:"Europe",country:"Germany",country_code:"de",city:"Berlin",type:"exact",month:"November",year:"2011",lat:52.501939,lng:13.384981,hotel:"Holiday Inn Express Berlin City Centre West",address:"Kurfürstenstraße 78, Tiergarten, Berlin, 10787, Germany",marker:null,company:6,photos:[]},{continent:"Europe",country:"Finland",country_code:"fi",city:"Helsinki",type:"so-so",month:"June",year:"2012",lat:60.17104,lng:24.939737,hotel:"Don't remember",address:"Don't remember",marker:null,company:2,photos:[]},{continent:"Europe",country:"Norway",country_code:"no",city:"Oslo",type:"so-so",month:"June",year:"2012",lat:59.913331,lng:10.749411,hotel:"Don't remember",address:"Don't remember",marker:null,company:2,photos:[]},{continent:"Europe",country:"Sweden",country_code:"se",city:"Stockholm",type:"so-so",month:"June",year:"2012",lat:59.32751,lng:18.070844,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]},{continent:"Europe",country:"Lithuania",country_code:"lt",city:"Vilnius",type:"exact",month:"January",year:"2010",lat:54.674072,lng:25.285036,hotel:"Alexa",address:"Pylimo str. 53 / Sodu str. 2, Vilnius , 01136, Lithuania",marker:null,company:4,photos:[]},{continent:"Europe",country:"Belarus",country_code:"by",city:"Minsk",type:"exact",month:"January",year:"2015",lat:53.627318,lng:27.977858,hotel:"Dubravushka",address:"Stanki, 16, Puhovichskiy district, Minsk region, Belarus",marker:null,company:12,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Vladimir",type:"so-so",month:"November",year:"2011",lat:56.128201,lng:40.403193,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Saint-Petersburg",type:"exact",month:"November",year:"2010",lat:59.932236,lng:30.353496,hotel:"Nevsky Mayak Hotel",address:"Nevsky Prospekt 94, St Petersburg, 191025, Russia",marker:null,company:2,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Kursk",type:"exact",month:"May",year:"2009",lat:51.748547,lng:36.189659,hotel:"Home, sweet home :)",address:"Home, sweet home!",marker:null,company:2,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Belgorod",type:"so-so",month:"May",year:"2009",lat:50.599392,lng:36.591674,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]},{continent:"Asia",country:"United Arab Emirates",country_code:"ae",city:"Dubai",type:"so-so",month:"September",year:"2011",lat:25.203156,lng:55.27031,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]},{continent:"Asia",country:"Kazakhstan",country_code:"kz",city:"Almaty",type:"exact",month:"April",year:"2010",lat:43.382937,lng:77.128332,hotel:"home",address:"home",marker:null,company:2,photos:[]},{continent:"Asia",country:"Turkey",country_code:"tr",city:"Istanbul",type:"exact",month:"November",year:"2009",lat:41.010213,lng:28.977798,hotel:"Modern Sultan Hotel",address:"Zeynep Sultan Cad. No 19 Sultanahmet, Istanbul , 34110, Turkey",marker:null,company:4,photos:[]},{continent:"Asia",country:"Cambodia",country_code:"kh",city:"Siem Reap",type:"so-so",month:"September",year:"2011",lat:13.341384,lng:103.836862,hotel:"Don't remember",address:"Don't remember",marker:null,company:2,photos:[]},{continent:"Europe",country:"France",country_code:"fr",city:"Versailles",type:"so-so",month:"April",year:"2011",lat:48.804741,lng:2.12057,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]},{continent:"Europe",country:"Germany",country_code:"de",city:"Potsdam",type:"so-so",month:"November",year:"2011",lat:52.403443,lng:13.061058,hotel:"Not applicable",address:"Not applicable",marker:null,company:6,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Pushkin",type:"so-so",month:"June",year:"2012",lat:59.711046,lng:30.400293,hotel:"Not applicable",address:"Not applicable",marker:null,company:3,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Suzdal",type:"so-so",month:"April",year:"2012",lat:56.417977,lng:40.448681,hotel:"Don't remember",address:"Don't remember",marker:null,company:4,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Torzhok",type:"so-so",month:"January",year:"2012",lat:57.038911,lng:34.962243,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]}],columns:["continent","country","city","year","month"],map:null,layer:null},t=function(o){var t=this;this.continent=ko.observable(o.continent),this.country=ko.observable(o.country),this.city=ko.observable(o.city),this.type=ko.observable(o.type),this.month=ko.observable(o.month),this.year=ko.observable(o.year),this.lat=ko.observable(o.lat),this.lng=ko.observable(o.lng),this.hotel=ko.observable(o.hotel),this.address=ko.observable(o.address),this.photos=ko.observableArray([]),this.show=ko.observable(o.show),this.marker=ko.observable(o.marker),this.company=ko.observable(o.company),this.isHiddenDetails=ko.observable(!0),this.showDetails=function(){this.isHiddenDetails(!t.isHiddenDetails())}},e=function(){var e=this;e.initialize=function(){e.isHiddenLeft=ko.observable(!0),e.isHiddenRight=ko.observable(!0),e.searchQuery=ko.observable(),e.columnsToSearch=ko.observableArray(o.columns),e.currentLocation=ko.observable(),e.currentPhotos=ko.observableArray([]),e.currentBigPhoto=ko.observable(),e.bigPhotoWidth=ko.observable(),e.bigPhotoHeight=ko.observable(),e.infoHeight=ko.observable($(window).height()-70),e.photosHeight=ko.observable($(window).height()-70),e.windowWidth=ko.observable($(window).width()),e.windowHeight=ko.observable($(window).height()),e.initMap=function(){o.map=new google.maps.Map(document.getElementById("map"),{center:{lat:39.104892,lng:9.456656},zoom:3,mapTypeControl:!0,mapTypeId:google.maps.MapTypeId.ROADMAP,mapTypeControlOptions:{position:google.maps.ControlPosition.BOTTOM_CENTER},zoomControl:!0,zoomControlOptions:{position:google.maps.ControlPosition.LEFT_CENTER},streetViewControl:!0,streetViewControlOptions:{position:google.maps.ControlPosition.LEFT_CENTER}});new google.maps.places.Autocomplete(document.getElementById("pac-input"),{types:["(cities)"]});e.fillCountries(o.map),e.addMarkers(o.map)},e.addMarkers=function(t){for(var e in o.locations){var n=new google.maps.Marker({position:o.locations[e],map:t,title:o.locations[e].city,animation:google.maps.Animation.DROP});2===o.locations[e].company?n.setIcon("img/heart.png"):n.setIcon("img/friends.png"),o.locations[e].marker=n}},e.fillCountries=function(t){var e=[],n="(";for(var a in o.locations){var r=o.locations[a].country;e.indexOf(r)<=-1&&(e.push(r),n+="'"+r+"', ")}n=n.substring(0,n.length-2)+")";var i=420419;o.layer=new google.maps.FusionTablesLayer({query:{select:"kml_4326",from:i,where:"'name_0' IN "+n},styles:[{polygonOptions:{fillOpacity:"0.2",fillColor:"#06FF1D"}}]}),o.layer.setMap(t)},e.clickMarker=function(o,t){ko.utils.arrayForEach(e.locationsList(),function(e){var n=e.marker();google.maps.event.addListener(n,"click",function(){null!==n.getAnimation()?(n.setAnimation(null),t.setMap(o)):(n.setAnimation(google.maps.Animation.BOUNCE),t.setMap(null)),o.setZoom(12);var a=new google.maps.LatLng(e.lat()+.04,e.lng()+.04);o.setCenter(a)})})},e.addInfoWindow=function(t){ko.utils.arrayForEach(e.locationsList(),function(e){var n=e.marker(),a=e.city(),r="http://en.wikipedia.org/w/api.php?action=opensearch&search="+a+"&format=json&callback=wikiCallback";$.ajax({url:r,dataType:"jsonp",success:function(o){i(o)},error:function(o,t,e){alert(o.status+" failed to get Wiki resources for city "+a+"\nUrl requested: \n"+r)}});var i=function(r){for(var i=r[1],s="",l=0,c=i.length;c>l;l++)s+='<li><a href="http://en.wikipedia.org/wiki/'+i[l]+'">'+i[l]+"</a></li>";var p=i[0];"Pushkin"===a&&(p=i[7]),"Versailles"===a&&(p=i[1]);var u="https://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro=&titles="+p;$.ajax({url:u,dataType:"jsonp",success:function(o){m(o)},error:function(o,t,e){alert(o.status+" failed to get Wiki resources for city "+a+"\nUrl requested: \n"+u)}});var m=function(a){articleObjectKeys=Object.keys(a.query.pages),key=articleObjectKeys[0],wikiArticle=a.query.pages[key].extract;var r='<div id="iw-container"><div class="iw-title">'+e.continent()+", "+e.country()+", "+e.city()+'</div><hr class="line"><div class="iw-content"><div class="iw-subTitle">Visit info</div><span class="hotel"><span class="glyphicon glyphicon-home"></span><strong> Hotel: </strong><span>'+e.hotel()+'</span></span><br><span class="address"><span class="glyphicon glyphicon-book"></span><strong> Hotel address: </strong><span>'+e.address()+'</span></span><br><span class="company"><span class="glyphicon glyphicon-user"></span><strong> Company: </strong><span>'+e.company()+'</span></span><hr class="line"><div class="iw-subTitle">About '+e.city()+"</div>"+wikiArticle+'<hr class="line"><div class="iw-subTitle">Other wikipedia articles</div><ul>'+s+'</ul></div><div class="iw-bottom-gradient"></div></div>',i=new google.maps.InfoWindow({content:r,maxWidth:350});google.maps.event.addListener(n,"click",function(){o.layer.setMap(null),i.open(t,n)}),google.maps.event.addListener(t,"click",function(){i.close()})}}})},e.initMap(),e.locationsList=ko.observableArray([]),o.locations.forEach(function(o){e.locationsList.push(new t(o))}),e.clickMarker(o.map,o.layer),e.addInfoWindow(o.map)},e.initialize(),e.photosWidth=ko.computed(function(){return e.windowWidth()>700?e.windowWidth()-370:e.windowWidth()-60}),e.filteredItems=ko.computed(function(){var o=e.searchQuery();if(e.searchQuery()&&(o=o.toLowerCase()),o){ko.utils.arrayForEach(e.locationsList(),function(o){o.marker().setVisible(!1)});var t=ko.utils.arrayFilter(e.locationsList(),function(t){var n=-1;return ko.utils.arrayForEach(e.columnsToSearch(),function(e){var a=t[e]();"number"==typeof a&&(a=a.toString()),n+=a.toLowerCase().indexOf(o.toLowerCase())+1}),n>=0});for(var n in t)t[n].marker().setVisible(!0);return t}return ko.utils.arrayForEach(e.locationsList(),function(o){o.marker().setVisible(!0)}),e.locationsList()}),e.toggleHiddenRight=function(){e.isHiddenRight(!e.isHiddenRight()),e.isHiddenLeft()||e.toggleHiddenLeft()},e.toggleHiddenLeft=function(){e.isHiddenLeft(!e.isHiddenLeft())},e.showMarker=function(t){var e=new google.maps.LatLng(t.lat()+.06,t.lng()+.04),n=t.marker();o.map.setCenter(e),o.map.setZoom(12),o.layer.setMap(null),google.maps.event.trigger(n,"click"),null!==n.getAnimation()?n.setAnimation(null):n.setAnimation(google.maps.Animation.BOUNCE)},e.fullMap=function(){myLatLng=new google.maps.LatLng(39.104892,9.456656),o.map.setCenter(myLatLng),o.map.setZoom(3),o.layer.setMap(o.map)},e.showPhotos=function(o){e.currentLocation=o,e.currentPhotos([]),e.currentBigPhoto();var t="https://api.flickr.com/services/rest/?method=flickr.photosets.getList&api_key=c69f4fb5685159e37196cb8b2b5273cb&user_id=136434920%40N04&format=json&nojsoncallback=1";$.ajax({url:t,dataType:"json",success:function(o){n(o)},error:function(e,n,a){alert(e.status+" failed to get Flickr resources for city "+o.city()+"\nUrl requested: \n"+t)}});var n=function(o){for(var t=o.photosets.photoset,n=0;n<t.length;n++){var r=t[n].title._content;if(r==e.currentLocation.city()){var i=t[n].id;a(r,i);break}}},a=function(o,t){var n="https://api.flickr.com/services/rest/?method=flickr.photosets.getPhotos&api_key=c69f4fb5685159e37196cb8b2b5273cb&photoset_id="+t+"&user_id=136434920%40N04&format=json&nojsoncallback=1";e.currentLocation.photos().length?(e.currentPhotos(e.currentLocation.photos()),e.currentBigPhoto({imgAlt:e.currentLocation.photos()[0].imgAlt,imgSrc:e.currentLocation.photos()[0].imgSrc,imgSize:r()}),e.setBigPhotoSize(e.currentBigPhoto().imgSrc+e.currentBigPhoto().imgSize)):$.ajax({url:n,dataType:"json",success:function(o){i(o)},error:function(t,e,a){alert(t.status+" failed to get Flickr resources for city "+o+"\nUrl requested: \n"+n)}})},r=function(){var o=Math.min(Math.max(e.windowWidth()-90,e.windowWidth()-400),e.windowHeight()-270),t=".jpg";return o>320&&500>=o?t="_z.jpg":o>500&&640>=o?t="_c.jpg":o>640&&800>=o?t="_b.jpg":o>800&&1024>=o?t="_h.jpg":o>1024&&1600>=o?t="_k.jpg":o>1600&&(t="_o.jpg"),t},i=function(o){var t=o.photoset.photo[0];e.currentBigPhoto({imgAlt:t.title,imgSrc:"https://farm"+t.farm+".staticflickr.com/"+t.server+"/"+t.id+"_"+t.secret,imgSize:r()}),e.setBigPhotoSize(e.currentBigPhoto().imgSrc+e.currentBigPhoto().imgSize);for(var n=0;n<o.photoset.photo.length;n++){var a=o.photoset.photo[n];e.currentLocation.photos.push({imgAlt:a.title,imgSrc:"https://farm"+a.farm+".staticflickr.com/"+a.server+"/"+a.id+"_"+a.secret,imgSize:"_s.jpg"}),e.currentPhotos.push({imgAlt:a.title,imgSrc:"https://farm"+a.farm+".staticflickr.com/"+a.server+"/"+a.id+"_"+a.secret,imgSize:"_s.jpg"})}};e.isHiddenLeft()&&e.toggleHiddenLeft()},e.changeBigPhoto=function(o){var t=e.currentBigPhoto().imgSize;e.currentBigPhoto({imgAlt:o.imgAlt,imgSrc:o.imgSrc,imgSize:t}),e.setBigPhotoSize(e.currentBigPhoto().imgSrc+e.currentBigPhoto().imgSize)},e.setBigPhotoSize=function(o){var t=new Image;t.onload=function(){var o={h:t.height,w:t.width},n=e.windowHeight()-270,a=Math.max(e.windowWidth()-90,e.windowWidth()-400);a<o.w&&n>o.h?e.bigPhotoWidth(a):a>o.w&&n<o.h?e.bigPhotoHeight(n):o.w/a<o.h/n?e.bigPhotoHeight(n):e.bigPhotoWidth(a)},t.src=o}},n=new e;ko.applyBindings(n)};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsImJvb3RzdHJhcC5qcyIsImtub2Nrb3V0LmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3VtZW50IiwidyIsIkVycm9yIiwid2luZG93IiwidGhpcyIsIm5vR2xvYmFsIiwiaXNBcnJheWxpa2UiLCJvYmoiLCJsZW5ndGgiLCJ0eXBlIiwialF1ZXJ5IiwiaXNXaW5kb3ciLCJub2RlVHlwZSIsIndpbm5vdyIsImVsZW1lbnRzIiwicXVhbGlmaWVyIiwibm90IiwiaXNGdW5jdGlvbiIsImdyZXAiLCJlbGVtIiwiaSIsImNhbGwiLCJyaXNTaW1wbGUiLCJ0ZXN0IiwiZmlsdGVyIiwiaW5kZXhPZiIsInNpYmxpbmciLCJjdXIiLCJkaXIiLCJjcmVhdGVPcHRpb25zIiwib3B0aW9ucyIsIm9iamVjdCIsIm9wdGlvbnNDYWNoZSIsImVhY2giLCJtYXRjaCIsInJub3R3aGl0ZSIsIl8iLCJmbGFnIiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5IiwiRGF0YSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY2FjaGUiLCJnZXQiLCJleHBhbmRvIiwidWlkIiwiZGF0YUF0dHIiLCJrZXkiLCJkYXRhIiwibmFtZSIsInVuZGVmaW5lZCIsInJlcGxhY2UiLCJybXVsdGlEYXNoIiwidG9Mb3dlckNhc2UiLCJnZXRBdHRyaWJ1dGUiLCJyYnJhY2UiLCJwYXJzZUpTT04iLCJlIiwiZGF0YV91c2VyIiwic2V0IiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiZXJyIiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiY29udGVudCIsIm5vZGVOYW1lIiwiZmlyc3RDaGlsZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJvd25lckRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwicnNjcmlwdFR5cGVNYXNrZWQiLCJleGVjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0R2xvYmFsRXZhbCIsImVsZW1zIiwicmVmRWxlbWVudHMiLCJsIiwiZGF0YV9wcml2IiwiY2xvbmVDb3B5RXZlbnQiLCJzcmMiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJldmVudHMiLCJoYXNEYXRhIiwiYWNjZXNzIiwiaGFuZGxlIiwiZXZlbnQiLCJhZGQiLCJleHRlbmQiLCJnZXRBbGwiLCJjb250ZXh0IiwidGFnIiwicmV0IiwicXVlcnlTZWxlY3RvckFsbCIsIm1lcmdlIiwiZml4SW5wdXQiLCJyY2hlY2thYmxlVHlwZSIsImNoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJhY3R1YWxEaXNwbGF5IiwiZG9jIiwic3R5bGUiLCJhcHBlbmRUbyIsImJvZHkiLCJkaXNwbGF5IiwiZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUiLCJjc3MiLCJkZXRhY2giLCJkZWZhdWx0RGlzcGxheSIsImVsZW1kaXNwbGF5IiwiaWZyYW1lIiwiZG9jdW1lbnRFbGVtZW50IiwiY29udGVudERvY3VtZW50Iiwid3JpdGUiLCJjbG9zZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0U3R5bGVzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImNvbnRhaW5zIiwicm51bW5vbnB4Iiwicm1hcmdpbiIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJ2ZW5kb3JQcm9wTmFtZSIsImNhcE5hbWUiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwib3JpZ05hbWUiLCJjc3NQcmVmaXhlcyIsInNldFBvc2l0aXZlTnVtYmVyIiwidmFsdWUiLCJzdWJ0cmFjdCIsIm1hdGNoZXMiLCJybnVtc3BsaXQiLCJNYXRoIiwibWF4IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwidmFsIiwiY3NzRXhwYW5kIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInN1cHBvcnQiLCJib3hTaXppbmdSZWxpYWJsZSIsInBhcnNlRmxvYXQiLCJzaG93SGlkZSIsInNob3ciLCJoaWRkZW4iLCJ2YWx1ZXMiLCJpbmRleCIsImlzSGlkZGVuIiwiVHdlZW4iLCJwcm9wIiwiZW5kIiwiZWFzaW5nIiwicHJvdG90eXBlIiwiaW5pdCIsImNyZWF0ZUZ4Tm93Iiwic2V0VGltZW91dCIsImZ4Tm93Iiwibm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJ3aGljaCIsImF0dHJzIiwiaGVpZ2h0Iiwib3BhY2l0eSIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwidHdlZW4iLCJjb2xsZWN0aW9uIiwidHdlZW5lcnMiLCJjb25jYXQiLCJkZWZhdWx0UHJlZmlsdGVyIiwicHJvcHMiLCJvcHRzIiwidG9nZ2xlIiwiaG9va3MiLCJvbGRmaXJlIiwiY2hlY2tEaXNwbGF5IiwiYW5pbSIsIm9yaWciLCJkYXRhU2hvdyIsInF1ZXVlIiwiX3F1ZXVlSG9va3MiLCJ1bnF1ZXVlZCIsImVtcHR5IiwiZmlyZSIsImFsd2F5cyIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicmZ4dHlwZXMiLCJpc0VtcHR5T2JqZWN0IiwiZG9uZSIsImhpZGUiLCJyZW1vdmUiLCJzdGFydCIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwiY2FtZWxDYXNlIiwiaXNBcnJheSIsImNzc0hvb2tzIiwiZXhwYW5kIiwiQW5pbWF0aW9uIiwicHJvcGVydGllcyIsInJlc3VsdCIsInN0b3BwZWQiLCJhbmltYXRpb25QcmVmaWx0ZXJzIiwiZGVmZXJyZWQiLCJEZWZlcnJlZCIsInRpY2siLCJjdXJyZW50VGltZSIsInJlbWFpbmluZyIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwidGVtcCIsInBlcmNlbnQiLCJ0d2VlbnMiLCJydW4iLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9taXNlIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwicHVzaCIsInN0b3AiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsIm1hcCIsImZ4IiwidGltZXIiLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwiZmFpbCIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImZ1bmMiLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsInVuc2hpZnQiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdCIsInNlbGVjdGVkIiwiaW5zcGVjdGVkIiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsInNlZWtpbmdUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwiYWpheEV4dGVuZCIsInRhcmdldCIsImRlZXAiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJzIiwicmVzcG9uc2VzIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImNvbnRlbnRzIiwic2hpZnQiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwidG1wIiwicHJldiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInNwbGl0Iiwic3RhdGUiLCJlcnJvciIsImJ1aWxkUGFyYW1zIiwicHJlZml4IiwidHJhZGl0aW9uYWwiLCJ2IiwicmJyYWNrZXQiLCJnZXRXaW5kb3ciLCJkZWZhdWx0VmlldyIsImFyciIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImhhc093biIsImhhc093blByb3BlcnR5IiwidmVyc2lvbiIsInNlbGVjdG9yIiwiZm4iLCJydHJpbSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImNhbGxiYWNrIiwiYXJncyIsImZpcnN0IiwiZXEiLCJsYXN0IiwibGVuIiwiaiIsInNvcnQiLCJzcGxpY2UiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImlzUGxhaW5PYmplY3QiLCJyYW5kb20iLCJpc1JlYWR5IiwibXNnIiwibm9vcCIsIkFycmF5IiwiaXNOdW1lcmljIiwiZ2xvYmFsRXZhbCIsImNvZGUiLCJzY3JpcHQiLCJpbmRpcmVjdCIsImV2YWwiLCJ0cmltIiwidGV4dCIsImhlYWQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJzdHJpbmciLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsImNhbGxiYWNrSW52ZXJzZSIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsInByb3h5IiwiRGF0ZSIsIlNpenpsZSIsInNlZWQiLCJtIiwiZ3JvdXBzIiwib2xkIiwibmlkIiwibmV3Q29udGV4dCIsIm5ld1NlbGVjdG9yIiwicHJlZmVycmVkRG9jIiwic2V0RG9jdW1lbnQiLCJkb2N1bWVudElzSFRNTCIsInJxdWlja0V4cHIiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInJidWdneVFTQSIsInRva2VuaXplIiwicmVzY2FwZSIsInNldEF0dHJpYnV0ZSIsInRvU2VsZWN0b3IiLCJyc2libGluZyIsInRlc3RDb250ZXh0Iiwiam9pbiIsInFzYUVycm9yIiwic2VsZWN0IiwiY3JlYXRlQ2FjaGUiLCJrZXlzIiwiRXhwciIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZGl2IiwiYWRkSGFuZGxlIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJhIiwiYiIsImRpZmYiLCJzb3VyY2VJbmRleCIsIk1BWF9ORUdBVElWRSIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJzZXRGaWx0ZXJzIiwidG9rZW5zIiwiYWRkQ29tYmluYXRvciIsIm1hdGNoZXIiLCJjb21iaW5hdG9yIiwiYmFzZSIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsInhtbCIsIm9sZENhY2hlIiwib3V0ZXJDYWNoZSIsIm5ld0NhY2hlIiwiZGlycnVucyIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsInVubWF0Y2hlZCIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwcmVGaWx0ZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsInJlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm91dGVybW9zdENvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJmaW5kIiwiZGlycnVuc1VuaXF1ZSIsInBvcCIsInVuaXF1ZVNvcnQiLCJnZXRUZXh0IiwiaXNYTUwiLCJjb21waWxlIiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsInJidWdneU1hdGNoZXMiLCJjbGFzc0NhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJzb3J0T3JkZXIiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJjaGFyYWN0ZXJFbmNvZGluZyIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJjaGlsZE5vZGVzIiwiZWxzIiwibm9kZSIsImhhc0NvbXBhcmUiLCJwYXJlbnQiLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsImlubmVySFRNTCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwiYXR0ciIsInNwZWNpZmllZCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50Iiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJub2RlSW5kZXgiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInBzZXVkbyIsImlkeCIsIm1hdGNoZWQiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJyb290IiwiZm9jdXMiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJkaXNhYmxlZCIsInNlbGVjdGVkSW5kZXgiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInRva2VuIiwiY29tcGlsZWQiLCJkaXYxIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInNlbGYiLCJpcyIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJuZXh0IiwidW50aWwiLCJ0cnVuY2F0ZSIsIm4iLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInBvcyIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJzaWJsaW5ncyIsInJldmVyc2UiLCJDYWxsYmFja3MiLCJtZW1vcnkiLCJmaXJlZCIsImZpcmluZyIsImZpcmluZ1N0YXJ0IiwiZmlyaW5nTGVuZ3RoIiwiZmlyaW5nSW5kZXgiLCJzdGFjayIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJsb2NrIiwibG9ja2VkIiwiZmlyZVdpdGgiLCJ0dXBsZXMiLCJ0aGVuIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vdGlmeSIsInBpcGUiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzdWJvcmRpbmF0ZSIsInByb2dyZXNzVmFsdWVzIiwicHJvZ3Jlc3NDb250ZXh0cyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJ1cGRhdGVGdW5jIiwicmVhZHlMaXN0IiwicmVhZHlXYWl0IiwiaG9sZFJlYWR5IiwiaG9sZCIsIndhaXQiLCJ0cmlnZ2VySGFuZGxlciIsIm9mZiIsInJlYWR5U3RhdGUiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJhY2NlcHREYXRhIiwib3duZXIiLCJhY2NlcHRzIiwiZGVzY3JpcHRvciIsInVubG9jayIsImRlZmluZVByb3BlcnRpZXMiLCJzdG9yZWQiLCJjYW1lbCIsImRpc2NhcmQiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImNhbWVsS2V5IiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwiZWwiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJzdHJ1bmRlZmluZWQiLCJmb2N1c2luQnViYmxlcyIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicmZvY3VzTW9ycGgiLCJydHlwZW5hbWVzcGFjZSIsInR5cGVzIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsInQiLCJoYW5kbGVPYmoiLCJzcGVjaWFsIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJ0cmlnZ2VyIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImV2ZW50UGF0aCIsIkV2ZW50IiwiaXNUcmlnZ2VyIiwibmFtZXNwYWNlX3JlIiwibm9CdWJibGUiLCJwYXJlbnRXaW5kb3ciLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiX2RlZmF1bHQiLCJmaXgiLCJoYW5kbGVyUXVldWUiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwic2VsIiwiZml4SG9va3MiLCJrZXlIb29rcyIsIm9yaWdpbmFsIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwibW91c2VIb29rcyIsImV2ZW50RG9jIiwicGFnZVgiLCJjbGllbnRYIiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJwYWdlWSIsImNsaWVudFkiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJvcmlnaW5hbEV2ZW50IiwiZml4SG9vayIsImxvYWQiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInNpbXVsYXRlIiwiYnViYmxlIiwiaXNTaW11bGF0ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwidGltZVN0YW1wIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImF0dGFjaGVzIiwib24iLCJvbmUiLCJvcmlnRm4iLCJyeGh0bWxUYWciLCJydGFnTmFtZSIsInJodG1sIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyc2NyaXB0VHlwZSIsInJjbGVhblNjcmlwdCIsIndyYXBNYXAiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJ3cmFwIiwibm9kZXMiLCJjcmVhdGVUZXh0Tm9kZSIsImNsZWFuRGF0YSIsImFwcGVuZCIsImRvbU1hbmlwIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwia2VlcERhdGEiLCJodG1sIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJfZXZhbFVybCIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsImluc2VydCIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlIiwiY3NzVGV4dCIsImNvbnRhaW5lciIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5SaWdodCIsIm1hcmdpbkRpdiIsIm1hcmdpblJpZ2h0Iiwic3dhcCIsInJkaXNwbGF5c3dhcCIsInJyZWxOdW0iLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJjc3NOdW1iZXIiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJjc3NQcm9wcyIsImZsb2F0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZGVkIiwicGFydHMiLCJ1bml0IiwicHJvcEhvb2tzIiwiZWFzZWQiLCJzdGVwIiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJ0aW1lcklkIiwicmZ4bnVtIiwicnJ1biIsIioiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsIm9wdERpc2FibGVkIiwicmFkaW9WYWx1ZSIsIm5vZGVIb29rIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJwcm9wTmFtZSIsImF0dHJOYW1lcyIsInByb3BGaXgiLCJnZXR0ZXIiLCJyZm9jdXNhYmxlIiwicmVtb3ZlUHJvcCIsImZvciIsImNsYXNzIiwibm90eG1sIiwiaGFzQXR0cmlidXRlIiwicmNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicHJvY2VlZCIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwibm9uY2UiLCJycXVlcnkiLCJKU09OIiwicGFyc2UiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJoYXNoIiwicnRzIiwicmhlYWRlcnMiLCJybG9jYWxQcm90b2NvbCIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJydXJsIiwicHJlZmlsdGVycyIsImFsbFR5cGVzIiwiYWpheExvY2F0aW9uIiwiYWpheExvY1BhcnRzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1cyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJoZWFkZXJzIiwic3VjY2VzcyIsIm1vZGlmaWVkIiwic3RhdHVzVGV4dCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJyZXNwb25zZUhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJsbmFtZSIsIm92ZXJyaWRlTWltZVR5cGUiLCJhYm9ydCIsImZpbmFsVGV4dCIsIm1ldGhvZCIsImNyb3NzRG9tYWluIiwicGFyYW0iLCJoYXNDb250ZW50IiwiYmVmb3JlU2VuZCIsInNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGhyb3dzIiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsInIyMCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhocklkIiwieGhyQ2FsbGJhY2tzIiwieGhyU3VjY2Vzc1N0YXR1cyIsMTIyMywieGhyU3VwcG9ydGVkIiwiY29ycyIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJyZXNwb25zZVRleHQiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwiX2xvYWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJsZWZ0IiwidXNpbmciLCJ3aW4iLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwic2l6ZSIsImFuZFNlbGYiLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsInRyYW5zaXRpb25FbmQiLCJ0cmFuc0VuZEV2ZW50TmFtZXMiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwidHJhbnNpdGlvbiIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiY2FsbGVkIiwiJGVsIiwiYnNUcmFuc2l0aW9uRW5kIiwiUGx1Z2luIiwiJHRoaXMiLCJBbGVydCIsImRpc21pc3MiLCJWRVJTSU9OIiwiVFJBTlNJVElPTl9EVVJBVElPTiIsInJlbW92ZUVsZW1lbnQiLCIkcGFyZW50IiwiYWxlcnQiLCJDb25zdHJ1Y3RvciIsIkJ1dHRvbiIsInNldFN0YXRlIiwiZWxlbWVudCIsIiRlbGVtZW50IiwiREVGQVVMVFMiLCJpc0xvYWRpbmciLCJsb2FkaW5nVGV4dCIsImQiLCJyZXNldFRleHQiLCJjaGFuZ2VkIiwiJGlucHV0IiwiJGJ0biIsIkNhcm91c2VsIiwiYWN0aW9uIiwic2xpZGUiLCJwYXVzZSIsImN5Y2xlIiwiJGluZGljYXRvcnMiLCJwYXVzZWQiLCJzbGlkaW5nIiwiJGFjdGl2ZSIsIiRpdGVtcyIsImtleWJvYXJkIiwia2V5ZG93biIsInRhZ05hbWUiLCJnZXRJdGVtSW5kZXgiLCJpdGVtIiwiZ2V0SXRlbUZvckRpcmVjdGlvbiIsImRpcmVjdGlvbiIsImFjdGl2ZUluZGV4Iiwid2lsbFdyYXAiLCJkZWx0YSIsIml0ZW1JbmRleCIsInRoYXQiLCIkbmV4dCIsImlzQ3ljbGluZyIsInNsaWRlRXZlbnQiLCIkbmV4dEluZGljYXRvciIsInNsaWRFdmVudCIsImNhcm91c2VsIiwiY2xpY2tIYW5kbGVyIiwiJHRhcmdldCIsInNsaWRlSW5kZXgiLCIkY2Fyb3VzZWwiLCJnZXRUYXJnZXRGcm9tVHJpZ2dlciIsIiR0cmlnZ2VyIiwiQ29sbGFwc2UiLCJ0cmFuc2l0aW9uaW5nIiwiZ2V0UGFyZW50IiwiYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiZGltZW5zaW9uIiwiaGFzV2lkdGgiLCJhY3RpdmVzRGF0YSIsImFjdGl2ZXMiLCJzdGFydEV2ZW50Iiwic2Nyb2xsU2l6ZSIsImlzT3BlbiIsImNvbGxhcHNlIiwiY2xlYXJNZW51cyIsImJhY2tkcm9wIiwiRHJvcGRvd24iLCJpc0FjdGl2ZSIsImRlc2MiLCJkcm9wZG93biIsIl9yZWxhdGVkVGFyZ2V0IiwiTW9kYWwiLCIkYm9keSIsIiRkaWFsb2ciLCIkYmFja2Ryb3AiLCJpc1Nob3duIiwib3JpZ2luYWxCb2R5UGFkIiwic2Nyb2xsYmFyV2lkdGgiLCJpZ25vcmVCYWNrZHJvcENsaWNrIiwicmVtb3RlIiwiQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiIsImNoZWNrU2Nyb2xsYmFyIiwic2V0U2Nyb2xsYmFyIiwiZXNjYXBlIiwicmVzaXplIiwiYWRqdXN0RGlhbG9nIiwiZW5mb3JjZUZvY3VzIiwiaGlkZU1vZGFsIiwiaGFuZGxlVXBkYXRlIiwicmVzZXRBZGp1c3RtZW50cyIsInJlc2V0U2Nyb2xsYmFyIiwicmVtb3ZlQmFja2Ryb3AiLCJkb0FuaW1hdGUiLCJjYWxsYmFja1JlbW92ZSIsIm1vZGFsSXNPdmVyZmxvd2luZyIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInBhZGRpbmdMZWZ0IiwiYm9keUlzT3ZlcmZsb3dpbmciLCJwYWRkaW5nUmlnaHQiLCJmdWxsV2luZG93V2lkdGgiLCJpbm5lcldpZHRoIiwiZG9jdW1lbnRFbGVtZW50UmVjdCIsInJpZ2h0IiwiYWJzIiwiY2xpZW50V2lkdGgiLCJtZWFzdXJlU2Nyb2xsYmFyIiwiYm9keVBhZCIsInBhcnNlSW50Iiwic2Nyb2xsRGl2IiwibW9kYWwiLCJzaG93RXZlbnQiLCJUb29sdGlwIiwiaG92ZXJTdGF0ZSIsImluU3RhdGUiLCJwbGFjZW1lbnQiLCJ0ZW1wbGF0ZSIsInRpdGxlIiwidmlld3BvcnQiLCJnZXRPcHRpb25zIiwiJHZpZXdwb3J0IiwidHJpZ2dlcnMiLCJldmVudEluIiwiZXZlbnRPdXQiLCJlbnRlciIsImxlYXZlIiwiX29wdGlvbnMiLCJmaXhUaXRsZSIsImdldERlZmF1bHRzIiwiZ2V0RGVsZWdhdGVPcHRpb25zIiwiZGVmYXVsdHMiLCJ0aXAiLCJpc0luU3RhdGVUcnVlIiwiaW5Eb20iLCIkdGlwIiwidGlwSWQiLCJnZXRVSUQiLCJzZXRDb250ZW50IiwiYXV0b1Rva2VuIiwiYXV0b1BsYWNlIiwiZ2V0UG9zaXRpb24iLCJhY3R1YWxXaWR0aCIsImFjdHVhbEhlaWdodCIsIm9yZ1BsYWNlbWVudCIsInZpZXdwb3J0RGltIiwiYm90dG9tIiwiY2FsY3VsYXRlZE9mZnNldCIsImdldENhbGN1bGF0ZWRPZmZzZXQiLCJhcHBseVBsYWNlbWVudCIsInByZXZIb3ZlclN0YXRlIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsImlzTmFOIiwicm91bmQiLCJnZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEiLCJpc1ZlcnRpY2FsIiwiYXJyb3dEZWx0YSIsImFycm93T2Zmc2V0UG9zaXRpb24iLCJyZXBsYWNlQXJyb3ciLCJhcnJvdyIsImdldFRpdGxlIiwiJGUiLCJpc0JvZHkiLCJlbFJlY3QiLCJlbE9mZnNldCIsInNjcm9sbCIsIm91dGVyRGltcyIsInZpZXdwb3J0UGFkZGluZyIsInZpZXdwb3J0RGltZW5zaW9ucyIsInRvcEVkZ2VPZmZzZXQiLCJib3R0b21FZGdlT2Zmc2V0IiwibGVmdEVkZ2VPZmZzZXQiLCJyaWdodEVkZ2VPZmZzZXQiLCJvIiwiJGFycm93IiwiZW5hYmxlIiwidG9nZ2xlRW5hYmxlZCIsImRlc3Ryb3kiLCJ0b29sdGlwIiwiUG9wb3ZlciIsImdldENvbnRlbnQiLCJwb3BvdmVyIiwiU2Nyb2xsU3B5IiwiJHNjcm9sbEVsZW1lbnQiLCJvZmZzZXRzIiwiYWN0aXZlVGFyZ2V0IiwicHJvY2VzcyIsInJlZnJlc2giLCJnZXRTY3JvbGxIZWlnaHQiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiJGhyZWYiLCJtYXhTY3JvbGwiLCJhY3RpdmF0ZSIsImNsZWFyIiwic2Nyb2xsc3B5IiwiJHNweSIsIlRhYiIsIiR1bCIsIiRwcmV2aW91cyIsImhpZGVFdmVudCIsInRhYiIsIkFmZml4IiwiY2hlY2tQb3NpdGlvbiIsImNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wIiwiYWZmaXhlZCIsInVucGluIiwicGlubmVkT2Zmc2V0IiwiUkVTRVQiLCJnZXRTdGF0ZSIsIm9mZnNldFRvcCIsIm9mZnNldEJvdHRvbSIsInRhcmdldEhlaWdodCIsImluaXRpYWxpemluZyIsImNvbGxpZGVyVG9wIiwiY29sbGlkZXJIZWlnaHQiLCJnZXRQaW5uZWRPZmZzZXQiLCJhZmZpeCIsImFmZml4VHlwZSIsInkiLCJNIiwibmF2aWdhdG9yIiwidSIsIkUiLCJyZXF1aXJlIiwia28iLCJOIiwiTyIsIkoiLCJRIiwiUiIsImMiLCJTIiwiSyIsImsiLCJoIiwiZyIsIngiLCJxIiwiciIsIloiLCJvYSIsImxhIiwiVCIsIkphIiwibWEiLCJjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyIsImthIiwiZiIsIkQiLCJfX3Byb3RvX18iLCJnYSIsInVzZXJBZ2VudCIsIk1vdXNlRXZlbnRzIiwicHJvcGVydHljaGFuZ2UiLCJCYiIsInZiIiwieWEiLCJ3YiIsIkthIiwieGEiLCJpYSIsImNiIiwiemEiLCJGYSIsIkdhIiwiQSIsInBhIiwiUmEiLCJyZW1vdmVOb2RlIiwiSmIiLCJRYiIsIm5hIiwiU2IiLCJpYiIsIkRjIiwic3Vic3RyaW5nIiwiamMiLCJRYSIsInRiIiwiQyIsImZhIiwiZGV0YWNoRXZlbnQiLCJxYSIsImNyZWF0ZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImluaXRFdmVudCIsImZpcmVFdmVudCIsIkYiLCJCIiwiSWEiLCJjbGFzc0xpc3QiLCJiYXNlVmFsIiwiSGEiLCJtYyIsIlJiIiwibWVyZ2VBdHRyaWJ1dGVzIiwia2MiLCJCYyIsIkhjIiwiSWMiLCJEYiIsInljIiwiRnVuY3Rpb24iLCJqYiIsInN0cmluZ2lmeSIsInpjIiwiaW5jbHVkZUZpZWxkcyIsInN1Ym1pdHRlciIsImdldFRpbWUiLCJJIiwiY2xlYW5FeHRlcm5hbERhdGEiLDEsOCw5LCJQYiIsImNhIiwiY2xlYW4iLCJpbm5lclNoaXYiLCJnYiIsIkgiLCJMYiIsImljIiwid2MiLCIkYSIsIldiIiwiWGIiLCJTYSIsInRocm90dGxlIiwidGhyb3R0bGVFdmFsdWF0aW9uIiwicmVhZCIsInJhdGVMaW1pdCIsIlphIiwiZXF1YWxpdHlDb21wYXJlciIsImJvb2xlYW4iLCJudW1iZXIiLCJVYiIsImRhIiwiTGEiLCJoYyIsIkdiIiwiRyIsInJiIiwieiIsIlUiLCJ1YSIsImphIiwibm90aWZ5U3Vic2NyaWJlcnMiLCJZYiIsIkJhIiwieGIiLCJBYSIsInBjIiwidGEiLCJwYiIsInFiIiwiV2EiLCJuYyIsIkhiIiwiT2IiLCJhYyIsIkNhIiwiSmMiLCJHYyIsIlgiLCJXIiwiQWMiLCJUYSIsIkRhIiwicWMiLCJiYSIsInRyYWNrQXJyYXlDaGFuZ2VzIiwicmVtb3ZlQWxsIiwiX2Rlc3Ryb3kiLCJkZXN0cm95QWxsIiwieWIiLCJNYSIsInNwYXJzZSIsIm1pbiIsIkNiIiwic2EiLCJlYSIsIm5iIiwiZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkIiwiZGlzcG9zZVdoZW4iLCJQYSIsInB1cmUiLCJiYyIsImRlZmVyRXZhbHVhdGlvbiIsInNjIiwiTmIiLCJOdW1iZXIiLCJCb29sZWFuIiwic2F2ZSIsInRvSlNPTiIsIm1iIiwiVmIiLCJfX2tvX19oYXNEb21EYXRhT3B0aW9uVmFsdWVfXyIsImFiIiwiWSIsImNoYXJDb2RlQXQiLCJ1bmtub3duIiwic3Vic3RyIiwiaW4iLCJyZXR1cm4iLCJ0eXBlb2YiLCJWIiwiYmIiLCJFYSIsImdldEJpbmRpbmdIYW5kbGVyIiwicHJlcHJvY2VzcyIsInZhbHVlQWNjZXNzb3JzIiwiYmluZGluZ1BhcmFtcyIsInZjIiwicmEiLCJ1bCIsIm9sIiwiTWIiLCJGYiIsIm9jIiwiRmMiLCJLYiIsIkwiLCJlYyIsIm5vZGVIYXNCaW5kaW5ncyIsImdldENvbXBvbmVudE5hbWVGb3JOb2RlIiwiZ2V0QmluZGluZ3MiLCJnZXRCaW5kaW5nc1N0cmluZyIsInBhcnNlQmluZGluZ3NTdHJpbmciLCJzYiIsImdldEJpbmRpbmdBY2Nlc3NvcnMiLCJtZXNzYWdlIiwiaW5zdGFuY2UiLCJwcmVwcm9jZXNzTm9kZSIsInNob3VsZEJpbmREZXNjZW5kYW50cyIsIkViIiwiVGIiLCJ1cGRhdGUiLCIkZGF0YSIsInRleHRhcmVhIiwiJHBhcmVudHMiLCIkcm9vdCIsIiRyYXdEYXRhIiwiWmIiLCJjcmVhdGVDaGlsZENvbnRleHQiLCIkcGFyZW50Q29udGV4dCIsInZhIiwiY2MiLCJ1YiIsIk9hIiwiZ2MiLCJzeW5jaHJvbm91cyIsImRlZmluaXRpb24iLCJ0YyIsImxvYWRlcnMiLCJzdXBwcmVzc0xvYWRlckV4Y2VwdGlvbnMiLCJ6YiIsIm9iIiwidmlld01vZGVsIiwiRG9jdW1lbnRGcmFnbWVudCIsInJlZ2lzdGVyIiwiWGEiLCJFYyIsIkFiIiwiZ2V0Q29uZmlnIiwibG9hZENvbXBvbmVudCIsImxvYWRUZW1wbGF0ZSIsIkhUTUxFbGVtZW50IiwibG9hZFZpZXdNb2RlbCIsIiRiIiwiJHJhdyIsImNvbXBvbmVudCIsImNyZWF0ZVZpZXdNb2RlbCIsInRlbXBsYXRlTm9kZXMiLCJkaXNwb3NlIiwiJGNvbXBvbmVudCIsIiRjb21wb25lbnRUZW1wbGF0ZU5vZGVzIiwiUCIsInVuaXF1ZU5hbWUiLCJjaGVja2VkVmFsdWUiLCJfX2tvX19jc3NWYWx1ZSIsImNhbmNlbEJ1YmJsZSIsImZvcmVhY2giLCJJYiIsImFzIiwiaW5jbHVkZURlc3Ryb3llZCIsImFmdGVyQWRkIiwiYmVmb3JlUmVtb3ZlIiwiYWZ0ZXJSZW5kZXIiLCJiZWZvcmVNb3ZlIiwiYWZ0ZXJNb3ZlIiwidGVtcGxhdGVFbmdpbmUiLCJWYSIsImhhc2ZvY3VzIiwiX19rb19oYXNmb2N1c1VwZGF0aW5nIiwiX19rb19oYXNmb2N1c0xhc3RWYWx1ZSIsIm11bHRpcGxlIiwiZmIiLCJzZWxlY3RlZE9wdGlvbnMiLCJvcGVyYSIsInRleHRJbnB1dCIsInByb3BlcnR5TmFtZSIsInRleHRpbnB1dCIsImZjIiwiYXV0b2NvbXBsZXRlIiwiZm9ybSIsInJlbmRlclRlbXBsYXRlU291cmNlIiwiY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrIiwibWFrZVRlbXBsYXRlU291cmNlIiwiaGEiLCJyZW5kZXJUZW1wbGF0ZSIsImlzVGVtcGxhdGVSZXdyaXR0ZW4iLCJhbGxvd1RlbXBsYXRlUmV3cml0aW5nIiwicmV3cml0ZVRlbXBsYXRlIiwia2IiLCJsYyIsInhjIiwiZGMiLCJsYiIsIk5hIiwicHJldmlvdXNTaWJsaW5nIiwiaGIiLCJlYiIsIkNjIiwiJGluZGV4IiwiaWZub3QiLCJtb3ZlZCIsImRvbnRMaW1pdE1vdmVzIiwiYWEiLCJVYSIsIndhIiwicmMiLCJZYSIsInVjIiwidG1wbCIsImtvQmluZGluZ0NvbnRleHQiLCJ0ZW1wbGF0ZU9wdGlvbnMiLCJmcmFnbWVudHMiLCJhZGRUZW1wbGF0ZSIsImtvX2NvZGUiLCJrb193aXRoIiwiaW5pdEFsbCIsIm1vZGVsIiwibG9jYXRpb25zIiwiY29udGluZW50IiwiY291bnRyeSIsImNvdW50cnlfY29kZSIsImNpdHkiLCJtb250aCIsInllYXIiLCJsYXQiLCJsbmciLCJob3RlbCIsImFkZHJlc3MiLCJtYXJrZXIiLCJjb21wYW55IiwicGhvdG9zIiwiY29sdW1ucyIsImxheWVyIiwiTG9jYXRpb24iLCJvYnNlcnZhYmxlIiwib2JzZXJ2YWJsZUFycmF5IiwiaXNIaWRkZW5EZXRhaWxzIiwic2hvd0RldGFpbHMiLCJpbml0aWFsaXplIiwiaXNIaWRkZW5MZWZ0IiwiaXNIaWRkZW5SaWdodCIsInNlYXJjaFF1ZXJ5IiwiY29sdW1uc1RvU2VhcmNoIiwiY3VycmVudExvY2F0aW9uIiwiY3VycmVudFBob3RvcyIsImN1cnJlbnRCaWdQaG90byIsImJpZ1Bob3RvV2lkdGgiLCJiaWdQaG90b0hlaWdodCIsImluZm9IZWlnaHQiLCJwaG90b3NIZWlnaHQiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsImluaXRNYXAiLCJnb29nbGUiLCJtYXBzIiwiTWFwIiwiY2VudGVyIiwibWFwVHlwZUNvbnRyb2wiLCJtYXBUeXBlSWQiLCJNYXBUeXBlSWQiLCJST0FETUFQIiwibWFwVHlwZUNvbnRyb2xPcHRpb25zIiwiQ29udHJvbFBvc2l0aW9uIiwiQk9UVE9NX0NFTlRFUiIsInpvb21Db250cm9sIiwiem9vbUNvbnRyb2xPcHRpb25zIiwiTEVGVF9DRU5URVIiLCJzdHJlZXRWaWV3Q29udHJvbCIsInN0cmVldFZpZXdDb250cm9sT3B0aW9ucyIsInBsYWNlcyIsIkF1dG9jb21wbGV0ZSIsImZpbGxDb3VudHJpZXMiLCJhZGRNYXJrZXJzIiwibG9jIiwiTWFya2VyIiwiRFJPUCIsInNldEljb24iLCJjb3VudHJpZXNBcnJheSIsImNvdW50cmllcyIsImNudHIiLCJGVF9UYWJsZUlEIiwiRnVzaW9uVGFibGVzTGF5ZXIiLCJxdWVyeSIsImZyb20iLCJ3aGVyZSIsInBvbHlnb25PcHRpb25zIiwiZmlsbENvbG9yIiwic2V0TWFwIiwiY2xpY2tNYXJrZXIiLCJ1dGlscyIsImFycmF5Rm9yRWFjaCIsImxvY2F0aW9uc0xpc3QiLCJhZGRMaXN0ZW5lciIsImdldEFuaW1hdGlvbiIsInNldEFuaW1hdGlvbiIsIkJPVU5DRSIsInNldFpvb20iLCJteUxhdExuZyIsIkxhdExuZyIsInNldENlbnRlciIsImFkZEluZm9XaW5kb3ciLCJ3aWtpVXJsIiwiaGFuZGxlV2lraSIsImFqYXhPcHRpb25zIiwidGhyb3duRXJyb3IiLCJhcnRpY2xlTGlzdCIsIndpa2lBcnRpY2xlTGlzdCIsImFydGljbGUiLCJ3aWtpQWJvdXRVcmwiLCJoYW5kbGVXaWtpQWJvdXQiLCJhcnRpY2xlT2JqZWN0S2V5cyIsInBhZ2VzIiwid2lraUFydGljbGUiLCJleHRyYWN0IiwiaW5mb3dpbmRvdyIsIkluZm9XaW5kb3ciLCJmb3JFYWNoIiwibG9jYXRpb25JdGVtIiwicGhvdG9zV2lkdGgiLCJmaWx0ZXJlZEl0ZW1zIiwic2V0VmlzaWJsZSIsImFycmF5RmlsdGVyIiwibWF0Y2hpbmciLCJ0b2dnbGVIaWRkZW5SaWdodCIsInRvZ2dsZUhpZGRlbkxlZnQiLCJzaG93TWFya2VyIiwiZnVsbE1hcCIsInNob3dQaG90b3MiLCJwaG90b3NldHMiLCJoYW5kbGVQaG90b3NldHMiLCJyZXNwb25zZURhdGEiLCJwaG90b3NldHNMaXN0IiwicGhvdG9zZXQiLCJfY29udGVudCIsInBob3Rvc2V0SWQiLCJnZXRQaG90b3MiLCJpbWdBbHQiLCJpbWdTcmMiLCJpbWdTaXplIiwiZGV0ZXJtaW5lQmlnU2l6ZSIsInNldEJpZ1Bob3RvU2l6ZSIsImhhbmRsZVBob3RvcyIsInNpZGUiLCJwaG90b1NpemUiLCJmaXJzdFBob3RvIiwicGhvdG8iLCJmYXJtIiwic2VydmVyIiwic2VjcmV0IiwicGgiLCJjaGFuZ2VCaWdQaG90byIsImltZyIsIkltYWdlIiwidm0iLCJhcHBseUJpbmRpbmdzIl0sIm1hcHBpbmdzIjoiQ0FjQyxTQUFVQSxFQUFRQyxHQUVLLGdCQUFYQyxTQUFpRCxnQkFBbkJBLFFBQU9DLFFBUWhERCxPQUFPQyxRQUFVSCxFQUFPSSxTQUN2QkgsRUFBU0QsR0FBUSxHQUNqQixTQUFVSyxHQUNULElBQU1BLEVBQUVELFNBQ1AsS0FBTSxJQUFJRSxPQUFPLDJDQUVsQixPQUFPTCxHQUFTSSxJQUdsQkosRUFBU0QsSUFJUyxtQkFBWE8sUUFBeUJBLE9BQVNDLEtBQU0sU0FBVUQsRUFBUUUsR0ErZW5FLFFBQVNDLEdBQWFDLEdBTXJCLEdBQUlDLEdBQVMsVUFBWUQsSUFBT0EsRUFBSUMsT0FDbkNDLEVBQU9DLEVBQU9ELEtBQU1GLEVBRXJCLE9BQWMsYUFB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LEVBQUtra0MsZUFBZS8rQyxHQUNaOFosRUFBTXZsQixFQUFFOEgsRUFBUXlkLEVBQU0rdkIsRUFBRTdwQyxFQUNoQzZhLEVBQUtra0MsZUFBZS8rQyxHQUVwQjZhLEVBQUtpa0MsY0FBY3ppRCxJQUdyQmtwRCxFQUFJM3JELElBQU0wNEIsSUFJUm16QixFQUFLLEdBQUk3TixFQUNiek8sSUFBR3VjLGNBQWNEIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2Mi4xLjRcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAwNSwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE1LTA0LTI4VDE2OjAxWlxuICovXG5cbihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXG4vLyBDYW4ndCBiZSBpbiBzdHJpY3QgbW9kZSwgc2V2ZXJhbCBsaWJzIGluY2x1ZGluZyBBU1AuTkVUIHRyYWNlXG4vLyB0aGUgc3RhY2sgdmlhIGFyZ3VtZW50cy5jYWxsZXIuY2FsbGVlIGFuZCBGaXJlZm94IGRpZXMgaWZcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcbi8vXG5cbnZhciBhcnIgPSBbXTtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG52YXJcblx0Ly8gVXNlIHRoZSBjb3JyZWN0IGRvY3VtZW50IGFjY29yZGluZ2x5IHdpdGggd2luZG93IGFyZ3VtZW50IChzYW5kYm94KVxuXHRkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCxcblxuXHR2ZXJzaW9uID0gXCIyLjEuNFwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW1xcZGEtel0pL2dpLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gU3RhcnQgd2l0aCBhbiBlbXB0eSBzZWxlY3RvclxuXHRzZWxlY3RvcjogXCJcIixcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cblxuXHRcdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxuXG5cdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdC8vIChZb3UgY2FuIHNlZWQgdGhlIGFyZ3VtZW50cyB3aXRoIGFuIGFycmF5IG9mIGFyZ3MsIGJ1dCB0aGlzIGlzXG5cdC8vIG9ubHkgdXNlZCBpbnRlcm5hbGx5Lilcblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrLCBhcmdzICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2ssIGFyZ3MgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAodGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0pKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzW2pdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKG51bGwpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24odGFyZ2V0KSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoIChvcHRpb25zID0gYXJndW1lbnRzWyBpIF0pICE9IG51bGwgKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheShjb3B5KSkgKSApIHtcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUob2JqKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXxcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQvLyBhZGRpbmcgMSBjb3JyZWN0cyBsb3NzIG9mIHByZWNpc2lvbiBmcm9tIHBhcnNlRmxvYXQgKCMxNTEwMClcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0FycmF5KCBvYmogKSAmJiAob2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKyAxKSA+PSAwO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0Ly8gTm90IHBsYWluIG9iamVjdHM6XG5cdFx0Ly8gLSBBbnkgb2JqZWN0IG9yIHZhbHVlIHdob3NlIGludGVybmFsIFtbQ2xhc3NdXSBwcm9wZXJ0eSBpcyBub3QgXCJbb2JqZWN0IE9iamVjdF1cIlxuXHRcdC8vIC0gRE9NIG5vZGVzXG5cdFx0Ly8gLSB3aW5kb3dcblx0XHRpZiAoIGpRdWVyeS50eXBlKCBvYmogKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIFwiaXNQcm90b3R5cGVPZlwiICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlIGZ1bmN0aW9uIGhhc24ndCByZXR1cm5lZCBhbHJlYWR5LCB3ZSdyZSBjb25maWRlbnQgdGhhdFxuXHRcdC8vIHxvYmp8IGlzIGEgcGxhaW4gb2JqZWN0LCBjcmVhdGVkIGJ5IHt9IG9yIGNvbnN0cnVjdGVkIHdpdGggbmV3IE9iamVjdFxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMCwgaU9TPDYgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdHZhciBzY3JpcHQsXG5cdFx0XHRpbmRpcmVjdCA9IGV2YWw7XG5cblx0XHRjb2RlID0galF1ZXJ5LnRyaW0oIGNvZGUgKTtcblxuXHRcdGlmICggY29kZSApIHtcblx0XHRcdC8vIElmIHRoZSBjb2RlIGluY2x1ZGVzIGEgdmFsaWQsIHByb2xvZ3VlIHBvc2l0aW9uXG5cdFx0XHQvLyBzdHJpY3QgbW9kZSBwcmFnbWEsIGV4ZWN1dGUgY29kZSBieSBpbmplY3RpbmcgYVxuXHRcdFx0Ly8gc2NyaXB0IHRhZyBpbnRvIHRoZSBkb2N1bWVudC5cblx0XHRcdGlmICggY29kZS5pbmRleE9mKFwidXNlIHN0cmljdFwiKSA9PT0gMSApIHtcblx0XHRcdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcblx0XHRcdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBPdGhlcndpc2UsIGF2b2lkIHRoZSBET00gbm9kZSBjcmVhdGlvbiwgaW5zZXJ0aW9uXG5cdFx0XHQvLyBhbmQgcmVtb3ZhbCBieSB1c2luZyBhbiBpbmRpcmVjdCBnbG9iYWwgZXZhbFxuXHRcdFx0XHRpbmRpcmVjdCggY29kZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdC8vIGFyZ3MgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBvYmogKTtcblxuXHRcdGlmICggYXJncyApIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlsaWtlKCBPYmplY3QoYXJyKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRpc0FycmF5ID0gaXNBcnJheWxpa2UoIGVsZW1zICksXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5ICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSk7XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbihpLCBuYW1lKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlsaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogaU9TIDguMiAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9IFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggb2JqLm5vZGVUeXBlID09PSAxICYmIGxlbmd0aCApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4yLjAtcHJlXG4gKiBodHRwOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCAyMDA4LCAyMDE0IGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTQtMTItMTZcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEdlbmVyYWwtcHVycG9zZSBjb25zdGFudHNcblx0TUFYX05FR0FUSVZFID0gMSA8PCAzMSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cDovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gV2hpdGVzcGFjZSBjaGFyYWN0ZXJzIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc3ludGF4LyNjaGFyYWN0ZXJzXG5cdGNoYXJhY3RlckVuY29kaW5nID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcblxuXHQvLyBMb29zZWx5IG1vZGVsZWQgb24gQ1NTIGlkZW50aWZpZXIgY2hhcmFjdGVyc1xuXHQvLyBBbiB1bnF1b3RlZCB2YWx1ZSBzaG91bGQgYmUgYSBDU1MgaWRlbnRpZmllciBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHQvLyBQcm9wZXIgc3ludGF4OiBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IGNoYXJhY3RlckVuY29kaW5nLnJlcGxhY2UoIFwid1wiLCBcIncjXCIgKSxcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBjaGFyYWN0ZXJFbmNvZGluZy5yZXBsYWNlKCBcIndcIiwgXCJ3KlwiICkgKyBcIilcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblx0cmVzY2FwZSA9IC8nfFxcXFwvZyxcblxuXHQvLyBDU1MgZXNjYXBlcyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH07XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG1hdGNoLCBlbGVtLCBtLCBub2RlVHlwZSxcblx0XHQvLyBRU0EgdmFyc1xuXHRcdGksIGdyb3Vwcywgb2xkLCBuaWQsIG5ld0NvbnRleHQsIG5ld1NlbGVjdG9yO1xuXG5cdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblx0bm9kZVR5cGUgPSBjb250ZXh0Lm5vZGVUeXBlO1xuXG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0aWYgKCAhc2VlZCAmJiBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgd2hlbiBwb3NzaWJsZSAoZS5nLiwgbm90IHVuZGVyIERvY3VtZW50RnJhZ21lbnQpXG5cdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIjSURcIilcblx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKTtcblx0XHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xuXHRcdFx0XHRcdC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKGpRdWVyeSAjNjk2Mylcblx0XHRcdFx0XHRpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFLCBPcGVyYSwgYW5kIFdlYmtpdCByZXR1cm4gaXRlbXNcblx0XHRcdFx0XHRcdC8vIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBDb250ZXh0IGlzIG5vdCBhIGRvY3VtZW50XG5cdFx0XHRcdFx0aWYgKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgJiYgKGVsZW0gPSBjb250ZXh0Lm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiYgZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCJUQUdcIilcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiLkNMQVNTXCIpXG5cdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFFTQSBwYXRoXG5cdFx0aWYgKCBzdXBwb3J0LnFzYSAmJiAoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXHRcdFx0bmlkID0gb2xkID0gZXhwYW5kbztcblx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0bmV3U2VsZWN0b3IgPSBub2RlVHlwZSAhPT0gMSAmJiBzZWxlY3RvcjtcblxuXHRcdFx0Ly8gcVNBIHdvcmtzIHN0cmFuZ2VseSBvbiBFbGVtZW50LXJvb3RlZCBxdWVyaWVzXG5cdFx0XHQvLyBXZSBjYW4gd29yayBhcm91bmQgdGhpcyBieSBzcGVjaWZ5aW5nIGFuIGV4dHJhIElEIG9uIHRoZSByb290XG5cdFx0XHQvLyBhbmQgd29ya2luZyB1cCBmcm9tIHRoZXJlIChUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhlIHRlY2huaXF1ZSlcblx0XHRcdC8vIElFIDggZG9lc24ndCB3b3JrIG9uIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJiBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXG5cdFx0XHRcdGlmICggKG9sZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKFwiaWRcIikpICkge1xuXHRcdFx0XHRcdG5pZCA9IG9sZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgbmlkICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmlkID0gXCJbaWQ9J1wiICsgbmlkICsgXCInXSBcIjtcblxuXHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0Z3JvdXBzW2ldID0gbmlkICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHQ7XG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oXCIsXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoKHFzYUVycm9yKSB7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCAhb2xkICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge0Z1bmN0aW9uKHN0cmluZywgT2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBkaXYgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGRpdi5wYXJlbnROb2RlICkge1xuXHRcdFx0ZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGRpdiA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdCggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLVxuXHRcdFx0KCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgcGFyZW50LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBJZiBubyBkb2N1bWVudCBhbmQgZG9jdW1lbnRFbGVtZW50IGlzIGF2YWlsYWJsZSwgcmV0dXJuXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gU2V0IG91ciBkb2N1bWVudFxuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdHBhcmVudCA9IGRvYy5kZWZhdWx0VmlldztcblxuXHQvLyBTdXBwb3J0OiBJRT44XG5cdC8vIElmIGlmcmFtZSBkb2N1bWVudCBpcyBhc3NpZ25lZCB0byBcImRvY3VtZW50XCIgdmFyaWFibGUgYW5kIGlmIGlmcmFtZSBoYXMgYmVlbiByZWxvYWRlZCxcblx0Ly8gSUUgd2lsbCB0aHJvdyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBhY2Nlc3NpbmcgXCJkb2N1bWVudFwiIHZhcmlhYmxlLCBzZWUgalF1ZXJ5ICMxMzkzNlxuXHQvLyBJRTYtOCBkbyBub3Qgc3VwcG9ydCB0aGUgZGVmYXVsdFZpZXcgcHJvcGVydHkgc28gcGFyZW50IHdpbGwgYmUgdW5kZWZpbmVkXG5cdGlmICggcGFyZW50ICYmIHBhcmVudCAhPT0gcGFyZW50LnRvcCApIHtcblx0XHQvLyBJRTExIGRvZXMgbm90IGhhdmUgYXR0YWNoRXZlbnQsIHNvIGFsbCBtdXN0IHN1ZmZlclxuXHRcdGlmICggcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblx0XHR9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIFN1cHBvcnQgdGVzdHNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jICk7XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWRpdi5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvYy5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jLmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXG5cdFx0XHRcdC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgIzY5NjNcblx0XHRcdFx0cmV0dXJuIG0gJiYgbS5wYXJlbnROb2RlID8gWyBtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRkZWxldGUgRXhwci5maW5kW1wiSURcIl07XG5cblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jLnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxmXScgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuMissIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS43K1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2liaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsIFwiZGl2XCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBkaXYsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgZG9lcyBub3QgaW1wbGVtZW50IGluY2x1c2l2ZSBkZXNjZW5kZW50XG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvYyB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvYyB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2MgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2M7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIGRpZmYsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gcGFyZW50WyBleHBhbmRvIF0gfHwgKHBhcmVudFsgZXhwYW5kbyBdID0ge30pO1xuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMV07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsyXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB1c2VDYWNoZSAmJiAoY2FjaGUgPSAoZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0pICYmIGNhY2hlWzBdID09PSBkaXJydW5zICkge1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gY2FjaGVbMV07XG5cblx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLikgb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkgJiYgKytkaWZmICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0KG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XG5cdFx0fSxcblxuXHRcdFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gZGlyIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXHRcdFx0XHRcdFx0aWYgKCAob2xkQ2FjaGUgPSBvdXRlckNhY2hlWyBkaXIgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgZGlyIF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ICE9PSBkb2N1bWVudCAmJiBjb250ZXh0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gS2VlcCBgaWAgYSBzdHJpbmcgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzIHNvIGBtYXRjaGVkQ291bnRgIHdpbGwgYmUgXCIwMFwiIGJlbG93XG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBubyBzZWVkIGFuZCBvbmx5IG9uZSBncm91cFxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFRha2UgYSBzaG9ydGN1dCBhbmQgc2V0IHRoZSBjb250ZXh0IGlmIHRoZSByb290IHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0c3VwcG9ydC5nZXRCeUlkICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHRcdFx0RXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0cnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYxICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGRpdjEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRyZXR1cm4gZGl2LmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5qUXVlcnkuZXhwcltcIjpcIl0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICgvXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8pO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0pO1xuXG5cdH1cblxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0XHR9XG5cblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID49IDAgKSAhPT0gbm90O1xuXHR9KTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdHJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA/XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDpcblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdFx0fSkpO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSkgKTtcblx0XHR9XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKVxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQgKTtcblx0XHRyZXQuc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yID8gdGhpcy5zZWxlY3RvciArIFwiIFwiICsgc2VsZWN0b3IgOiBzZWxlY3Rvcjtcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyh0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UpICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0pO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclswXSA9PT0gXCI8XCIgJiYgc2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiYgc2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWzFdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFswXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWzFdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWzFdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWzJdICk7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBCbGFja2JlcnJ5IDQuNlxuXHRcdFx0XHRcdC8vIGdFQklEIHJldHVybnMgbm9kZXMgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoIzY5NjMpXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0XHR0aGlzWzBdID0gZWxlbTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLmNvbnRleHQgPSBkb2N1bWVudDtcblx0XHRcdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3RqUXVlcnkgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSB0aGlzWzBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiB0eXBlb2Ygcm9vdGpRdWVyeS5yZWFkeSAhPT0gXCJ1bmRlZmluZWRcIiA/XG5cdFx0XHRcdHJvb3RqUXVlcnkucmVhZHkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3Iuc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSBzZWxlY3Rvci5jb250ZXh0O1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRkaXI6IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHRcdHZhciBtYXRjaGVkID0gW10sXG5cdFx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBtYXRjaGVkO1xuXHR9LFxuXG5cdHNpYmxpbmc6IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHRcdHZhciBtYXRjaGVkID0gW107XG5cblx0XHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVkO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzW2ldICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHBvcyA9IHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3JzLCBjb250ZXh0IHx8IHRoaXMuY29udGV4dCApIDpcblx0XHRcdFx0MDtcblxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGZvciAoIGN1ciA9IHRoaXNbaV07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAocG9zID9cblx0XHRcdFx0XHRwb3MuaW5kZXgoY3VyKSA+IC0xIDpcblxuXHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKGN1ciwgc2VsZWN0b3JzKSkgKSB7XG5cblx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlKCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWUoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcihzZWxlY3Rvcilcblx0XHQpO1xuXHR9XG59KTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKGN1ciA9IGN1cltkaXJdKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCh7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnNpYmxpbmcoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5zaWJsaW5nKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudCB8fCBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZSggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0pO1xudmFyIHJub3R3aGl0ZSA9ICgvXFxTKy9nKTtcblxuXG5cbi8vIFN0cmluZyB0byBPYmplY3Qgb3B0aW9ucyBmb3JtYXQgY2FjaGVcbnZhciBvcHRpb25zQ2FjaGUgPSB7fTtcblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXMgYW5kIHN0b3JlIGluIGNhY2hlXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0gb3B0aW9uc0NhY2hlWyBvcHRpb25zIF0gPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0pO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdCggb3B0aW9uc0NhY2hlWyBvcHRpb25zIF0gfHwgY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIExhc3QgZmlyZSB2YWx1ZSAoZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0cylcblx0XHRtZW1vcnksXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXHRcdC8vIEZpcnN0IGNhbGxiYWNrIHRvIGZpcmUgKHVzZWQgaW50ZXJuYWxseSBieSBhZGQgYW5kIGZpcmVXaXRoKVxuXHRcdGZpcmluZ1N0YXJ0LFxuXHRcdC8vIEVuZCBvZiB0aGUgbG9vcCB3aGVuIGZpcmluZ1xuXHRcdGZpcmluZ0xlbmd0aCxcblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSByZW1vdmUgaWYgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4LFxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXHRcdC8vIFN0YWNrIG9mIGZpcmUgY2FsbHMgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRzdGFjayA9ICFvcHRpb25zLm9uY2UgJiYgW10sXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdFx0XHRtZW1vcnkgPSBvcHRpb25zLm1lbW9yeSAmJiBkYXRhO1xuXHRcdFx0ZmlyZWQgPSB0cnVlO1xuXHRcdFx0ZmlyaW5nSW5kZXggPSBmaXJpbmdTdGFydCB8fCAwO1xuXHRcdFx0ZmlyaW5nU3RhcnQgPSAwO1xuXHRcdFx0ZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBsaXN0ICYmIGZpcmluZ0luZGV4IDwgZmlyaW5nTGVuZ3RoOyBmaXJpbmdJbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIGRhdGFbIDAgXSwgZGF0YVsgMSBdICkgPT09IGZhbHNlICYmIG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7IC8vIFRvIHByZXZlbnQgZnVydGhlciBjYWxscyB1c2luZyBhZGRcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdGlmICggc3RhY2sgKSB7XG5cdFx0XHRcdFx0aWYgKCBzdGFjay5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCBzdGFjay5zaGlmdCgpICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNlbGYuZGlzYWJsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0Ly8gRmlyc3QsIHdlIHNhdmUgdGhlIGN1cnJlbnQgbGVuZ3RoXG5cdFx0XHRcdFx0dmFyIHN0YXJ0ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0KGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KSggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0Ly8gRG8gd2UgbmVlZCB0byBhZGQgdGhlIGNhbGxiYWNrcyB0byB0aGVcblx0XHRcdFx0XHQvLyBjdXJyZW50IGZpcmluZyBiYXRjaD9cblx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0xlbmd0aCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdC8vIFdpdGggbWVtb3J5LCBpZiB3ZSdyZSBub3QgZmlyaW5nIHRoZW5cblx0XHRcdFx0XHQvLyB3ZSBzaG91bGQgY2FsbCByaWdodCBhd2F5XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nU3RhcnQgPSBzdGFydDtcblx0XHRcdFx0XHRcdGZpcmUoIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nTGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlyaW5nTGVuZ3RoLS07XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gPyBqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDogISEoIGxpc3QgJiYgbGlzdC5sZW5ndGggKTtcblx0XHRcdH0sXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0ZmlyaW5nTGVuZ3RoID0gMDtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gSGF2ZSB0aGUgbGlzdCBkbyBub3RoaW5nIGFueW1vcmVcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsaXN0ID0gc3RhY2sgPSBtZW1vcnkgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIElzIGl0IGRpc2FibGVkP1xuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gTG9jayB0aGUgbGlzdCBpbiBpdHMgY3VycmVudCBzdGF0ZVxuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHN0YWNrID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgKSB7XG5cdFx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gSXMgaXQgbG9ja2VkP1xuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFzdGFjaztcblx0XHRcdH0sXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggbGlzdCAmJiAoICFmaXJlZCB8fCBzdGFjayApICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRzdGFjay5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGZpcmUoIGFyZ3MgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmpRdWVyeS5leHRlbmQoe1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgbGlzdGVuZXIgbGlzdCwgZmluYWwgc3RhdGVcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgXCJyZWplY3RlZFwiIF0sXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKFwibWVtb3J5XCIpIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZChmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIGkgXSApICYmIGZuc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZFsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdIGZvciBmb3J3YXJkaW5nIGFjdGlvbnMgdG8gbmV3RGVmZXJcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzFdIF0oZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IHByb21pc2UgPyBuZXdEZWZlci5wcm9taXNlKCkgOiB0aGlzLCBmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdHByb21pc2UucGlwZSA9IHByb21pc2UudGhlbjtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDMgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZVsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWzFdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQvLyBzdGF0ZSA9IFsgcmVzb2x2ZWQgfCByZWplY3RlZCBdXG5cdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblxuXHRcdFx0XHQvLyBbIHJlamVjdF9saXN0IHwgcmVzb2x2ZV9saXN0IF0uZGlzYWJsZTsgcHJvZ3Jlc3NfbGlzdC5sb2NrXG5cdFx0XHRcdH0sIHR1cGxlc1sgaSBeIDEgXVsgMiBdLmRpc2FibGUsIHR1cGxlc1sgMiBdWyAyIF0ubG9jayApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBkZWZlcnJlZFsgcmVzb2x2ZSB8IHJlamVjdCB8IG5vdGlmeSBdXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHByb21pc2UgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzdWJvcmRpbmF0ZSAvKiAsIC4uLiwgc3Vib3JkaW5hdGVOICovICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblx0XHRcdGxlbmd0aCA9IHJlc29sdmVWYWx1ZXMubGVuZ3RoLFxuXG5cdFx0XHQvLyB0aGUgY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBsZW5ndGggIT09IDEgfHwgKCBzdWJvcmRpbmF0ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggc3Vib3JkaW5hdGUucHJvbWlzZSApICkgPyBsZW5ndGggOiAwLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkLiBJZiByZXNvbHZlVmFsdWVzIGNvbnNpc3Qgb2Ygb25seSBhIHNpbmdsZSBEZWZlcnJlZCwganVzdCB1c2UgdGhhdC5cblx0XHRcdGRlZmVycmVkID0gcmVtYWluaW5nID09PSAxID8gc3Vib3JkaW5hdGUgOiBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gVXBkYXRlIGZ1bmN0aW9uIGZvciBib3RoIHJlc29sdmUgYW5kIHByb2dyZXNzIHZhbHVlc1xuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpLCBjb250ZXh0cywgdmFsdWVzICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdGNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggdmFsdWVzID09PSBwcm9ncmVzc1ZhbHVlcyApIHtcblx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9LFxuXG5cdFx0XHRwcm9ncmVzc1ZhbHVlcywgcHJvZ3Jlc3NDb250ZXh0cywgcmVzb2x2ZUNvbnRleHRzO1xuXG5cdFx0Ly8gQWRkIGxpc3RlbmVycyB0byBEZWZlcnJlZCBzdWJvcmRpbmF0ZXM7IHRyZWF0IG90aGVycyBhcyByZXNvbHZlZFxuXHRcdGlmICggbGVuZ3RoID4gMSApIHtcblx0XHRcdHByb2dyZXNzVmFsdWVzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdHByb2dyZXNzQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHQuZG9uZSggdXBkYXRlRnVuYyggaSwgcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICkgKVxuXHRcdFx0XHRcdFx0LmZhaWwoIGRlZmVycmVkLnJlamVjdCApXG5cdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIHVwZGF0ZUZ1bmMoIGksIHByb2dyZXNzQ29udGV4dHMsIHByb2dyZXNzVmFsdWVzICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQtLXJlbWFpbmluZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIElmIHdlJ3JlIG5vdCB3YWl0aW5nIG9uIGFueXRoaW5nLCByZXNvbHZlIHRoZSBtYXN0ZXJcblx0XHRpZiAoICFyZW1haW5pbmcgKSB7XG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcblx0fVxufSk7XG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0O1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cdC8vIEFkZCB0aGUgY2FsbGJhY2tcblx0alF1ZXJ5LnJlYWR5LnByb21pc2UoKS5kb25lKCBmbiApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudFxuXHRob2xkUmVhZHk6IGZ1bmN0aW9uKCBob2xkICkge1xuXHRcdGlmICggaG9sZCApIHtcblx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblxuXHRcdC8vIFRyaWdnZXIgYW55IGJvdW5kIHJlYWR5IGV2ZW50c1xuXHRcdGlmICggalF1ZXJ5LmZuLnRyaWdnZXJIYW5kbGVyICkge1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLnRyaWdnZXJIYW5kbGVyKCBcInJlYWR5XCIgKTtcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS5vZmYoIFwicmVhZHlcIiApO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qKlxuICogVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbiAqL1xuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbmpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHtcblx0aWYgKCAhcmVhZHlMaXN0ICkge1xuXG5cdFx0cmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cblx0XHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZCBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cblx0XHQvLyBXZSBvbmNlIHRyaWVkIHRvIHVzZSByZWFkeVN0YXRlIFwiaW50ZXJhY3RpdmVcIiBoZXJlLCBidXQgaXQgY2F1c2VkIGlzc3VlcyBsaWtlIHRoZSBvbmVcblx0XHQvLyBkaXNjb3ZlcmVkIGJ5IENocmlzUyBoZXJlOiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjI4MiNjb21tZW50OjE1XG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgKSB7XG5cdFx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHRcdHNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblxuXHRcdFx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVhZHlMaXN0LnByb21pc2UoIG9iaiApO1xufTtcblxuLy8gS2ljayBvZmYgdGhlIERPTSByZWFkeSBjaGVjayBldmVuIGlmIHRoZSB1c2VyIGRvZXMgbm90XG5qUXVlcnkucmVhZHkucHJvbWlzZSgpO1xuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGpRdWVyeS5hY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGpRdWVyeS5hY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5W2ldLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbiggZWxlbXNbaV0sIGtleSwgcmF3ID8gdmFsdWUgOiB2YWx1ZS5jYWxsKCBlbGVtc1tpXSwgaSwgZm4oIGVsZW1zW2ldLCBrZXkgKSApICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNoYWluYWJsZSA/XG5cdFx0ZWxlbXMgOlxuXG5cdFx0Ly8gR2V0c1xuXHRcdGJ1bGsgP1xuXHRcdFx0Zm4uY2FsbCggZWxlbXMgKSA6XG5cdFx0XHRsZW4gPyBmbiggZWxlbXNbMF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIG9iamVjdCBjYW4gaGF2ZSBkYXRhXG4gKi9cbmpRdWVyeS5hY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0LyoganNoaW50IC1XMDE4ICovXG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LFxuXHQvLyBPbGQgV2ViS2l0IGRvZXMgbm90IGhhdmUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zL2ZyZWV6ZSBtZXRob2QsXG5cdC8vIHJldHVybiBuZXcgZW1wdHkgb2JqZWN0IGluc3RlYWQgd2l0aCBubyBbW3NldF1dIGFjY2Vzc29yXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcy5jYWNoZSA9IHt9LCAwLCB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB7fTtcblx0XHR9XG5cdH0pO1xuXG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuRGF0YS5hY2NlcHRzID0galF1ZXJ5LmFjY2VwdERhdGE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXHRrZXk6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdC8vIEFsd2F5cyByZXR1cm4gdGhlIGtleSBmb3IgYSBmcm96ZW4gb2JqZWN0LlxuXHRcdGlmICggIURhdGEuYWNjZXB0cyggb3duZXIgKSApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBkZXNjcmlwdG9yID0ge30sXG5cdFx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGUga2V5XG5cdFx0XHR1bmxvY2sgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF1bmxvY2sgKSB7XG5cdFx0XHR1bmxvY2sgPSBEYXRhLnVpZCsrO1xuXG5cdFx0XHQvLyBTZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSwgbm9uLXdyaXRhYmxlIHByb3BlcnR5XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkZXNjcmlwdG9yWyB0aGlzLmV4cGFuZG8gXSA9IHsgdmFsdWU6IHVubG9jayB9O1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggb3duZXIsIGRlc2NyaXB0b3IgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0XG5cdFx0XHQvLyBGYWxsYmFjayB0byBhIGxlc3Mgc2VjdXJlIGRlZmluaXRpb25cblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRkZXNjcmlwdG9yWyB0aGlzLmV4cGFuZG8gXSA9IHVubG9jaztcblx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggb3duZXIsIGRlc2NyaXB0b3IgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhlIGNhY2hlIG9iamVjdFxuXHRcdGlmICggIXRoaXMuY2FjaGVbIHVubG9jayBdICkge1xuXHRcdFx0dGhpcy5jYWNoZVsgdW5sb2NrIF0gPSB7fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdW5sb2NrO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHQvLyBUaGVyZSBtYXkgYmUgYW4gdW5sb2NrIGFzc2lnbmVkIHRvIHRoaXMgbm9kZSxcblx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIGVudHJ5IGZvciB0aGlzIFwib3duZXJcIiwgY3JlYXRlIG9uZSBpbmxpbmVcblx0XHRcdC8vIGFuZCBzZXQgdGhlIHVubG9jayBhcyB0aG91Z2ggYW4gb3duZXIgZW50cnkgaGFkIGFsd2F5cyBleGlzdGVkXG5cdFx0XHR1bmxvY2sgPSB0aGlzLmtleSggb3duZXIgKSxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZVsgdW5sb2NrIF07XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBkYXRhIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEZyZXNoIGFzc2lnbm1lbnRzIGJ5IG9iamVjdCBhcmUgc2hhbGxvdyBjb3BpZWRcblx0XHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5leHRlbmQoIHRoaXMuY2FjaGVbIHVubG9jayBdLCBkYXRhICk7XG5cdFx0XHQvLyBPdGhlcndpc2UsIGNvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0Y2FjaGVbIHByb3AgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0Ly8gRWl0aGVyIGEgdmFsaWQgY2FjaGUgaXMgZm91bmQsIG9yIHdpbGwgYmUgY3JlYXRlZC5cblx0XHQvLyBOZXcgY2FjaGVzIHdpbGwgYmUgY3JlYXRlZCBhbmQgdGhlIHVubG9jayByZXR1cm5lZCxcblx0XHQvLyBhbGxvd2luZyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBuZXdseSBjcmVhdGVkXG5cdFx0Ly8gZW1wdHkgZGF0YSBvYmplY3QuIEEgdmFsaWQgb3duZXIgb2JqZWN0IG11c3QgYmUgcHJvdmlkZWQuXG5cdFx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZVsgdGhpcy5rZXkoIG93bmVyICkgXTtcblxuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRjYWNoZSA6IGNhY2hlWyBrZXkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIHN0b3JlZDtcblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoKGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSApIHtcblxuXHRcdFx0c3RvcmVkID0gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblxuXHRcdFx0cmV0dXJuIHN0b3JlZCAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0c3RvcmVkIDogdGhpcy5nZXQoIG93bmVyLCBqUXVlcnkuY2FtZWxDYXNlKGtleSkgKTtcblx0XHR9XG5cblx0XHQvLyBbKl1XaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGNhbWVsLFxuXHRcdFx0dW5sb2NrID0gdGhpcy5rZXkoIG93bmVyICksXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGVbIHVubG9jayBdO1xuXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuY2FjaGVbIHVubG9jayBdID0ge307XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXG5cdFx0XHRcdC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XG5cdFx0XHRcdC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxuXHRcdFx0XHRuYW1lID0ga2V5LmNvbmNhdCgga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjYW1lbCA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXHRcdFx0XHQvLyBUcnkgdGhlIHN0cmluZyBhcyBhIGtleSBiZWZvcmUgYW55IG1hbmlwdWxhdGlvblxuXHRcdFx0XHRpZiAoIGtleSBpbiBjYWNoZSApIHtcblx0XHRcdFx0XHRuYW1lID0gWyBrZXksIGNhbWVsIF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0bmFtZSA9IGNhbWVsO1xuXHRcdFx0XHRcdG5hbWUgPSBuYW1lIGluIGNhY2hlID9cblx0XHRcdFx0XHRcdFsgbmFtZSBdIDogKCBuYW1lLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBuYW1lLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIG5hbWVbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHJldHVybiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoXG5cdFx0XHR0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXSB8fCB7fVxuXHRcdCk7XG5cdH0sXG5cdGRpc2NhcmQ6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHRpZiAoIG93bmVyWyB0aGlzLmV4cGFuZG8gXSApIHtcblx0XHRcdGRlbGV0ZSB0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXTtcblx0XHR9XG5cdH1cbn07XG52YXIgZGF0YV9wcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFfdXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvKFtBLVpdKS9nO1xuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJDFcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGRhdGEgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJmYWxzZVwiID8gZmFsc2UgOlxuXHRcdFx0XHRcdGRhdGEgPT09IFwibnVsbFwiID8gbnVsbCA6XG5cdFx0XHRcdFx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0XHRcdFx0XHQrZGF0YSArIFwiXCIgPT09IGRhdGEgPyArZGF0YSA6XG5cdFx0XHRcdFx0cmJyYWNlLnRlc3QoIGRhdGEgKSA/IGpRdWVyeS5wYXJzZUpTT04oIGRhdGEgKSA6XG5cdFx0XHRcdFx0ZGF0YTtcblx0XHRcdH0gY2F0Y2goIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFfdXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhX3VzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFfcHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFfdXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhX3VzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YV9wcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFfcHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTExK1xuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSg1KSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhX3ByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhX3VzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhLFxuXHRcdFx0XHRjYW1lbEtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGFzLWlzXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBjYW1lbGl6ZWRcblx0XHRcdFx0ZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0sIGNhbWVsS2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGNhbWVsS2V5LCB1bmRlZmluZWQgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIEZpcnN0LCBhdHRlbXB0IHRvIHN0b3JlIGEgY29weSBvciByZWZlcmVuY2Ugb2YgYW55XG5cdFx0XHRcdC8vIGRhdGEgdGhhdCBtaWdodCd2ZSBiZWVuIHN0b3JlIHdpdGggYSBjYW1lbENhc2VkIGtleS5cblx0XHRcdFx0dmFyIGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCB0aGlzLCBjYW1lbEtleSApO1xuXG5cdFx0XHRcdC8vIEZvciBIVE1MNSBkYXRhLSogYXR0cmlidXRlIGludGVyb3AsIHdlIGhhdmUgdG9cblx0XHRcdFx0Ly8gc3RvcmUgcHJvcGVydHkgbmFtZXMgd2l0aCBkYXNoZXMgaW4gYSBjYW1lbENhc2UgZm9ybS5cblx0XHRcdFx0Ly8gVGhpcyBtaWdodCBub3QgYXBwbHkgdG8gYWxsIHByb3BlcnRpZXMuLi4qXG5cdFx0XHRcdGRhdGFfdXNlci5zZXQoIHRoaXMsIGNhbWVsS2V5LCB2YWx1ZSApO1xuXG5cdFx0XHRcdC8vICouLi4gSW4gdGhlIGNhc2Ugb2YgcHJvcGVydGllcyB0aGF0IG1pZ2h0IF9hY3R1YWxseV9cblx0XHRcdFx0Ly8gaGF2ZSBkYXNoZXMsIHdlIG5lZWQgdG8gYWxzbyBzdG9yZSBhIGNvcHkgb2YgdGhhdFxuXHRcdFx0XHQvLyB1bmNoYW5nZWQgcHJvcGVydHkuXG5cdFx0XHRcdGlmICgga2V5LmluZGV4T2YoXCItXCIpICE9PSAtMSAmJiBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0ZGF0YV91c2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhX3VzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9KTtcblx0fVxufSk7XG5cblxualF1ZXJ5LmV4dGVuZCh7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoZGF0YSkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YV9wcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YV9wcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLmFkZChmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSlcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1swXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWzBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59KTtcbnZhciBwbnVtID0gKC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvKS5zb3VyY2U7XG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8ICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHR9O1xuXG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoL14oPzpjaGVja2JveHxyYWRpbykkL2kpO1xuXG5cblxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogU2FmYXJpPD01LjFcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaTw9NS4xLCBBbmRyb2lkPDQuMlxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0pKCk7XG52YXIgc3RydW5kZWZpbmVkID0gdHlwZW9mIHVuZGVmaW5lZDtcblxuXG5cbnN1cHBvcnQuZm9jdXNpbkJ1YmJsZXMgPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudSl8Y2xpY2svLFxuXHRyZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkkLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YV9wcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUpICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gc3RydW5kZWZpbmVkICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoe1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbihcIi5cIilcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHwgc3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YV9wcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhX3ByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsyXSAmJiBuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8IHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRlbGV0ZSBlbGVtRGF0YS5oYW5kbGU7XG5cdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBcImV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdChcIi5cIikgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoXCIuXCIpID49IDAgKSB7XG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdChcIi5cIik7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZihcIjpcIikgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbihcIi5cIik7XG5cdFx0ZXZlbnQubmFtZXNwYWNlX3JlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKGN1ciA9IGV2ZW50UGF0aFtpKytdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YV9wcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmIGRhdGFfcHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBqUXVlcnkuYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCFzcGVjaWFsLl9kZWZhdWx0IHx8IHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSkgJiZcblx0XHRcdFx0alF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YV9wcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWzBdID0gZXZlbnQ7XG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAobWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoIChoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSkgJiYgIWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQubmFtZXNwYWNlX3JlIHx8IGV2ZW50Lm5hbWVzcGFjZV9yZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9KS5oYW5kbGUgfHwgaGFuZGxlT2JqLmhhbmRsZXIgKVxuXHRcdFx0XHRcdFx0XHQuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKGV2ZW50LnJlc3VsdCA9IHJldCkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgbWF0Y2hlcywgc2VsLCBoYW5kbGVPYmosXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICgjMTMxODApXG5cdFx0Ly8gQXZvaWQgbm9uLWxlZnQtY2xpY2sgYnViYmxpbmcgaW4gRmlyZWZveCAoIzM4NjEpXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmIGN1ci5ub2RlVHlwZSAmJiAoIWV2ZW50LmJ1dHRvbiB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIpICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIuZGlzYWJsZWQgIT09IHRydWUgfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiICkge1xuXHRcdFx0XHRcdG1hdGNoZXMgPSBbXTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID49IDAgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZXMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVzIH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0Ly8gSW5jbHVkZXMgc29tZSBldmVudCBwcm9wcyBzaGFyZWQgYnkgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnRcblx0cHJvcHM6IFwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZXZlbnRQaGFzZSBtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoXCIuc3BsaXQoXCIgXCIpLFxuXG5cdGZpeEhvb2tzOiB7fSxcblxuXHRrZXlIb29rczoge1xuXHRcdHByb3BzOiBcImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGVcIi5zcGxpdChcIiBcIiksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSBvcmlnaW5hbC5jaGFyQ29kZSAhPSBudWxsID8gb3JpZ2luYWwuY2hhckNvZGUgOiBvcmlnaW5hbC5rZXlDb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXHR9LFxuXG5cdG1vdXNlSG9va3M6IHtcblx0XHRwcm9wczogXCJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnRcIi5zcGxpdChcIiBcIiksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXHRcdFx0dmFyIGV2ZW50RG9jLCBkb2MsIGJvZHksXG5cdFx0XHRcdGJ1dHRvbiA9IG9yaWdpbmFsLmJ1dHRvbjtcblxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZVxuXHRcdFx0aWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnREb2MgPSBldmVudC50YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcblx0XHRcdFx0ZG9jID0gZXZlbnREb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0XHRib2R5ID0gZXZlbnREb2MuYm9keTtcblxuXHRcdFx0XHRldmVudC5wYWdlWCA9IG9yaWdpbmFsLmNsaWVudFggKyAoIGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7XG5cdFx0XHRcdGV2ZW50LnBhZ2VZID0gb3JpZ2luYWwuY2xpZW50WSArICggZG9jICYmIGRvYy5zY3JvbGxUb3AgIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgIHx8IDAgKSAtICggZG9jICYmIGRvYy5jbGllbnRUb3AgIHx8IGJvZHkgJiYgYm9keS5jbGllbnRUb3AgIHx8IDAgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdFx0Ly8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXRcblx0XHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRldmVudC53aGljaCA9ICggYnV0dG9uICYgMSA/IDEgOiAoIGJ1dHRvbiAmIDIgPyAzIDogKCBidXR0b24gJiA0ID8gMiA6IDAgKSApICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSApIHtcblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgYSB3cml0YWJsZSBjb3B5IG9mIHRoZSBldmVudCBvYmplY3QgYW5kIG5vcm1hbGl6ZSBzb21lIHByb3BlcnRpZXNcblx0XHR2YXIgaSwgcHJvcCwgY29weSxcblx0XHRcdHR5cGUgPSBldmVudC50eXBlLFxuXHRcdFx0b3JpZ2luYWxFdmVudCA9IGV2ZW50LFxuXHRcdFx0Zml4SG9vayA9IHRoaXMuZml4SG9va3NbIHR5cGUgXTtcblxuXHRcdGlmICggIWZpeEhvb2sgKSB7XG5cdFx0XHR0aGlzLmZpeEhvb2tzWyB0eXBlIF0gPSBmaXhIb29rID1cblx0XHRcdFx0cm1vdXNlRXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5tb3VzZUhvb2tzIDpcblx0XHRcdFx0cmtleUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMua2V5SG9va3MgOlxuXHRcdFx0XHR7fTtcblx0XHR9XG5cdFx0Y29weSA9IGZpeEhvb2sucHJvcHMgPyB0aGlzLnByb3BzLmNvbmNhdCggZml4SG9vay5wcm9wcyApIDogdGhpcy5wcm9wcztcblxuXHRcdGV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXG5cdFx0aSA9IGNvcHkubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0cHJvcCA9IGNvcHlbIGkgXTtcblx0XHRcdGV2ZW50WyBwcm9wIF0gPSBvcmlnaW5hbEV2ZW50WyBwcm9wIF07XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQ29yZG92YSAyLjUgKFdlYktpdCkgKCMxMzI1NSlcblx0XHQvLyBBbGwgZXZlbnRzIHNob3VsZCBoYXZlIGEgdGFyZ2V0OyBDb3Jkb3ZhIGRldmljZXJlYWR5IGRvZXNuJ3Rcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBkb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wKywgQ2hyb21lPDI4XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHRpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmaXhIb29rLmZpbHRlciA/IGZpeEhvb2suZmlsdGVyKCBldmVudCwgb3JpZ2luYWxFdmVudCApIDogZXZlbnQ7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQsIGJ1YmJsZSApIHtcblx0XHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmUuXG5cdFx0Ly8gRmFrZSBvcmlnaW5hbEV2ZW50IHRvIGF2b2lkIGRvbm9yJ3Mgc3RvcFByb3BhZ2F0aW9uLCBidXQgaWYgdGhlXG5cdFx0Ly8gc2ltdWxhdGVkIGV2ZW50IHByZXZlbnRzIGRlZmF1bHQgdGhlbiB3ZSBkbyB0aGUgc2FtZSBvbiB0aGUgZG9ub3IuXG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlLFxuXHRcdFx0XHRvcmlnaW5hbEV2ZW50OiB7fVxuXHRcdFx0fVxuXHRcdCk7XG5cdFx0aWYgKCBidWJibGUgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guY2FsbCggZWxlbSwgZSApO1xuXHRcdH1cblx0XHRpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUsIGZhbHNlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQpICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiBlLnByZXZlbnREZWZhdWx0ICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmIGUuc3RvcFByb3BhZ2F0aW9uICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTUrXG5qUXVlcnkuZWFjaCh7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSk7XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3gsIENocm9tZSwgU2FmYXJpXG4vLyBDcmVhdGUgXCJidWJibGluZ1wiIGZvY3VzIGFuZCBibHVyIGV2ZW50c1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luQnViYmxlcyApIHtcblx0alF1ZXJ5LmVhY2goeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSwgdHJ1ZSApO1xuXHRcdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YV9wcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSk7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgLypJTlRFUk5BTCovIG9uZSApIHtcblx0XHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdFx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vbiggdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblx0XHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRcdGZuID0gZGF0YTtcblx0XHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICggb25lID09PSAxICkge1xuXHRcdFx0b3JpZ0ZuID0gZm47XG5cdFx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHR9O1xuXHRcdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0XHR9KTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID8gaGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDogaGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSk7XG5cdH0sXG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbMF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59KTtcblxuXG52YXJcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLFxuXHRydGFnTmFtZSA9IC88KFtcXHc6XSspLyxcblx0cmh0bWwgPSAvPHwmIz9cXHcrOy8sXG5cdHJub0lubmVyaHRtbCA9IC88KD86c2NyaXB0fHN0eWxlfGxpbmspL2ksXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJzY3JpcHRUeXBlID0gL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nLFxuXG5cdC8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG5cdHdyYXBNYXAgPSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHRcdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0XHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHRcdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0XHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0XHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cblx0fTtcblxuLy8gU3VwcG9ydDogSUU5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogMS54IGNvbXBhdGliaWxpdHlcbi8vIE1hbmlwdWxhdGluZyB0YWJsZXMgcmVxdWlyZXMgYSB0Ym9keVxuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSA/XG5cblx0XHRlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGJvZHlcIilbMF0gfHxcblx0XHRcdGVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIikgKSA6XG5cdFx0ZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSAhPT0gbnVsbCkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YV9wcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sIFwiZ2xvYmFsRXZhbFwiLCAhcmVmRWxlbWVudHMgfHwgZGF0YV9wcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YV9wcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YV9wcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhX3ByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhX3VzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhX3VzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YV91c2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblx0dmFyIHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPyBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKSA6XG5cdFx0XHRjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgPyBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApIDpcblx0XHRcdFtdO1xuXG5cdHJldHVybiB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSA/XG5cdFx0alF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICkgOlxuXHRcdHJldDtcbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cDovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRidWlsZEZyYWdtZW50OiBmdW5jdGlvbiggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiApIHtcblx0XHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRcdG5vZGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdCwgUGhhbnRvbUpTXG5cdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApO1xuXG5cdFx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBlbGVtLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXQsIFBoYW50b21KU1xuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdFx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IG5vZGVzWyBpKysgXSkgKSB7XG5cblx0XHRcdC8vICM0MDg3IC0gSWYgb3JpZ2luIGFuZCBkZXN0aW5hdGlvbiBlbGVtZW50cyBhcmUgdGhlIHNhbWUsIGFuZCB0aGlzIGlzXG5cdFx0XHQvLyB0aGF0IGVsZW1lbnQsIGRvIG5vdCBkbyBhbnl0aGluZ1xuXHRcdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApICE9PSAtMSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSB0bXBbIGorKyBdKSApIHtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZnJhZ21lbnQ7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsIGtleSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IGVsZW1zWyBpIF0pICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0a2V5ID0gZWxlbVsgZGF0YV9wcml2LmV4cGFuZG8gXTtcblxuXHRcdFx0XHRpZiAoIGtleSAmJiAoZGF0YSA9IGRhdGFfcHJpdi5jYWNoZVsga2V5IF0pICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIGRhdGFfcHJpdi5jYWNoZVsga2V5IF0gKSB7XG5cdFx0XHRcdFx0XHQvLyBEaXNjYXJkIGFueSByZW1haW5pbmcgYHByaXZhdGVgIGRhdGFcblx0XHRcdFx0XHRcdGRlbGV0ZSBkYXRhX3ByaXYuY2FjaGVbIGtleSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gRGlzY2FyZCBhbnkgcmVtYWluaW5nIGB1c2VyYCBkYXRhXG5cdFx0XHRkZWxldGUgZGF0YV91c2VyLmNhY2hlWyBlbGVtWyBkYXRhX3VzZXIuZXhwYW5kbyBdIF07XG5cdFx0fVxuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCBrZWVwRGF0YSAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGVsZW1zID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgdGhpcyApIDogdGhpcyxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoICFrZWVwRGF0YSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0gKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IChlbGVtID0gdGhpc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhcmcgPSBhcmd1bWVudHNbIDAgXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRhcmcgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cblx0XHRcdGlmICggYXJnICkge1xuXHRcdFx0XHRhcmcucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBGb3JjZSByZW1vdmFsIGlmIHRoZXJlIHdhcyBubyBuZXcgY29udGVudCAoZS5nLiwgZnJvbSBlbXB0eSBhcmd1bWVudHMpXG5cdFx0cmV0dXJuIGFyZyAmJiAoYXJnLmxlbmd0aCB8fCBhcmcubm9kZVR5cGUpID8gdGhpcyA6IHRoaXMucmVtb3ZlKCk7XG5cdH0sXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdGRvbU1hbmlwOiBmdW5jdGlvbiggYXJncywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHRcdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2V0ID0gdGhpcyxcblx0XHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRcdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHRcdHZhciBzZWxmID0gc2V0LmVxKCBpbmRleCApO1xuXHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5kb21NYW5pcCggYXJncywgY2FsbGJhY2sgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICggbCApIHtcblx0XHRcdGZyYWdtZW50ID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIGFyZ3MsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgdGhpcyApO1xuXHRcdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGZpcnN0ICkge1xuXHRcdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdFxuXHRcdFx0XHRcdFx0XHQvLyBqUXVlcnkubWVyZ2UgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjYWxsYmFjay5jYWxsKCB0aGlzWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdFx0IWRhdGFfcHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiYgalF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Ncblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSk7XG5cblxudmFyIGlmcmFtZSxcblx0ZWxlbWRpc3BsYXkgPSB7fTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgYWN0dWFsIGRpc3BsYXkgb2YgYSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBub2RlTmFtZSBvZiB0aGUgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBEb2N1bWVudCBvYmplY3RcbiAqL1xuLy8gQ2FsbGVkIG9ubHkgZnJvbSB3aXRoaW4gZGVmYXVsdERpc3BsYXlcbmZ1bmN0aW9uIGFjdHVhbERpc3BsYXkoIG5hbWUsIGRvYyApIHtcblx0dmFyIHN0eWxlLFxuXHRcdGVsZW0gPSBqUXVlcnkoIGRvYy5jcmVhdGVFbGVtZW50KCBuYW1lICkgKS5hcHBlbmRUbyggZG9jLmJvZHkgKSxcblxuXHRcdC8vIGdldERlZmF1bHRDb21wdXRlZFN0eWxlIG1pZ2h0IGJlIHJlbGlhYmx5IHVzZWQgb25seSBvbiBhdHRhY2hlZCBlbGVtZW50XG5cdFx0ZGlzcGxheSA9IHdpbmRvdy5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSAmJiAoIHN0eWxlID0gd2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlKCBlbGVtWyAwIF0gKSApID9cblxuXHRcdFx0Ly8gVXNlIG9mIHRoaXMgbWV0aG9kIGlzIGEgdGVtcG9yYXJ5IGZpeCAobW9yZSBsaWtlIG9wdGltaXphdGlvbikgdW50aWwgc29tZXRoaW5nIGJldHRlciBjb21lcyBhbG9uZyxcblx0XHRcdC8vIHNpbmNlIGl0IHdhcyByZW1vdmVkIGZyb20gc3BlY2lmaWNhdGlvbiBhbmQgc3VwcG9ydGVkIG9ubHkgaW4gRkZcblx0XHRcdHN0eWxlLmRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtWyAwIF0sIFwiZGlzcGxheVwiICk7XG5cblx0Ly8gV2UgZG9uJ3QgaGF2ZSBhbnkgZGF0YSBzdG9yZWQgb24gdGhlIGVsZW1lbnQsXG5cdC8vIHNvIHVzZSBcImRldGFjaFwiIG1ldGhvZCBhcyBmYXN0IHdheSB0byBnZXQgcmlkIG9mIHRoZSBlbGVtZW50XG5cdGVsZW0uZGV0YWNoKCk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbi8qKlxuICogVHJ5IHRvIGRldGVybWluZSB0aGUgZGVmYXVsdCBkaXNwbGF5IHZhbHVlIG9mIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBub2RlTmFtZVxuICovXG5mdW5jdGlvbiBkZWZhdWx0RGlzcGxheSggbm9kZU5hbWUgKSB7XG5cdHZhciBkb2MgPSBkb2N1bWVudCxcblx0XHRkaXNwbGF5ID0gZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF07XG5cblx0aWYgKCAhZGlzcGxheSApIHtcblx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xuXG5cdFx0Ly8gSWYgdGhlIHNpbXBsZSB3YXkgZmFpbHMsIHJlYWQgZnJvbSBpbnNpZGUgYW4gaWZyYW1lXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiB8fCAhZGlzcGxheSApIHtcblxuXHRcdFx0Ly8gVXNlIHRoZSBhbHJlYWR5LWNyZWF0ZWQgaWZyYW1lIGlmIHBvc3NpYmxlXG5cdFx0XHRpZnJhbWUgPSAoaWZyYW1lIHx8IGpRdWVyeSggXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIgKSkuYXBwZW5kVG8oIGRvYy5kb2N1bWVudEVsZW1lbnQgKTtcblxuXHRcdFx0Ly8gQWx3YXlzIHdyaXRlIGEgbmV3IEhUTUwgc2tlbGV0b24gc28gV2Via2l0IGFuZCBGaXJlZm94IGRvbid0IGNob2tlIG9uIHJldXNlXG5cdFx0XHRkb2MgPSBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQ7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFXG5cdFx0XHRkb2Mud3JpdGUoKTtcblx0XHRcdGRvYy5jbG9zZSgpO1xuXG5cdFx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xuXHRcdFx0aWZyYW1lLmRldGFjaCgpO1xuXHRcdH1cblxuXHRcdC8vIFN0b3JlIHRoZSBjb3JyZWN0IGRlZmF1bHQgZGlzcGxheVxuXHRcdGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdID0gZGlzcGxheTtcblx0fVxuXG5cdHJldHVybiBkaXNwbGF5O1xufVxudmFyIHJtYXJnaW4gPSAoL15tYXJnaW4vKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0Ly8gU3VwcG9ydDogSUU8PTExKywgRmlyZWZveDw9MzArICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHRpZiAoIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5vcGVuZXIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gU3VwcG9ydDogSUU5XG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgb25seSBuZWVkZWQgZm9yIC5jc3MoJ2ZpbHRlcicpICgjMTI1MzcpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cdH1cblxuXHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBpT1MgPCA2XG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIGlPUyA8IDYgKGF0IGxlYXN0KSByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIGEgbGFyZ2VyIHNldCBvZiB2YWx1ZXMsIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHNcblx0XHQvLyB0aGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6IGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cdFx0Ly8gU3VwcG9ydDogSUVcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICh0aGlzLmdldCA9IGhvb2tGbikuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG4oZnVuY3Rpb24oKSB7XG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCxcblx0XHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O21hcmdpbi10b3A6MXB4O1wiICtcblx0XHRcInBvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUoKSB7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcblx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbi10b3A6MSU7dG9wOjElO1wiICtcblx0XHRcdFwiYm9yZGVyOjFweDtwYWRkaW5nOjFweDt3aWR0aDo0cHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYsIG51bGwgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY0VsZW0ucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogbm9kZS5qcyBqc2RvbVxuXHQvLyBEb24ndCBhc3N1bWUgdGhhdCBnZXRDb21wdXRlZFN0eWxlIGlzIGEgcHJvcGVydHkgb2YgdGhlIGdsb2JhbCBvYmplY3Rcblx0aWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBUaGlzIHRlc3QgaXMgZXhlY3V0ZWQgb25seSBvbmNlIGJ1dCB3ZSBzdGlsbCBkbyBtZW1vaXppbmdcblx0XHRcdFx0Ly8gc2luY2Ugd2UgY2FuIHVzZSB0aGUgYm94U2l6aW5nUmVsaWFibGUgcHJlLWNvbXB1dGluZy5cblx0XHRcdFx0Ly8gTm8gbmVlZCB0byBjaGVjayBpZiB0aGUgdGVzdCB3YXMgYWxyZWFkeSBwZXJmb3JtZWQsIHRob3VnaC5cblx0XHRcdFx0Y29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpO1xuXHRcdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHRcdH0sXG5cdFx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdFx0fSxcblx0XHRcdHJlbGlhYmxlTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIENoZWNrIGlmIGRpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcblx0XHRcdFx0Ly8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyLiAoIzMzMzMpXG5cdFx0XHRcdC8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodFxuXHRcdFx0XHQvLyBUaGlzIHN1cHBvcnQgZnVuY3Rpb24gaXMgb25seSBleGVjdXRlZCBvbmNlIHNvIG5vIG1lbW9pemluZyBpcyBuZWVkZWQuXG5cdFx0XHRcdHZhciByZXQsXG5cdFx0XHRcdFx0bWFyZ2luRGl2ID0gZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyOyBwYWRkaW5nXG5cdFx0XHRcdG1hcmdpbkRpdi5zdHlsZS5jc3NUZXh0ID0gZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdFx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O1wiICtcblx0XHRcdFx0XHRcImJveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjBcIjtcblx0XHRcdFx0bWFyZ2luRGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gbWFyZ2luRGl2LnN0eWxlLndpZHRoID0gXCIwXCI7XG5cdFx0XHRcdGRpdi5zdHlsZS53aWR0aCA9IFwiMXB4XCI7XG5cdFx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0XHRcdHJldCA9ICFwYXJzZUZsb2F0KCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggbWFyZ2luRGl2LCBudWxsICkubWFyZ2luUmlnaHQgKTtcblxuXHRcdFx0XHRkb2NFbGVtLnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblx0XHRcdFx0ZGl2LnJlbW92ZUNoaWxkKCBtYXJnaW5EaXYgKTtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59KSgpO1xuXG5cbi8vIEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBnZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMuXG5qUXVlcnkuc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhclxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRybnVtc3BsaXQgPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKC4qKSRcIiwgXCJpXCIgKSxcblx0cnJlbE51bSA9IG5ldyBSZWdFeHAoIFwiXihbKy1dKT0oXCIgKyBwbnVtICsgXCIpXCIsIFwiaVwiICksXG5cblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBzdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLFxuXHRcdG9yaWdOYW1lID0gbmFtZSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb3JpZ05hbWU7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cdHZhciBtYXRjaGVzID0gcm51bXNwbGl0LmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAxIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAyIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpID0gZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSA/XG5cdFx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdFx0NCA6XG5cdFx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHRcdG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXG5cdFx0dmFsID0gMDtcblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuXHRcdHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gU29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXG5cdC8vIHN2ZyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY0OTI4NVxuXHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2Njhcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3Nhcnlcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QodmFsKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdH1cblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YV9wcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKTtcblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblx0XHRcdC8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXNcblx0XHRcdC8vIGJlaW5nIGhpZGRlbiBieSBjYXNjYWRlZCBydWxlcyBvciBub3Rcblx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSAmJiBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGVsZW1lbnRzIHdoaWNoIGhhdmUgYmVlbiBvdmVycmlkZGVuIHdpdGggZGlzcGxheTogbm9uZVxuXHRcdFx0Ly8gaW4gYSBzdHlsZXNoZWV0IHRvIHdoYXRldmVyIHRoZSBkZWZhdWx0IGJyb3dzZXIgc3R5bGUgaXNcblx0XHRcdC8vIGZvciBzdWNoIGFuIGVsZW1lbnRcblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBkZWZhdWx0RGlzcGxheShlbGVtLm5vZGVOYW1lKSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRoaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApO1xuXG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XG5cdFx0XHRcdGRhdGFfcHJpdi5zZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBoaWRkZW4gPyBkaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiBtb3N0IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wXG5cdC8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRpZiAoICFzaG93IHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/IHZhbHVlc1sgaW5kZXggXSB8fCBcIlwiIDogXCJub25lXCI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG9yaWdOYW1lICkgKTtcblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKHJldCA9IHJyZWxOdW0uZXhlYyggdmFsdWUgKSkgKSB7XG5cdFx0XHRcdHZhbHVlID0gKCByZXRbMV0gKyAxICkgKiByZXRbMl0gKyBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICkgKTtcblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciwgYWRkICdweCcgdG8gdGhlIChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gKSB7XG5cdFx0XHRcdHZhbHVlICs9IFwicHhcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgIShcInNldFwiIGluIGhvb2tzKSB8fCAodmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8ICggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIGVsZW0uc3R5bGUsIG9yaWdOYW1lICkgKTtcblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgalF1ZXJ5LmlzTnVtZXJpYyggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJiBlbGVtLm9mZnNldFdpZHRoID09PSAwID9cblx0XHRcdFx0XHRqUXVlcnkuc3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgZXh0cmEgP1xuXHRcdFx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KSA6IDBcblx0XHRcdCk7XG5cdFx0fVxuXHR9O1xufSk7XG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luUmlnaHQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnN3YXAoIGVsZW0sIHsgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIgfSxcblx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCh7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdChcIiBcIikgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW4oIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59KTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgXCJzd2luZ1wiO1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJlxuXHRcdFx0XHQoIXR3ZWVuLmVsZW0uc3R5bGUgfHwgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwpICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLnN0eWxlICYmICggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8IGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUU5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9XG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBDb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgdGltZXJJZCxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJmeG51bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICksXG5cdHJydW4gPSAvcXVldWVIb29rcyQvLFxuXHRhbmltYXRpb25QcmVmaWx0ZXJzID0gWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cdHR3ZWVuZXJzID0ge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICksXG5cdFx0XHRcdHRhcmdldCA9IHR3ZWVuLmN1cigpLFxuXHRcdFx0XHRwYXJ0cyA9IHJmeG51bS5leGVjKCB2YWx1ZSApLFxuXHRcdFx0XHR1bml0ID0gcGFydHMgJiYgcGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdFx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdFx0XHRzdGFydCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiArdGFyZ2V0ICkgJiZcblx0XHRcdFx0XHRyZnhudW0uZXhlYyggalF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgcHJvcCApICksXG5cdFx0XHRcdHNjYWxlID0gMSxcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDIwO1xuXG5cdFx0XHRpZiAoIHN0YXJ0ICYmIHN0YXJ0WyAzIF0gIT09IHVuaXQgKSB7XG5cdFx0XHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHRcdFx0dW5pdCA9IHVuaXQgfHwgc3RhcnRbIDMgXTtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0XHRcdHBhcnRzID0gcGFydHMgfHwgW107XG5cblx0XHRcdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRcdFx0c3RhcnQgPSArdGFyZ2V0IHx8IDE7XG5cblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRcdFx0c3RhcnQgPSBzdGFydCAvIHNjYWxlO1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgcHJvcCwgc3RhcnQgKyB1bml0ICk7XG5cblx0XHRcdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKCksXG5cdFx0XHRcdC8vIGJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2hcblx0XHRcdFx0fSB3aGlsZSAoIHNjYWxlICE9PSAoc2NhbGUgPSB0d2Vlbi5jdXIoKSAvIHRhcmdldCkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVwZGF0ZSB0d2VlbiBwcm9wZXJ0aWVzXG5cdFx0XHRpZiAoIHBhcnRzICkge1xuXHRcdFx0XHRzdGFydCA9IHR3ZWVuLnN0YXJ0ID0gK3N0YXJ0IHx8ICt0YXJnZXQgfHwgMDtcblx0XHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHRcdC8vIElmIGEgKz0vLT0gdG9rZW4gd2FzIHByb3ZpZGVkLCB3ZSdyZSBkb2luZyBhIHJlbGF0aXZlIGFuaW1hdGlvblxuXHRcdFx0XHR0d2Vlbi5lbmQgPSBwYXJ0c1sgMSBdID9cblx0XHRcdFx0XHRzdGFydCArICggcGFydHNbIDEgXSArIDEgKSAqIHBhcnRzWyAyIF0gOlxuXHRcdFx0XHRcdCtwYXJ0c1sgMiBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH07XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9KTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNCA7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCB0d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCB0d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICh0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIHR3ZWVuLCBob29rcywgb2xkZmlyZSwgZGlzcGxheSwgY2hlY2tEaXNwbGF5LFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbiggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YV9wcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIEhhbmRsZSBxdWV1ZTogZmFsc2UgcHJvbWlzZXNcblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gSGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3Ncblx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBub3RoaW5nIHNuZWFrcyBvdXRcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFOS0xMCBkbyBub3Rcblx0XHQvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmRcblx0XHQvLyBvdmVyZmxvd1kgYXJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gU2V0IGRpc3BsYXkgcHJvcGVydHkgdG8gaW5saW5lLWJsb2NrIGZvciBoZWlnaHQvd2lkdGhcblx0XHQvLyBhbmltYXRpb25zIG9uIGlubGluZSBlbGVtZW50cyB0aGF0IGFyZSBoYXZpbmcgd2lkdGgvaGVpZ2h0IGFuaW1hdGVkXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cblx0XHQvLyBUZXN0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSBcIm5vbmVcIlxuXHRcdGNoZWNrRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID9cblx0XHRcdGRhdGFfcHJpdi5nZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiICkgfHwgZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXk7XG5cblx0XHRpZiAoIGNoZWNrRGlzcGxheSA9PT0gXCJpbmxpbmVcIiAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBzaG93L2hpZGUgcGFzc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLmV4ZWMoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGRhdGFTaG93IGxlZnQgb3ZlciBmcm9tIGEgc3RvcHBlZCBoaWRlIG9yIHNob3cgYW5kIHdlIGFyZSBnb2luZyB0byBwcm9jZWVkIHdpdGggc2hvdywgd2Ugc2hvdWxkIHByZXRlbmQgdG8gYmUgaGlkZGVuXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXG5cdFx0Ly8gQW55IG5vbi1meCB2YWx1ZSBzdG9wcyB1cyBmcm9tIHJlc3RvcmluZyB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkaXNwbGF5ID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhU2hvdyA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHt9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3RvcmUgc3RhdGUgaWYgaXRzIHRvZ2dsZSAtIGVuYWJsZXMgLnN0b3AoKS50b2dnbGUoKSB0byBcInJldmVyc2VcIlxuXHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHR9XG5cdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRqUXVlcnkoIGVsZW0gKS5zaG93KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFuaW0uZG9uZShmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5KCBlbGVtICkuaGlkZSgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGFuaW0uZG9uZShmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwcm9wO1xuXG5cdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0dHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblxuXHRcdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdFx0dHdlZW4uZW5kID0gdHdlZW4uc3RhcnQ7XG5cdFx0XHRcdFx0dHdlZW4uc3RhcnQgPSBwcm9wID09PSBcIndpZHRoXCIgfHwgcHJvcCA9PT0gXCJoZWlnaHRcIiA/IDEgOiAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdC8vIElmIHRoaXMgaXMgYSBub29wIGxpa2UgLmhpZGUoKS5oaWRlKCksIHJlc3RvcmUgYW4gb3ZlcndyaXR0ZW4gZGlzcGxheSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCAoZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSkgPT09IFwiaW5saW5lXCIgKSB7XG5cdFx0c3R5bGUuZGlzcGxheSA9IGRpc3BsYXk7XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGFuaW1hdGlvblByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9KSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSk7XG5cblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSh7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7IHNwZWNpYWxFYXNpbmc6IHt9IH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9KSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IGFuaW1hdGlvblByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9KVxuXHQpO1xuXG5cdC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5zcGxpdChcIiBcIik7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdHR3ZWVuZXJzWyBwcm9wIF0gPSB0d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0dHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRhbmltYXRpb25QcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFuaW1hdGlvblByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0pO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5vZmYgPyAwIDogdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gXCJudW1iZXJcIiA/IG9wdC5kdXJhdGlvbiA6XG5cdFx0b3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgPyBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXSA6IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbiApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSh7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFfcHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFfcHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmICh0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlKSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YV9wcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKHtcblx0c2xpZGVEb3duOiBnZW5GeChcInNob3dcIiksXG5cdHNsaWRlVXA6IGdlbkZ4KFwiaGlkZVwiKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KFwidG9nZ2xlXCIpLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0pO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRpZiAoIHRpbWVyKCkgKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5cbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoICF0aW1lcklkICkge1xuXHRcdHRpbWVySWQgPSBzZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRjbGVhckludGVydmFsKCB0aW1lcklkICk7XG5cdHRpbWVySWQgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSk7XG59O1xuXG5cbihmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBpT1M8PTUuMSwgQW5kcm9pZDw9NC4yK1xuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8PTIuM1xuXHQvLyBPcHRpb25zIGluc2lkZSBkaXNhYmxlZCBzZWxlY3RzIGFyZSBpbmNvcnJlY3RseSBtYXJrZWQgYXMgZGlzYWJsZWRcblx0c2VsZWN0LmRpc2FibGVkID0gdHJ1ZTtcblx0c3VwcG9ydC5vcHREaXNhYmxlZCA9ICFvcHQuZGlzYWJsZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59KSgpO1xuXG5cbnZhciBub2RlSG9vaywgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBkb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBzdHJ1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGF0dHJpYnV0ZXMgYXJlIGxvd2VyY2FzZVxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiBub2RlSG9vayApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID9cblx0XHRcdFx0dW5kZWZpbmVkIDpcblx0XHRcdFx0cmV0O1xuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsIHByb3BOYW1lLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAobmFtZSA9IGF0dHJOYW1lc1tpKytdKSApIHtcblx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cblx0XHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxuXHRcdFx0XHRpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRcdC8vIFNldCBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHRvIGZhbHNlXG5cdFx0XHRcdFx0ZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0alF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGU7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBuYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59KTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fSxcblxuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsIG5vdHhtbCxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG5vdHhtbCA9IG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKTtcblxuXHRcdGlmICggbm90eG1sICkge1xuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybiBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyZXQgOlxuXHRcdFx0XHQoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCA/XG5cdFx0XHRcdHJldCA6XG5cdFx0XHRcdGVsZW1bIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmhhc0F0dHJpYnV0ZSggXCJ0YWJpbmRleFwiICkgfHwgcmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHwgZWxlbS5ocmVmID9cblx0XHRcdFx0XHRlbGVtLnRhYkluZGV4IDpcblx0XHRcdFx0XHQtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59KTtcblxuXG5cblxudmFyIHJjbGFzcyA9IC9bXFx0XFxyXFxuXFxmXS9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdHByb2NlZWQgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSApICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIHByb2NlZWQgKSB7XG5cdFx0XHQvLyBUaGUgZGlzanVuY3Rpb24gaGVyZSBpcyBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIHJlbW92ZUNsYXNzKVxuXHRcdFx0Y2xhc3NlcyA9ICggdmFsdWUgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF07XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBlbGVtLmNsYXNzTmFtZSA/XG5cdFx0XHRcdFx0KCBcIiBcIiArIGVsZW0uY2xhc3NOYW1lICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICkgOlxuXHRcdFx0XHRcdFwiIFwiXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBvbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uY2xhc3NOYW1lID0gZmluYWxWYWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0cHJvY2VlZCA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgfHwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgdGhpcy5jbGFzc05hbWUgKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGlmICggcHJvY2VlZCApIHtcblx0XHRcdGNsYXNzZXMgPSAoIHZhbHVlIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdO1xuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xuXHRcdFx0XHRcdCggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcblx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPj0gMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSB2YWx1ZSA/IGpRdWVyeS50cmltKCBjdXIgKSA6IFwiXCI7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uY2xhc3NOYW1lID0gZmluYWxWYWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKCB2YWx1ZS5jYWxsKHRoaXMsIGksIHRoaXMuY2xhc3NOYW1lLCBzdGF0ZVZhbCksIHN0YXRlVmFsICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHR2YXIgY2xhc3NOYW1lLFxuXHRcdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlICggKGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdKSApIHtcblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gc3RydW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuY2xhc3NOYW1lICkge1xuXHRcdFx0XHRcdC8vIHN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhX3ByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgdGhpcy5jbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0dGhpcy5jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgPyBcIlwiIDogZGF0YV9wcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGlmICggdGhpc1tpXS5ub2RlVHlwZSA9PT0gMSAmJiAoXCIgXCIgKyB0aGlzW2ldLmNsYXNzTmFtZSArIFwiIFwiKS5yZXBsYWNlKHJjbGFzcywgXCIgXCIpLmluZGV4T2YoIGNsYXNzTmFtZSApID49IDAgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1swXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRcdHJldC5yZXBsYWNlKHJyZXR1cm4sIFwiXCIpIDpcblx0XHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0XHRyZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTAtMTErXG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdGpRdWVyeS50cmltKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCBpbmRleCA8IDAsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLFxuXHRcdFx0XHRcdGkgPSBpbmRleCA8IDAgP1xuXHRcdFx0XHRcdFx0bWF4IDpcblx0XHRcdFx0XHRcdG9uZSA/IGluZGV4IDogMDtcblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIElFNi05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCggc3VwcG9ydC5vcHREaXNhYmxlZCA/ICFvcHRpb24uZGlzYWJsZWQgOiBvcHRpb24uZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PT0gbnVsbCApICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8ICFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cdFx0XHRcdFx0aWYgKCAob3B0aW9uLnNlbGVjdGVkID0galF1ZXJ5LmluQXJyYXkoIG9wdGlvbi52YWx1ZSwgdmFsdWVzICkgPj0gMCkgKSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaChbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlICkgPj0gMCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwidmFsdWVcIikgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxualF1ZXJ5LmVhY2goIChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiKS5zcGxpdChcIiBcIiksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH0sXG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyB0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDogdGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0pO1xuXG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICgvXFw/Lyk7XG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuLy8gV29ya2Fyb3VuZCBmYWlsdXJlIHRvIHN0cmluZy1jYXN0IG51bGwgaW5wdXRcbmpRdWVyeS5wYXJzZUpTT04gPSBmdW5jdGlvbiggZGF0YSApIHtcblx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKyBcIlwiICk7XG59O1xuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCB0bXA7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0dHJ5IHtcblx0XHR0bXAgPSBuZXcgRE9NUGFyc2VyKCk7XG5cdFx0eG1sID0gdG1wLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyaGFzaCA9IC8jLiokLyxcblx0cnRzID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXHRydXJsID0gL14oW1xcdy4rLV0rOikoPzpcXC9cXC8oPzpbXlxcLz8jXSpAfCkoW15cXC8/IzpdKikoPzo6KFxcZCspfCl8KS8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBEb2N1bWVudCBsb2NhdGlvblxuXHRhamF4TG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24uaHJlZixcblxuXHQvLyBTZWdtZW50IGxvY2F0aW9uIGludG8gcGFydHNcblx0YWpheExvY1BhcnRzID0gcnVybC5leGVjKCBhamF4TG9jYXRpb24udG9Mb3dlckNhc2UoKSApIHx8IFtdO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoZGF0YVR5cGUgPSBkYXRhVHlwZXNbaSsrXSkgKSB7XG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbMF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdChzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiYgIXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoZGVlcCA9IHt9KSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWzBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgc1sgXCJ0aHJvd3NcIiBdICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHsgc3RhdGU6IFwicGFyc2VyZXJyb3JcIiwgZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50IH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBhamF4TG9jYXRpb24sXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBhamF4TG9jUGFydHNbIDEgXSApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL3htbC8sXG5cdFx0XHRodG1sOiAvaHRtbC8sXG5cdFx0XHRqc29uOiAvanNvbi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTixcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXHRcdFx0Ly8gQ3Jvc3MtZG9tYWluIGRldGVjdGlvbiB2YXJzXG5cdFx0XHRwYXJ0cyxcblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiYgKCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXHRcdFx0Ly8gVGhlIGpxWEhSIHN0YXRlXG5cdFx0XHRzdGF0ZSA9IDAsXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlID09PSAyID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0dmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFjayBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApLmNvbXBsZXRlID0gY29tcGxldGVEZWZlcnJlZC5hZGQ7XG5cdFx0anFYSFIuc3VjY2VzcyA9IGpxWEhSLmRvbmU7XG5cdFx0anFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsO1xuXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggY2hhcmFjdGVyICgjNzUzMTogYW5kIHN0cmluZyBwcm9tb3Rpb24pXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgYWpheExvY2F0aW9uICkgKyBcIlwiICkucmVwbGFjZSggcmhhc2gsIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgYWpheExvY1BhcnRzWyAxIF0gKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSBqUXVlcnkudHJpbSggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHdlIGhhdmUgYSBwcm90b2NvbDpob3N0OnBvcnQgbWlzbWF0Y2hcblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7XG5cdFx0XHRzLmNyb3NzRG9tYWluID0gISEoIHBhcnRzICYmXG5cdFx0XHRcdCggcGFydHNbIDEgXSAhPT0gYWpheExvY1BhcnRzWyAxIF0gfHwgcGFydHNbIDIgXSAhPT0gYWpheExvY1BhcnRzWyAyIF0gfHxcblx0XHRcdFx0XHQoIHBhcnRzWyAzIF0gfHwgKCBwYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSAhPT1cblx0XHRcdFx0XHRcdCggYWpheExvY1BhcnRzWyAzIF0gfHwgKCBhamF4TG9jUGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgKVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHRjYWNoZVVSTCA9IHMudXJsO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YSApO1xuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgP1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcblx0XHRcdFx0XHRjYWNoZVVSTC5yZXBsYWNlKCBydHMsIFwiJDFfPVwiICsgbm9uY2UrKyApIDpcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmRcblx0XHRcdFx0XHRjYWNoZVVSTCArICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyBub25jZSsrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gKyAoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJiAoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IHN0YXRlID09PSAyICkgKSB7XG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Zm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkge1xuXHRcdFx0anFYSFJbIGkgXSggc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KFwidGltZW91dFwiKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHN0YXRlID0gMTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0Ly8gUHJvcGFnYXRlIGV4Y2VwdGlvbiBhcyBlcnJvciBpZiBub3QgZG9uZVxuXHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0XHQvLyBTaW1wbHkgcmV0aHJvdyBvdGhlcndpc2Vcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gQ2FsbGVkIG9uY2Vcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdGUgaXMgXCJkb25lXCIgbm93XG5cdFx0XHRzdGF0ZSA9IDI7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59KTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkuYWpheCh7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSk7XG5cdH07XG59KTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xuXHRcdHVybDogdXJsLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9KTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbC5jYWxsKHRoaXMsIGkpICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9KS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKHRoaXMsIGkpICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwodGhpcywgaSkgOiBodG1sICk7XG5cdFx0fSk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImJvZHlcIiApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0XHR9XG5cdFx0fSkuZW5kKCk7XG5cdH1cbn0pO1xuXG5cbmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDw9IDEyLjEyXG5cdC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcblx0cmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPD0gMCAmJiBlbGVtLm9mZnNldEhlaWdodCA8PSAwO1xufTtcbmpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuKCBlbGVtICk7XG59O1xuXG5cblxuXG52YXIgcjIwID0gLyUyMC9nLFxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHtcblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgPyBpIDogXCJcIiApICsgXCJdXCIsIHYsIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcblx0XHRcdHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgPyB2YWx1ZSgpIDogKCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gU2V0IHRyYWRpdGlvbmFsIHRvIHRydWUgZm9yIGpRdWVyeSA8PSAxLjMuMiBiZWhhdmlvci5cblx0aWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHRyYWRpdGlvbmFsID0galF1ZXJ5LmFqYXhTZXR0aW5ncyAmJiBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0pO1xuXG5cdH0gZWxzZSB7XG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSlcblx0XHQuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9KVxuXHRcdC5tYXAoZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdHJldHVybiB2YWwgPT0gbnVsbCA/XG5cdFx0XHRcdG51bGwgOlxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9KS5nZXQoKTtcblx0fVxufSk7XG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2goIGUgKSB7fVxufTtcblxudmFyIHhocklkID0gMCxcblx0eGhyQ2FsbGJhY2tzID0ge30sXG5cdHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cdFx0Ly8gZmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbi8vIFN1cHBvcnQ6IElFOVxuLy8gT3BlbiByZXF1ZXN0cyBtdXN0IGJlIG1hbnVhbGx5IGFib3J0ZWQgb24gdW5sb2FkICgjNTI4MClcbi8vIFNlZSBodHRwczovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9rYi8yODU2NzQ2IGZvciBtb3JlIGluZm9cbmlmICggd2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHR3aW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgZnVuY3Rpb24oKSB7XG5cdFx0Zm9yICggdmFyIGtleSBpbiB4aHJDYWxsYmFja3MgKSB7XG5cdFx0XHR4aHJDYWxsYmFja3NbIGtleSBdKCk7XG5cdFx0fVxuXHR9KTtcbn1cblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKSxcblx0XHRcdFx0XHRpZCA9ICsreGhySWQ7XG5cblx0XHRcdFx0eGhyLm9wZW4oIG9wdGlvbnMudHlwZSwgb3B0aW9ucy51cmwsIG9wdGlvbnMuYXN5bmMsIG9wdGlvbnMudXNlcm5hbWUsIG9wdGlvbnMucGFzc3dvcmQgKTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIHhockNhbGxiYWNrc1sgaWQgXTtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSB4aHIub25sb2FkID0geGhyLm9uZXJyb3IgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBmaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEFjY2Vzc2luZyBiaW5hcnktZGF0YSByZXNwb25zZVRleHQgdGhyb3dzIGFuIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gKCMxMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ID09PSBcInN0cmluZ1wiID8ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0ZXh0OiB4aHIucmVzcG9uc2VUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHR9IDogdW5kZWZpbmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0eGhyLm9uZXJyb3IgPSBjYWxsYmFjayhcImVycm9yXCIpO1xuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSB4aHJDYWxsYmFja3NbIGlkIF0gPSBjYWxsYmFjayhcImFib3J0XCIpO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSk7XG5cblxuXG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvKD86amF2YXxlY21hKXNjcmlwdC9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59KTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0pO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KFwiPHNjcmlwdD5cIikucHJvcCh7XG5cdFx0XHRcdFx0YXN5bmM6IHRydWUsXG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0pO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoe1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0pO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmICEoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgJiYgcmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbXCJzY3JpcHQganNvblwiXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIGZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBSZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXHRcdFx0XHQvLyBtYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIHNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSk7XG5cblxuXG5cbi8vIGRhdGE6IHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0dmFyIHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApLFxuXHRcdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsxXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBqUXVlcnkuYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLy8gS2VlcCBhIGNvcHkgb2YgdGhlIG9sZCBsb2FkIG1ldGhvZFxudmFyIF9sb2FkID0galF1ZXJ5LmZuLmxvYWQ7XG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdGlmICggdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIiAmJiBfbG9hZCApIHtcblx0XHRyZXR1cm4gX2xvYWQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHR9XG5cblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZihcIiBcIik7XG5cblx0aWYgKCBvZmYgPj0gMCApIHtcblx0XHRzZWxlY3RvciA9IGpRdWVyeS50cmltKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoe1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIGlmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWRcblx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9KS5kb25lKGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KFwiPGRpdj5cIikuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0fSkuY29tcGxldGUoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBjYWxsYmFjaywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFsgXCJhamF4U3RhcnRcIiwgXCJhamF4U3RvcFwiLCBcImFqYXhDb21wbGV0ZVwiLCBcImFqYXhFcnJvclwiLCBcImFqYXhTdWNjZXNzXCIsIFwiYWpheFNlbmRcIiBdLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59KTtcblxuXG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9KS5sZW5ndGg7XG59O1xuXG5cblxuXG52YXIgZG9jRWxlbSA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbi8qKlxuICogR2V0cyBhIHdpbmRvdyBmcm9tIGFuIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgPyBlbGVtIDogZWxlbS5ub2RlVHlwZSA9PT0gOSAmJiBlbGVtLmRlZmF1bHRWaWV3O1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoXCJhdXRvXCIpID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgY3VyT2Zmc2V0ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9KTtcblx0XHR9XG5cblx0XHR2YXIgZG9jRWxlbSwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGJveCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXG5cdFx0XHRkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDtcblxuXHRcdGlmICggIWRvYyApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxuXHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkge1xuXHRcdFx0cmV0dXJuIGJveDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBCbGFja0JlcnJ5IDUsIGlPUyAzIChvcmlnaW5hbCBpUGhvbmUpXG5cdFx0Ly8gSWYgd2UgZG9uJ3QgaGF2ZSBnQkNSLCBqdXN0IHVzZSAwLDAgcmF0aGVyIHRoYW4gZXJyb3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gc3RydW5kZWZpbmVkICkge1xuXHRcdFx0Ym94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR9XG5cdFx0d2luID0gZ2V0V2luZG93KCBkb2MgKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBib3gudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRsZWZ0OiBib3gubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdH07XG5cdH0sXG5cblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50IHx8IGRvY0VsZW07XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50LCBcImh0bWxcIiApICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2NFbGVtO1xuXHRcdH0pO1xuXHR9XG59KTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXHRcdFx0dmFyIHdpbiA9IGdldFdpbmRvdyggZWxlbSApO1xuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbmRvdy5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCwgbnVsbCApO1xuXHR9O1xufSk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaTw3KywgQ2hyb21lPDM3K1xuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MjgwXG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHRcdC8vIEFzIG9mIDUvOC8yMDEyIHRoaXMgd2lsbCB5aWVsZCBpbmNvcnJlY3QgcmVzdWx0cyBmb3IgTW9iaWxlIFNhZmFyaSwgYnV0IHRoZXJlXG5cdFx0XHRcdFx0Ly8gaXNuJ3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvLiBTZWUgcHVsbCByZXF1ZXN0IGF0IHRoaXMgVVJMIGZvciBkaXNjdXNzaW9uOlxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSwgbnVsbCApO1xuXHRcdH07XG5cdH0pO1xufSk7XG5cblxuLy8gVGhlIG51bWJlciBvZiBlbGVtZW50cyBjb250YWluZWQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXRcbmpRdWVyeS5mbi5zaXplID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLmxlbmd0aDtcbn07XG5cbmpRdWVyeS5mbi5hbmRTZWxmID0galF1ZXJ5LmZuLmFkZEJhY2s7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSk7XG59XG5cblxuXG5cbnZhclxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gc3RydW5kZWZpbmVkICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG5cbn0pKTtcbiIsIi8qIVxuICogQm9vdHN0cmFwIHYzLjMuNSAoaHR0cDovL2dldGJvb3RzdHJhcC5jb20pXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICovXG5cbmlmICh0eXBlb2YgalF1ZXJ5ID09PSAndW5kZWZpbmVkJykge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnknKVxufVxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgdmVyc2lvbiA9ICQuZm4uanF1ZXJ5LnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKVxuICBpZiAoKHZlcnNpb25bMF0gPCAyICYmIHZlcnNpb25bMV0gPCA5KSB8fCAodmVyc2lvblswXSA9PSAxICYmIHZlcnNpb25bMV0gPT0gOSAmJiB2ZXJzaW9uWzJdIDwgMSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkgdmVyc2lvbiAxLjkuMSBvciBoaWdoZXInKVxuICB9XG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0cmFuc2l0aW9uLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdHJhbnNpdGlvbnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDU1MgVFJBTlNJVElPTiBTVVBQT1JUIChTaG91dG91dDogaHR0cDovL3d3dy5tb2Rlcm5penIuY29tLylcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdib290c3RyYXAnKVxuXG4gICAgdmFyIHRyYW5zRW5kRXZlbnROYW1lcyA9IHtcbiAgICAgIFdlYmtpdFRyYW5zaXRpb24gOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICBNb3pUcmFuc2l0aW9uICAgIDogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgT1RyYW5zaXRpb24gICAgICA6ICdvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCcsXG4gICAgICB0cmFuc2l0aW9uICAgICAgIDogJ3RyYW5zaXRpb25lbmQnXG4gICAgfVxuXG4gICAgZm9yICh2YXIgbmFtZSBpbiB0cmFuc0VuZEV2ZW50TmFtZXMpIHtcbiAgICAgIGlmIChlbC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7IGVuZDogdHJhbnNFbmRFdmVudE5hbWVzW25hbWVdIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2UgLy8gZXhwbGljaXQgZm9yIGllOCAoICAuXy4pXG4gIH1cblxuICAvLyBodHRwOi8vYmxvZy5hbGV4bWFjY2F3LmNvbS9jc3MtdHJhbnNpdGlvbnNcbiAgJC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgIHZhciBjYWxsZWQgPSBmYWxzZVxuICAgIHZhciAkZWwgPSB0aGlzXG4gICAgJCh0aGlzKS5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZSB9KVxuICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHsgaWYgKCFjYWxsZWQpICQoJGVsKS50cmlnZ2VyKCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCkgfVxuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIGR1cmF0aW9uKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAkKGZ1bmN0aW9uICgpIHtcbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25FbmQoKVxuXG4gICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikgcmV0dXJuXG5cbiAgICAkLmV2ZW50LnNwZWNpYWwuYnNUcmFuc2l0aW9uRW5kID0ge1xuICAgICAgYmluZFR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcbiAgICAgIGRlbGVnYXRlVHlwZTogJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLFxuICAgICAgaGFuZGxlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoJChlLnRhcmdldCkuaXModGhpcykpIHJldHVybiBlLmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGFsZXJ0LmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWxlcnRzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQUxFUlQgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGRpc21pc3MgPSAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICB2YXIgQWxlcnQgICA9IGZ1bmN0aW9uIChlbCkge1xuICAgICQoZWwpLm9uKCdjbGljaycsIGRpc21pc3MsIHRoaXMuY2xvc2UpXG4gIH1cblxuICBBbGVydC5WRVJTSU9OID0gJzMuMy41J1xuXG4gIEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBBbGVydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgICA9ICQodGhpcylcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIHZhciAkcGFyZW50ID0gJChzZWxlY3RvcilcblxuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgICRwYXJlbnQgPSAkdGhpcy5jbG9zZXN0KCcuYWxlcnQnKVxuICAgIH1cblxuICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnY2xvc2UuYnMuYWxlcnQnKSlcblxuICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoKSB7XG4gICAgICAvLyBkZXRhY2ggZnJvbSBwYXJlbnQsIGZpcmUgZXZlbnQgdGhlbiBjbGVhbiB1cCBkYXRhXG4gICAgICAkcGFyZW50LmRldGFjaCgpLnRyaWdnZXIoJ2Nsb3NlZC5icy5hbGVydCcpLnJlbW92ZSgpXG4gICAgfVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgJHBhcmVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICRwYXJlbnRcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgcmVtb3ZlRWxlbWVudClcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIHJlbW92ZUVsZW1lbnQoKVxuICB9XG5cblxuICAvLyBBTEVSVCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLmFsZXJ0JylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hbGVydCcsIChkYXRhID0gbmV3IEFsZXJ0KHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0uY2FsbCgkdGhpcylcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWxlcnRcblxuICAkLmZuLmFsZXJ0ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYWxlcnQuQ29uc3RydWN0b3IgPSBBbGVydFxuXG5cbiAgLy8gQUxFUlQgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmFsZXJ0Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5hbGVydCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFMRVJUIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmFsZXJ0LmRhdGEtYXBpJywgZGlzbWlzcywgQWxlcnQucHJvdG90eXBlLmNsb3NlKVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBidXR0b24uanMgdjMuMy41XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNidXR0b25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQlVUVE9OIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBCdXR0b24gPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgID0gJC5leHRlbmQoe30sIEJ1dHRvbi5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlXG4gIH1cblxuICBCdXR0b24uVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgQnV0dG9uLkRFRkFVTFRTID0ge1xuICAgIGxvYWRpbmdUZXh0OiAnbG9hZGluZy4uLidcbiAgfVxuXG4gIEJ1dHRvbi5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICB2YXIgZCAgICA9ICdkaXNhYmxlZCdcbiAgICB2YXIgJGVsICA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgdmFsICA9ICRlbC5pcygnaW5wdXQnKSA/ICd2YWwnIDogJ2h0bWwnXG4gICAgdmFyIGRhdGEgPSAkZWwuZGF0YSgpXG5cbiAgICBzdGF0ZSArPSAnVGV4dCdcblxuICAgIGlmIChkYXRhLnJlc2V0VGV4dCA9PSBudWxsKSAkZWwuZGF0YSgncmVzZXRUZXh0JywgJGVsW3ZhbF0oKSlcblxuICAgIC8vIHB1c2ggdG8gZXZlbnQgbG9vcCB0byBhbGxvdyBmb3JtcyB0byBzdWJtaXRcbiAgICBzZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24gKCkge1xuICAgICAgJGVsW3ZhbF0oZGF0YVtzdGF0ZV0gPT0gbnVsbCA/IHRoaXMub3B0aW9uc1tzdGF0ZV0gOiBkYXRhW3N0YXRlXSlcblxuICAgICAgaWYgKHN0YXRlID09ICdsb2FkaW5nVGV4dCcpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlXG4gICAgICAgICRlbC5hZGRDbGFzcyhkKS5hdHRyKGQsIGQpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNMb2FkaW5nKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2VcbiAgICAgICAgJGVsLnJlbW92ZUNsYXNzKGQpLnJlbW92ZUF0dHIoZClcbiAgICAgIH1cbiAgICB9LCB0aGlzKSwgMClcbiAgfVxuXG4gIEJ1dHRvbi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGFuZ2VkID0gdHJ1ZVxuICAgIHZhciAkcGFyZW50ID0gdGhpcy4kZWxlbWVudC5jbG9zZXN0KCdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJylcblxuICAgIGlmICgkcGFyZW50Lmxlbmd0aCkge1xuICAgICAgdmFyICRpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQnKVxuICAgICAgaWYgKCRpbnB1dC5wcm9wKCd0eXBlJykgPT0gJ3JhZGlvJykge1xuICAgICAgICBpZiAoJGlucHV0LnByb3AoJ2NoZWNrZWQnKSkgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgICRwYXJlbnQuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgfSBlbHNlIGlmICgkaW5wdXQucHJvcCgndHlwZScpID09ICdjaGVja2JveCcpIHtcbiAgICAgICAgaWYgKCgkaW5wdXQucHJvcCgnY2hlY2tlZCcpKSAhPT0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpIGNoYW5nZWQgPSBmYWxzZVxuICAgICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgfVxuICAgICAgJGlucHV0LnByb3AoJ2NoZWNrZWQnLCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSlcbiAgICAgIGlmIChjaGFuZ2VkKSAkaW5wdXQudHJpZ2dlcignY2hhbmdlJylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLXByZXNzZWQnLCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpXG4gICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKCdhY3RpdmUnKVxuICAgIH1cbiAgfVxuXG5cbiAgLy8gQlVUVE9OIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5idXR0b24nKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmJ1dHRvbicsIChkYXRhID0gbmV3IEJ1dHRvbih0aGlzLCBvcHRpb25zKSkpXG5cbiAgICAgIGlmIChvcHRpb24gPT0gJ3RvZ2dsZScpIGRhdGEudG9nZ2xlKClcbiAgICAgIGVsc2UgaWYgKG9wdGlvbikgZGF0YS5zZXRTdGF0ZShvcHRpb24pXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmJ1dHRvblxuXG4gICQuZm4uYnV0dG9uICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYnV0dG9uLkNvbnN0cnVjdG9yID0gQnV0dG9uXG5cblxuICAvLyBCVVRUT04gTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5idXR0b24ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmJ1dHRvbiA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEJVVFRPTiBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuYnV0dG9uLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZV49XCJidXR0b25cIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyICRidG4gPSAkKGUudGFyZ2V0KVxuICAgICAgaWYgKCEkYnRuLmhhc0NsYXNzKCdidG4nKSkgJGJ0biA9ICRidG4uY2xvc2VzdCgnLmJ0bicpXG4gICAgICBQbHVnaW4uY2FsbCgkYnRuLCAndG9nZ2xlJylcbiAgICAgIGlmICghKCQoZS50YXJnZXQpLmlzKCdpbnB1dFt0eXBlPVwicmFkaW9cIl0nKSB8fCAkKGUudGFyZ2V0KS5pcygnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJykpKSBlLnByZXZlbnREZWZhdWx0KClcbiAgICB9KVxuICAgIC5vbignZm9jdXMuYnMuYnV0dG9uLmRhdGEtYXBpIGJsdXIuYnMuYnV0dG9uLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZV49XCJidXR0b25cIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgJChlLnRhcmdldCkuY2xvc2VzdCgnLmJ0bicpLnRvZ2dsZUNsYXNzKCdmb2N1cycsIC9eZm9jdXMoaW4pPyQvLnRlc3QoZS50eXBlKSlcbiAgICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBjYXJvdXNlbC5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2Nhcm91c2VsXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQ0FST1VTRUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENhcm91c2VsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMuJGluZGljYXRvcnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5jYXJvdXNlbC1pbmRpY2F0b3JzJylcbiAgICB0aGlzLm9wdGlvbnMgICAgID0gb3B0aW9uc1xuICAgIHRoaXMucGF1c2VkICAgICAgPSBudWxsXG4gICAgdGhpcy5zbGlkaW5nICAgICA9IG51bGxcbiAgICB0aGlzLmludGVydmFsICAgID0gbnVsbFxuICAgIHRoaXMuJGFjdGl2ZSAgICAgPSBudWxsXG4gICAgdGhpcy4kaXRlbXMgICAgICA9IG51bGxcblxuICAgIHRoaXMub3B0aW9ucy5rZXlib2FyZCAmJiB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpKVxuXG4gICAgdGhpcy5vcHRpb25zLnBhdXNlID09ICdob3ZlcicgJiYgISgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpICYmIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignbW91c2VlbnRlci5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5wYXVzZSwgdGhpcykpXG4gICAgICAub24oJ21vdXNlbGVhdmUuYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMuY3ljbGUsIHRoaXMpKVxuICB9XG5cbiAgQ2Fyb3VzZWwuVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgQ2Fyb3VzZWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDYwMFxuXG4gIENhcm91c2VsLkRFRkFVTFRTID0ge1xuICAgIGludGVydmFsOiA1MDAwLFxuICAgIHBhdXNlOiAnaG92ZXInLFxuICAgIHdyYXA6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWVcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSkgcmV0dXJuXG4gICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICBjYXNlIDM3OiB0aGlzLnByZXYoKTsgYnJlYWtcbiAgICAgIGNhc2UgMzk6IHRoaXMubmV4dCgpOyBicmVha1xuICAgICAgZGVmYXVsdDogcmV0dXJuXG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuY3ljbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUgfHwgKHRoaXMucGF1c2VkID0gZmFsc2UpXG5cbiAgICB0aGlzLmludGVydmFsICYmIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbClcblxuICAgIHRoaXMub3B0aW9ucy5pbnRlcnZhbFxuICAgICAgJiYgIXRoaXMucGF1c2VkXG4gICAgICAmJiAodGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCQucHJveHkodGhpcy5uZXh0LCB0aGlzKSwgdGhpcy5vcHRpb25zLmludGVydmFsKSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB0aGlzLiRpdGVtcyA9IGl0ZW0ucGFyZW50KCkuY2hpbGRyZW4oJy5pdGVtJylcbiAgICByZXR1cm4gdGhpcy4kaXRlbXMuaW5kZXgoaXRlbSB8fCB0aGlzLiRhY3RpdmUpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUZvckRpcmVjdGlvbiA9IGZ1bmN0aW9uIChkaXJlY3Rpb24sIGFjdGl2ZSkge1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KGFjdGl2ZSlcbiAgICB2YXIgd2lsbFdyYXAgPSAoZGlyZWN0aW9uID09ICdwcmV2JyAmJiBhY3RpdmVJbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICB8fCAoZGlyZWN0aW9uID09ICduZXh0JyAmJiBhY3RpdmVJbmRleCA9PSAodGhpcy4kaXRlbXMubGVuZ3RoIC0gMSkpXG4gICAgaWYgKHdpbGxXcmFwICYmICF0aGlzLm9wdGlvbnMud3JhcCkgcmV0dXJuIGFjdGl2ZVxuICAgIHZhciBkZWx0YSA9IGRpcmVjdGlvbiA9PSAncHJldicgPyAtMSA6IDFcbiAgICB2YXIgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy4kaXRlbXMubGVuZ3RoXG4gICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmVxKGl0ZW1JbmRleClcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICB2YXIgdGhhdCAgICAgICAgPSB0aGlzXG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgodGhpcy4kYWN0aXZlID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXRlbS5hY3RpdmUnKSlcblxuICAgIGlmIChwb3MgPiAodGhpcy4kaXRlbXMubGVuZ3RoIC0gMSkgfHwgcG9zIDwgMCkgcmV0dXJuXG5cbiAgICBpZiAodGhpcy5zbGlkaW5nKSAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudC5vbmUoJ3NsaWQuYnMuY2Fyb3VzZWwnLCBmdW5jdGlvbiAoKSB7IHRoYXQudG8ocG9zKSB9KSAvLyB5ZXMsIFwic2xpZFwiXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09IHBvcykgcmV0dXJuIHRoaXMucGF1c2UoKS5jeWNsZSgpXG5cbiAgICByZXR1cm4gdGhpcy5zbGlkZShwb3MgPiBhY3RpdmVJbmRleCA/ICduZXh0JyA6ICdwcmV2JywgdGhpcy4kaXRlbXMuZXEocG9zKSlcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSB0cnVlKVxuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuZmluZCgnLm5leHQsIC5wcmV2JykubGVuZ3RoICYmICQuc3VwcG9ydC50cmFuc2l0aW9uKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKVxuICAgICAgdGhpcy5jeWNsZSh0cnVlKVxuICAgIH1cblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUoJ25leHQnKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUoJ3ByZXYnKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnNsaWRlID0gZnVuY3Rpb24gKHR5cGUsIG5leHQpIHtcbiAgICB2YXIgJGFjdGl2ZSAgID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXRlbS5hY3RpdmUnKVxuICAgIHZhciAkbmV4dCAgICAgPSBuZXh0IHx8IHRoaXMuZ2V0SXRlbUZvckRpcmVjdGlvbih0eXBlLCAkYWN0aXZlKVxuICAgIHZhciBpc0N5Y2xpbmcgPSB0aGlzLmludGVydmFsXG4gICAgdmFyIGRpcmVjdGlvbiA9IHR5cGUgPT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0J1xuICAgIHZhciB0aGF0ICAgICAgPSB0aGlzXG5cbiAgICBpZiAoJG5leHQuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm4gKHRoaXMuc2xpZGluZyA9IGZhbHNlKVxuXG4gICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSAkbmV4dFswXVxuICAgIHZhciBzbGlkZUV2ZW50ID0gJC5FdmVudCgnc2xpZGUuYnMuY2Fyb3VzZWwnLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxuICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25cbiAgICB9KVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkZUV2ZW50KVxuICAgIGlmIChzbGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuc2xpZGluZyA9IHRydWVcblxuICAgIGlzQ3ljbGluZyAmJiB0aGlzLnBhdXNlKClcblxuICAgIGlmICh0aGlzLiRpbmRpY2F0b3JzLmxlbmd0aCkge1xuICAgICAgdGhpcy4kaW5kaWNhdG9ycy5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB2YXIgJG5leHRJbmRpY2F0b3IgPSAkKHRoaXMuJGluZGljYXRvcnMuY2hpbGRyZW4oKVt0aGlzLmdldEl0ZW1JbmRleCgkbmV4dCldKVxuICAgICAgJG5leHRJbmRpY2F0b3IgJiYgJG5leHRJbmRpY2F0b3IuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgfVxuXG4gICAgdmFyIHNsaWRFdmVudCA9ICQuRXZlbnQoJ3NsaWQuYnMuY2Fyb3VzZWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsIGRpcmVjdGlvbjogZGlyZWN0aW9uIH0pIC8vIHllcywgXCJzbGlkXCJcbiAgICBpZiAoJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnc2xpZGUnKSkge1xuICAgICAgJG5leHQuYWRkQ2xhc3ModHlwZSlcbiAgICAgICRuZXh0WzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuICAgICAgJGFjdGl2ZS5hZGRDbGFzcyhkaXJlY3Rpb24pXG4gICAgICAkbmV4dC5hZGRDbGFzcyhkaXJlY3Rpb24pXG4gICAgICAkYWN0aXZlXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkbmV4dC5yZW1vdmVDbGFzcyhbdHlwZSwgZGlyZWN0aW9uXS5qb2luKCcgJykpLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoWydhY3RpdmUnLCBkaXJlY3Rpb25dLmpvaW4oJyAnKSlcbiAgICAgICAgICB0aGF0LnNsaWRpbmcgPSBmYWxzZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKHNsaWRFdmVudClcbiAgICAgICAgICB9LCAwKVxuICAgICAgICB9KVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ2Fyb3VzZWwuVFJBTlNJVElPTl9EVVJBVElPTilcbiAgICB9IGVsc2Uge1xuICAgICAgJGFjdGl2ZS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICRuZXh0LmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgdGhpcy5zbGlkaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkRXZlbnQpXG4gICAgfVxuXG4gICAgaXNDeWNsaW5nICYmIHRoaXMuY3ljbGUoKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ0FST1VTRUwgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuY2Fyb3VzZWwnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQ2Fyb3VzZWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG4gICAgICB2YXIgYWN0aW9uICA9IHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgPyBvcHRpb24gOiBvcHRpb25zLnNsaWRlXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuY2Fyb3VzZWwnLCAoZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnbnVtYmVyJykgZGF0YS50byhvcHRpb24pXG4gICAgICBlbHNlIGlmIChhY3Rpb24pIGRhdGFbYWN0aW9uXSgpXG4gICAgICBlbHNlIGlmIChvcHRpb25zLmludGVydmFsKSBkYXRhLnBhdXNlKCkuY3ljbGUoKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jYXJvdXNlbFxuXG4gICQuZm4uY2Fyb3VzZWwgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5jYXJvdXNlbC5Db25zdHJ1Y3RvciA9IENhcm91c2VsXG5cblxuICAvLyBDQVJPVVNFTCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uY2Fyb3VzZWwubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmNhcm91c2VsID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ0FST1VTRUwgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICB2YXIgY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgaHJlZlxuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgIHZhciAkdGFyZ2V0ID0gJCgkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpIHx8IChocmVmID0gJHRoaXMuYXR0cignaHJlZicpKSAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSkgLy8gc3RyaXAgZm9yIGllN1xuICAgIGlmICghJHRhcmdldC5oYXNDbGFzcygnY2Fyb3VzZWwnKSkgcmV0dXJuXG4gICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJHRhcmdldC5kYXRhKCksICR0aGlzLmRhdGEoKSlcbiAgICB2YXIgc2xpZGVJbmRleCA9ICR0aGlzLmF0dHIoJ2RhdGEtc2xpZGUtdG8nKVxuICAgIGlmIChzbGlkZUluZGV4KSBvcHRpb25zLmludGVydmFsID0gZmFsc2VcblxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbnMpXG5cbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgJHRhcmdldC5kYXRhKCdicy5jYXJvdXNlbCcpLnRvKHNsaWRlSW5kZXgpXG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGknLCAnW2RhdGEtc2xpZGVdJywgY2xpY2tIYW5kbGVyKVxuICAgIC5vbignY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGknLCAnW2RhdGEtc2xpZGUtdG9dJywgY2xpY2tIYW5kbGVyKVxuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAkKCdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkY2Fyb3VzZWwgPSAkKHRoaXMpXG4gICAgICBQbHVnaW4uY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogY29sbGFwc2UuanMgdjMuMy41XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNjb2xsYXBzZVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENPTExBUFNFIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgICAgID0gJC5leHRlbmQoe30sIENvbGxhcHNlLkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuJHRyaWdnZXIgICAgICA9ICQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJyArIGVsZW1lbnQuaWQgKyAnXCJdLCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXScpXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gbnVsbFxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy4kZWxlbWVudCwgdGhpcy4kdHJpZ2dlcilcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRvZ2dsZSkgdGhpcy50b2dnbGUoKVxuICB9XG5cbiAgQ29sbGFwc2UuVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTiA9IDM1MFxuXG4gIENvbGxhcHNlLkRFRkFVTFRTID0ge1xuICAgIHRvZ2dsZTogdHJ1ZVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmRpbWVuc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzV2lkdGggPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCd3aWR0aCcpXG4gICAgcmV0dXJuIGhhc1dpZHRoID8gJ3dpZHRoJyA6ICdoZWlnaHQnXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVyblxuXG4gICAgdmFyIGFjdGl2ZXNEYXRhXG4gICAgdmFyIGFjdGl2ZXMgPSB0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50LmNoaWxkcmVuKCcucGFuZWwnKS5jaGlsZHJlbignLmluLCAuY29sbGFwc2luZycpXG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgYWN0aXZlc0RhdGEgPSBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS50cmFuc2l0aW9uaW5nKSByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoJ3Nob3cuYnMuY29sbGFwc2UnKVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIGlmIChhY3RpdmVzICYmIGFjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICBQbHVnaW4uY2FsbChhY3RpdmVzLCAnaGlkZScpXG4gICAgICBhY3RpdmVzRGF0YSB8fCBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJywgbnVsbClcbiAgICB9XG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVtkaW1lbnNpb25dKDApXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLiR0cmlnZ2VyXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlZCcpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UgaW4nKVtkaW1lbnNpb25dKCcnKVxuICAgICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMFxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAudHJpZ2dlcignc2hvd24uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB2YXIgc2Nyb2xsU2l6ZSA9ICQuY2FtZWxDYXNlKFsnc2Nyb2xsJywgZGltZW5zaW9uXS5qb2luKCctJykpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KGNvbXBsZXRlLCB0aGlzKSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDb2xsYXBzZS5UUkFOU0lUSU9OX0RVUkFUSU9OKVtkaW1lbnNpb25dKHRoaXMuJGVsZW1lbnRbMF1bc2Nyb2xsU2l6ZV0pXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8ICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSByZXR1cm5cblxuICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudCgnaGlkZS5icy5jb2xsYXBzZScpXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKClcblxuICAgIHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0oKSlbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZSBpbicpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXG4gICAgdGhpcy4kdHJpZ2dlclxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZWQnKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDFcblxuICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDBcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZScpXG4gICAgICAgIC50cmlnZ2VyKCdoaWRkZW4uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICBbZGltZW5zaW9uXSgwKVxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTilcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpc1t0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpID8gJ2hpZGUnIDogJ3Nob3cnXSgpXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuZ2V0UGFyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkKHRoaXMub3B0aW9ucy5wYXJlbnQpXG4gICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInICsgdGhpcy5vcHRpb25zLnBhcmVudCArICdcIl0nKVxuICAgICAgLmVhY2goJC5wcm94eShmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gICAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGdldFRhcmdldEZyb21UcmlnZ2VyKCRlbGVtZW50KSwgJGVsZW1lbnQpXG4gICAgICB9LCB0aGlzKSlcbiAgICAgIC5lbmQoKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyA9IGZ1bmN0aW9uICgkZWxlbWVudCwgJHRyaWdnZXIpIHtcbiAgICB2YXIgaXNPcGVuID0gJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJylcblxuICAgICRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gICAgJHRyaWdnZXJcbiAgICAgIC50b2dnbGVDbGFzcygnY29sbGFwc2VkJywgIWlzT3BlbilcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRyaWdnZXIpIHtcbiAgICB2YXIgaHJlZlxuICAgIHZhciB0YXJnZXQgPSAkdHJpZ2dlci5hdHRyKCdkYXRhLXRhcmdldCcpXG4gICAgICB8fCAoaHJlZiA9ICR0cmlnZ2VyLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuXG4gICAgcmV0dXJuICQodGFyZ2V0KVxuICB9XG5cblxuICAvLyBDT0xMQVBTRSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcblxuICAgICAgaWYgKCFkYXRhICYmIG9wdGlvbnMudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3Qob3B0aW9uKSkgb3B0aW9ucy50b2dnbGUgPSBmYWxzZVxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScsIChkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jb2xsYXBzZVxuXG4gICQuZm4uY29sbGFwc2UgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5jb2xsYXBzZS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlXG5cblxuICAvLyBDT0xMQVBTRSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uY29sbGFwc2Uubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmNvbGxhcHNlID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ09MTEFQU0UgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMuY29sbGFwc2UuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuXG4gICAgaWYgKCEkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIHZhciAkdGFyZ2V0ID0gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRoaXMpXG4gICAgdmFyIGRhdGEgICAgPSAkdGFyZ2V0LmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICB2YXIgb3B0aW9uICA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0aGlzLmRhdGEoKVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uKVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBkcm9wZG93bi5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2Ryb3Bkb3duc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIERST1BET1dOIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBiYWNrZHJvcCA9ICcuZHJvcGRvd24tYmFja2Ryb3AnXG4gIHZhciB0b2dnbGUgICA9ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXSdcbiAgdmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAkKGVsZW1lbnQpLm9uKCdjbGljay5icy5kcm9wZG93bicsIHRoaXMudG9nZ2xlKVxuICB9XG5cbiAgRHJvcGRvd24uVkVSU0lPTiA9ICczLjMuNSdcblxuICBmdW5jdGlvbiBnZXRQYXJlbnQoJHRoaXMpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiAvI1tBLVphLXpdLy50ZXN0KHNlbGVjdG9yKSAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIHZhciAkcGFyZW50ID0gc2VsZWN0b3IgJiYgJChzZWxlY3RvcilcblxuICAgIHJldHVybiAkcGFyZW50ICYmICRwYXJlbnQubGVuZ3RoID8gJHBhcmVudCA6ICR0aGlzLnBhcmVudCgpXG4gIH1cblxuICBmdW5jdGlvbiBjbGVhck1lbnVzKGUpIHtcbiAgICBpZiAoZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm5cbiAgICAkKGJhY2tkcm9wKS5yZW1vdmUoKVxuICAgICQodG9nZ2xlKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgICAgICAgID0gJCh0aGlzKVxuICAgICAgdmFyICRwYXJlbnQgICAgICAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHsgcmVsYXRlZFRhcmdldDogdGhpcyB9XG5cbiAgICAgIGlmICghJHBhcmVudC5oYXNDbGFzcygnb3BlbicpKSByZXR1cm5cblxuICAgICAgaWYgKGUgJiYgZS50eXBlID09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSAmJiAkLmNvbnRhaW5zKCRwYXJlbnRbMF0sIGUudGFyZ2V0KSkgcmV0dXJuXG5cbiAgICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnaGlkZS5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgICR0aGlzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgJHBhcmVudC5yZW1vdmVDbGFzcygnb3BlbicpLnRyaWdnZXIoJ2hpZGRlbi5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpXG4gICAgfSlcbiAgfVxuXG4gIERyb3Bkb3duLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyA9ICQodGhpcylcblxuICAgIGlmICgkdGhpcy5pcygnLmRpc2FibGVkLCA6ZGlzYWJsZWQnKSkgcmV0dXJuXG5cbiAgICB2YXIgJHBhcmVudCAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgdmFyIGlzQWN0aXZlID0gJHBhcmVudC5oYXNDbGFzcygnb3BlbicpXG5cbiAgICBjbGVhck1lbnVzKClcblxuICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgISRwYXJlbnQuY2xvc2VzdCgnLm5hdmJhci1uYXYnKS5sZW5ndGgpIHtcbiAgICAgICAgLy8gaWYgbW9iaWxlIHdlIHVzZSBhIGJhY2tkcm9wIGJlY2F1c2UgY2xpY2sgZXZlbnRzIGRvbid0IGRlbGVnYXRlXG4gICAgICAgICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgICAgICAgLmFkZENsYXNzKCdkcm9wZG93bi1iYWNrZHJvcCcpXG4gICAgICAgICAgLmluc2VydEFmdGVyKCQodGhpcykpXG4gICAgICAgICAgLm9uKCdjbGljaycsIGNsZWFyTWVudXMpXG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0geyByZWxhdGVkVGFyZ2V0OiB0aGlzIH1cbiAgICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnc2hvdy5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgICR0aGlzXG4gICAgICAgIC50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKVxuXG4gICAgICAkcGFyZW50XG4gICAgICAgIC50b2dnbGVDbGFzcygnb3BlbicpXG4gICAgICAgIC50cmlnZ2VyKCdzaG93bi5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCEvKDM4fDQwfDI3fDMyKS8udGVzdChlLndoaWNoKSB8fCAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm5cblxuICAgIHZhciAkdGhpcyA9ICQodGhpcylcblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIGlmICgkdGhpcy5pcygnLmRpc2FibGVkLCA6ZGlzYWJsZWQnKSkgcmV0dXJuXG5cbiAgICB2YXIgJHBhcmVudCAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgdmFyIGlzQWN0aXZlID0gJHBhcmVudC5oYXNDbGFzcygnb3BlbicpXG5cbiAgICBpZiAoIWlzQWN0aXZlICYmIGUud2hpY2ggIT0gMjcgfHwgaXNBY3RpdmUgJiYgZS53aGljaCA9PSAyNykge1xuICAgICAgaWYgKGUud2hpY2ggPT0gMjcpICRwYXJlbnQuZmluZCh0b2dnbGUpLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgIHJldHVybiAkdGhpcy50cmlnZ2VyKCdjbGljaycpXG4gICAgfVxuXG4gICAgdmFyIGRlc2MgPSAnIGxpOm5vdCguZGlzYWJsZWQpOnZpc2libGUgYSdcbiAgICB2YXIgJGl0ZW1zID0gJHBhcmVudC5maW5kKCcuZHJvcGRvd24tbWVudScgKyBkZXNjKVxuXG4gICAgaWYgKCEkaXRlbXMubGVuZ3RoKSByZXR1cm5cblxuICAgIHZhciBpbmRleCA9ICRpdGVtcy5pbmRleChlLnRhcmdldClcblxuICAgIGlmIChlLndoaWNoID09IDM4ICYmIGluZGV4ID4gMCkgICAgICAgICAgICAgICAgIGluZGV4LS0gICAgICAgICAvLyB1cFxuICAgIGlmIChlLndoaWNoID09IDQwICYmIGluZGV4IDwgJGl0ZW1zLmxlbmd0aCAtIDEpIGluZGV4KysgICAgICAgICAvLyBkb3duXG4gICAgaWYgKCF+aW5kZXgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAwXG5cbiAgICAkaXRlbXMuZXEoaW5kZXgpLnRyaWdnZXIoJ2ZvY3VzJylcbiAgfVxuXG5cbiAgLy8gRFJPUERPV04gUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy5kcm9wZG93bicpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuZHJvcGRvd24nLCAoZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dLmNhbGwoJHRoaXMpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmRyb3Bkb3duXG5cbiAgJC5mbi5kcm9wZG93biAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmRyb3Bkb3duLkNvbnN0cnVjdG9yID0gRHJvcGRvd25cblxuXG4gIC8vIERST1BET1dOIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5kcm9wZG93bi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uZHJvcGRvd24gPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBBUFBMWSBUTyBTVEFOREFSRCBEUk9QRE9XTiBFTEVNRU5UU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsIGNsZWFyTWVudXMpXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsICcuZHJvcGRvd24gZm9ybScsIGZ1bmN0aW9uIChlKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCkgfSlcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlKVxuICAgIC5vbigna2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaScsIHRvZ2dsZSwgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24pXG4gICAgLm9uKCdrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgJy5kcm9wZG93bi1tZW51JywgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IG1vZGFsLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jbW9kYWxzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gTU9EQUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgICAgICAgPSBvcHRpb25zXG4gICAgdGhpcy4kYm9keSAgICAgICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJGVsZW1lbnQgICAgICAgICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLiRkaWFsb2cgICAgICAgICAgICAgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5tb2RhbC1kaWFsb2cnKVxuICAgIHRoaXMuJGJhY2tkcm9wICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLmlzU2hvd24gICAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5vcmlnaW5hbEJvZHlQYWQgICAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggICAgICA9IDBcbiAgICB0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdGUpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLmZpbmQoJy5tb2RhbC1jb250ZW50JylcbiAgICAgICAgLmxvYWQodGhpcy5vcHRpb25zLnJlbW90ZSwgJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdsb2FkZWQuYnMubW9kYWwnKVxuICAgICAgICB9LCB0aGlzKSlcbiAgICB9XG4gIH1cblxuICBNb2RhbC5WRVJTSU9OICA9ICczLjMuNSdcblxuICBNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMzAwXG4gIE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBNb2RhbC5ERUZBVUxUUyA9IHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBzaG93OiB0cnVlXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KF9yZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgZSAgICA9ICQuRXZlbnQoJ3Nob3cuYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgIGlmICh0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzU2hvd24gPSB0cnVlXG5cbiAgICB0aGlzLmNoZWNrU2Nyb2xsYmFyKClcbiAgICB0aGlzLnNldFNjcm9sbGJhcigpXG4gICAgdGhpcy4kYm9keS5hZGRDbGFzcygnbW9kYWwtb3BlbicpXG5cbiAgICB0aGlzLmVzY2FwZSgpXG4gICAgdGhpcy5yZXNpemUoKVxuXG4gICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcsICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLCAkLnByb3h5KHRoaXMuaGlkZSwgdGhpcykpXG5cbiAgICB0aGlzLiRkaWFsb2cub24oJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vbmUoJ21vdXNldXAuZGlzbWlzcy5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGF0LiRlbGVtZW50KSkgdGhhdC5pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoYXQuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICBpZiAoIXRoYXQuJGVsZW1lbnQucGFyZW50KCkubGVuZ3RoKSB7XG4gICAgICAgIHRoYXQuJGVsZW1lbnQuYXBwZW5kVG8odGhhdC4kYm9keSkgLy8gZG9uJ3QgbW92ZSBtb2RhbHMgZG9tIHBvc2l0aW9uXG4gICAgICB9XG5cbiAgICAgIHRoYXQuJGVsZW1lbnRcbiAgICAgICAgLnNob3coKVxuICAgICAgICAuc2Nyb2xsVG9wKDApXG5cbiAgICAgIHRoYXQuYWRqdXN0RGlhbG9nKClcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhhdC4kZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICB0aGF0LmVuZm9yY2VGb2N1cygpXG5cbiAgICAgIHZhciBlID0gJC5FdmVudCgnc2hvd24uYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICAgIHRyYW5zaXRpb24gP1xuICAgICAgICB0aGF0LiRkaWFsb2cgLy8gd2FpdCBmb3IgbW9kYWwgdG8gc2xpZGUgaW5cbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpLnRyaWdnZXIoZSlcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGUgPSAkLkV2ZW50KCdoaWRlLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKCF0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzU2hvd24gPSBmYWxzZVxuXG4gICAgdGhpcy5lc2NhcGUoKVxuICAgIHRoaXMucmVzaXplKClcblxuICAgICQoZG9jdW1lbnQpLm9mZignZm9jdXNpbi5icy5tb2RhbCcpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAucmVtb3ZlQ2xhc3MoJ2luJylcbiAgICAgIC5vZmYoJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnKVxuICAgICAgLm9mZignbW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGRpYWxvZy5vZmYoJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJylcblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsICQucHJveHkodGhpcy5oaWRlTW9kYWwsIHRoaXMpKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgdGhpcy5oaWRlTW9kYWwoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmVuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKGRvY3VtZW50KVxuICAgICAgLm9mZignZm9jdXNpbi5icy5tb2RhbCcpIC8vIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgLm9uKCdmb2N1c2luLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAodGhpcy4kZWxlbWVudFswXSAhPT0gZS50YXJnZXQgJiYgIXRoaXMuJGVsZW1lbnQuaGFzKGUudGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcykpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuZXNjYXBlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmtleWJvYXJkKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUud2hpY2ggPT0gMjcgJiYgdGhpcy5oaWRlKClcbiAgICAgIH0sIHRoaXMpKVxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTaG93bikge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2tleWRvd24uZGlzbWlzcy5icy5tb2RhbCcpXG4gICAgfVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc1Nob3duKSB7XG4gICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5icy5tb2RhbCcsICQucHJveHkodGhpcy5oYW5kbGVVcGRhdGUsIHRoaXMpKVxuICAgIH0gZWxzZSB7XG4gICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuYnMubW9kYWwnKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5oaWRlTW9kYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgdGhpcy4kZWxlbWVudC5oaWRlKClcbiAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuJGJvZHkucmVtb3ZlQ2xhc3MoJ21vZGFsLW9wZW4nKVxuICAgICAgdGhhdC5yZXNldEFkanVzdG1lbnRzKClcbiAgICAgIHRoYXQucmVzZXRTY3JvbGxiYXIoKVxuICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdoaWRkZW4uYnMubW9kYWwnKVxuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kYmFja2Ryb3AgJiYgdGhpcy4kYmFja2Ryb3AucmVtb3ZlKClcbiAgICB0aGlzLiRiYWNrZHJvcCA9IG51bGxcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5iYWNrZHJvcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBhbmltYXRlID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID8gJ2ZhZGUnIDogJydcblxuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmJhY2tkcm9wKSB7XG4gICAgICB2YXIgZG9BbmltYXRlID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgYW5pbWF0ZVxuXG4gICAgICB0aGlzLiRiYWNrZHJvcCA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgICAgIC5hZGRDbGFzcygnbW9kYWwtYmFja2Ryb3AgJyArIGFuaW1hdGUpXG4gICAgICAgIC5hcHBlbmRUbyh0aGlzLiRib2R5KVxuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAodGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgdGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkgcmV0dXJuXG4gICAgICAgIHRoaXMub3B0aW9ucy5iYWNrZHJvcCA9PSAnc3RhdGljJ1xuICAgICAgICAgID8gdGhpcy4kZWxlbWVudFswXS5mb2N1cygpXG4gICAgICAgICAgOiB0aGlzLmhpZGUoKVxuICAgICAgfSwgdGhpcykpXG5cbiAgICAgIGlmIChkb0FuaW1hdGUpIHRoaXMuJGJhY2tkcm9wWzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuXG4gICAgICB0aGlzLiRiYWNrZHJvcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICBpZiAoIWNhbGxiYWNrKSByZXR1cm5cblxuICAgICAgZG9BbmltYXRlID9cbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFjaylcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjYWxsYmFjaygpXG5cbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24gJiYgdGhpcy4kYmFja2Ryb3ApIHtcbiAgICAgIHRoaXMuJGJhY2tkcm9wLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAgIHZhciBjYWxsYmFja1JlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5yZW1vdmVCYWNrZHJvcCgpXG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAgIHRoaXMuJGJhY2tkcm9wXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY2FsbGJhY2tSZW1vdmUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgY2FsbGJhY2tSZW1vdmUoKVxuXG4gICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIC8vIHRoZXNlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcblxuICBNb2RhbC5wcm90b3R5cGUuaGFuZGxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYWRqdXN0RGlhbG9nKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5hZGp1c3REaWFsb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1vZGFsSXNPdmVyZmxvd2luZyA9IHRoaXMuJGVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuXG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgcGFkZGluZ0xlZnQ6ICAhdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiBtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgJiYgIW1vZGFsSXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAnJ1xuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICBwYWRkaW5nTGVmdDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6ICcnXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5jaGVja1Njcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnVsbFdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgICBpZiAoIWZ1bGxXaW5kb3dXaWR0aCkgeyAvLyB3b3JrYXJvdW5kIGZvciBtaXNzaW5nIHdpbmRvdy5pbm5lcldpZHRoIGluIElFOFxuICAgICAgdmFyIGRvY3VtZW50RWxlbWVudFJlY3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGZ1bGxXaW5kb3dXaWR0aCA9IGRvY3VtZW50RWxlbWVudFJlY3QucmlnaHQgLSBNYXRoLmFicyhkb2N1bWVudEVsZW1lbnRSZWN0LmxlZnQpXG4gICAgfVxuICAgIHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDwgZnVsbFdpbmRvd1dpZHRoXG4gICAgdGhpcy5zY3JvbGxiYXJXaWR0aCA9IHRoaXMubWVhc3VyZVNjcm9sbGJhcigpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBib2R5UGFkID0gcGFyc2VJbnQoKHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgfHwgMCksIDEwKVxuICAgIHRoaXMub3JpZ2luYWxCb2R5UGFkID0gZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgfHwgJydcbiAgICBpZiAodGhpcy5ib2R5SXNPdmVyZmxvd2luZykgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBib2R5UGFkICsgdGhpcy5zY3JvbGxiYXJXaWR0aClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsIHRoaXMub3JpZ2luYWxCb2R5UGFkKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm1lYXN1cmVTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7IC8vIHRoeCB3YWxzaFxuICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnXG4gICAgdGhpcy4kYm9keS5hcHBlbmQoc2Nyb2xsRGl2KVxuICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aFxuICAgIHRoaXMuJGJvZHlbMF0ucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KVxuICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aFxuICB9XG5cblxuICAvLyBNT0RBTCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24sIF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMubW9kYWwnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgTW9kYWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMubW9kYWwnLCAoZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKF9yZWxhdGVkVGFyZ2V0KVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5zaG93KSBkYXRhLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLm1vZGFsXG5cbiAgJC5mbi5tb2RhbCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLm1vZGFsLkNvbnN0cnVjdG9yID0gTW9kYWxcblxuXG4gIC8vIE1PREFMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5tb2RhbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4ubW9kYWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBNT0RBTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5tb2RhbC5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgdmFyIGhyZWYgICAgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSkpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB2YXIgb3B0aW9uICA9ICR0YXJnZXQuZGF0YSgnYnMubW9kYWwnKSA/ICd0b2dnbGUnIDogJC5leHRlbmQoeyByZW1vdGU6ICEvIy8udGVzdChocmVmKSAmJiBocmVmIH0sICR0YXJnZXQuZGF0YSgpLCAkdGhpcy5kYXRhKCkpXG5cbiAgICBpZiAoJHRoaXMuaXMoJ2EnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAkdGFyZ2V0Lm9uZSgnc2hvdy5icy5tb2RhbCcsIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybiAvLyBvbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICAkdGFyZ2V0Lm9uZSgnaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkdGhpcy5pcygnOnZpc2libGUnKSAmJiAkdGhpcy50cmlnZ2VyKCdmb2N1cycpXG4gICAgICB9KVxuICAgIH0pXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uLCB0aGlzKVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0b29sdGlwLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdG9vbHRpcFxuICogSW5zcGlyZWQgYnkgdGhlIG9yaWdpbmFsIGpRdWVyeS50aXBzeSBieSBKYXNvbiBGcmFtZVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFRPT0xUSVAgUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBUb29sdGlwID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgICAgICAgPSBudWxsXG4gICAgdGhpcy5vcHRpb25zICAgID0gbnVsbFxuICAgIHRoaXMuZW5hYmxlZCAgICA9IG51bGxcbiAgICB0aGlzLnRpbWVvdXQgICAgPSBudWxsXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuICAgIHRoaXMuJGVsZW1lbnQgICA9IG51bGxcbiAgICB0aGlzLmluU3RhdGUgICAgPSBudWxsXG5cbiAgICB0aGlzLmluaXQoJ3Rvb2x0aXAnLCBlbGVtZW50LCBvcHRpb25zKVxuICB9XG5cbiAgVG9vbHRpcC5WRVJTSU9OICA9ICczLjMuNSdcblxuICBUb29sdGlwLlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBUb29sdGlwLkRFRkFVTFRTID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZWxheTogMCxcbiAgICBodG1sOiBmYWxzZSxcbiAgICBjb250YWluZXI6IGZhbHNlLFxuICAgIHZpZXdwb3J0OiB7XG4gICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgcGFkZGluZzogMFxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAodHlwZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuZW5hYmxlZCAgID0gdHJ1ZVxuICAgIHRoaXMudHlwZSAgICAgID0gdHlwZVxuICAgIHRoaXMuJGVsZW1lbnQgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgID0gdGhpcy5nZXRPcHRpb25zKG9wdGlvbnMpXG4gICAgdGhpcy4kdmlld3BvcnQgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgJCgkLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLnZpZXdwb3J0KSA/IHRoaXMub3B0aW9ucy52aWV3cG9ydC5jYWxsKHRoaXMsIHRoaXMuJGVsZW1lbnQpIDogKHRoaXMub3B0aW9ucy52aWV3cG9ydC5zZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMudmlld3BvcnQpKVxuICAgIHRoaXMuaW5TdGF0ZSAgID0geyBjbGljazogZmFsc2UsIGhvdmVyOiBmYWxzZSwgZm9jdXM6IGZhbHNlIH1cblxuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdIGluc3RhbmNlb2YgZG9jdW1lbnQuY29uc3RydWN0b3IgJiYgIXRoaXMub3B0aW9ucy5zZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgc2VsZWN0b3JgIG9wdGlvbiBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIGluaXRpYWxpemluZyAnICsgdGhpcy50eXBlICsgJyBvbiB0aGUgd2luZG93LmRvY3VtZW50IG9iamVjdCEnKVxuICAgIH1cblxuICAgIHZhciB0cmlnZ2VycyA9IHRoaXMub3B0aW9ucy50cmlnZ2VyLnNwbGl0KCcgJylcblxuICAgIGZvciAodmFyIGkgPSB0cmlnZ2Vycy5sZW5ndGg7IGktLTspIHtcbiAgICAgIHZhciB0cmlnZ2VyID0gdHJpZ2dlcnNbaV1cblxuICAgICAgaWYgKHRyaWdnZXIgPT0gJ2NsaWNrJykge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy50b2dnbGUsIHRoaXMpKVxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9ICdtYW51YWwnKSB7XG4gICAgICAgIHZhciBldmVudEluICA9IHRyaWdnZXIgPT0gJ2hvdmVyJyA/ICdtb3VzZWVudGVyJyA6ICdmb2N1c2luJ1xuICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09ICdob3ZlcicgPyAnbW91c2VsZWF2ZScgOiAnZm9jdXNvdXQnXG5cbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudEluICArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMuZW50ZXIsIHRoaXMpKVxuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKGV2ZW50T3V0ICsgJy4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy5sZWF2ZSwgdGhpcykpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLnNlbGVjdG9yID9cbiAgICAgICh0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgeyB0cmlnZ2VyOiAnbWFudWFsJywgc2VsZWN0b3I6ICcnIH0pKSA6XG4gICAgICB0aGlzLmZpeFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUb29sdGlwLkRFRkFVTFRTXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuZ2V0RGVmYXVsdHMoKSwgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpXG5cbiAgICBpZiAob3B0aW9ucy5kZWxheSAmJiB0eXBlb2Ygb3B0aW9ucy5kZWxheSA9PSAnbnVtYmVyJykge1xuICAgICAgb3B0aW9ucy5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogb3B0aW9ucy5kZWxheSxcbiAgICAgICAgaGlkZTogb3B0aW9ucy5kZWxheVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWxlZ2F0ZU9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgID0ge31cbiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmdldERlZmF1bHRzKClcblxuICAgIHRoaXMuX29wdGlvbnMgJiYgJC5lYWNoKHRoaXMuX29wdGlvbnMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoZGVmYXVsdHNba2V5XSAhPSB2YWx1ZSkgb3B0aW9uc1trZXldID0gdmFsdWVcbiAgICB9KVxuXG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBzZWxmID0gb2JqIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvciA/XG4gICAgICBvYmogOiAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICBzZWxmID0gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXG4gICAgICAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKVxuICAgIH1cblxuICAgIGlmIChvYmogaW5zdGFuY2VvZiAkLkV2ZW50KSB7XG4gICAgICBzZWxmLmluU3RhdGVbb2JqLnR5cGUgPT0gJ2ZvY3VzaW4nID8gJ2ZvY3VzJyA6ICdob3ZlciddID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChzZWxmLnRpcCgpLmhhc0NsYXNzKCdpbicpIHx8IHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSB7XG4gICAgICBzZWxmLmhvdmVyU3RhdGUgPSAnaW4nXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ2luJ1xuXG4gICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5zaG93KSByZXR1cm4gc2VsZi5zaG93KClcblxuICAgIHNlbGYudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSBzZWxmLnNob3coKVxuICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5zaG93KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaXNJblN0YXRlVHJ1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5pblN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5pblN0YXRlW2tleV0pIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgc2VsZiA9IG9iaiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IgP1xuICAgICAgb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICghc2VsZikge1xuICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iai5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c291dCcgPyAnZm9jdXMnIDogJ2hvdmVyJ10gPSBmYWxzZVxuICAgIH1cblxuICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgcmV0dXJuXG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ291dCdcblxuICAgIGlmICghc2VsZi5vcHRpb25zLmRlbGF5IHx8ICFzZWxmLm9wdGlvbnMuZGVsYXkuaGlkZSkgcmV0dXJuIHNlbGYuaGlkZSgpXG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ291dCcpIHNlbGYuaGlkZSgpXG4gICAgfSwgc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlID0gJC5FdmVudCgnc2hvdy5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKHRoaXMuaGFzQ29udGVudCgpICYmIHRoaXMuZW5hYmxlZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICAgIHZhciBpbkRvbSA9ICQuY29udGFpbnModGhpcy4kZWxlbWVudFswXS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy4kZWxlbWVudFswXSlcbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpbkRvbSkgcmV0dXJuXG4gICAgICB2YXIgdGhhdCA9IHRoaXNcblxuICAgICAgdmFyICR0aXAgPSB0aGlzLnRpcCgpXG5cbiAgICAgIHZhciB0aXBJZCA9IHRoaXMuZ2V0VUlEKHRoaXMudHlwZSlcblxuICAgICAgdGhpcy5zZXRDb250ZW50KClcbiAgICAgICR0aXAuYXR0cignaWQnLCB0aXBJZClcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScsIHRpcElkKVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikgJHRpcC5hZGRDbGFzcygnZmFkZScpXG5cbiAgICAgIHZhciBwbGFjZW1lbnQgPSB0eXBlb2YgdGhpcy5vcHRpb25zLnBsYWNlbWVudCA9PSAnZnVuY3Rpb24nID9cbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudC5jYWxsKHRoaXMsICR0aXBbMF0sIHRoaXMuJGVsZW1lbnRbMF0pIDpcbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudFxuXG4gICAgICB2YXIgYXV0b1Rva2VuID0gL1xccz9hdXRvP1xccz8vaVxuICAgICAgdmFyIGF1dG9QbGFjZSA9IGF1dG9Ub2tlbi50ZXN0KHBsYWNlbWVudClcbiAgICAgIGlmIChhdXRvUGxhY2UpIHBsYWNlbWVudCA9IHBsYWNlbWVudC5yZXBsYWNlKGF1dG9Ub2tlbiwgJycpIHx8ICd0b3AnXG5cbiAgICAgICR0aXBcbiAgICAgICAgLmRldGFjaCgpXG4gICAgICAgIC5jc3MoeyB0b3A6IDAsIGxlZnQ6IDAsIGRpc3BsYXk6ICdibG9jaycgfSlcbiAgICAgICAgLmFkZENsYXNzKHBsYWNlbWVudClcbiAgICAgICAgLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHRoaXMpXG5cbiAgICAgIHRoaXMub3B0aW9ucy5jb250YWluZXIgPyAkdGlwLmFwcGVuZFRvKHRoaXMub3B0aW9ucy5jb250YWluZXIpIDogJHRpcC5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KVxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdpbnNlcnRlZC5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgICB2YXIgcG9zICAgICAgICAgID0gdGhpcy5nZXRQb3NpdGlvbigpXG4gICAgICB2YXIgYWN0dWFsV2lkdGggID0gJHRpcFswXS5vZmZzZXRXaWR0aFxuICAgICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICAgIGlmIChhdXRvUGxhY2UpIHtcbiAgICAgICAgdmFyIG9yZ1BsYWNlbWVudCA9IHBsYWNlbWVudFxuICAgICAgICB2YXIgdmlld3BvcnREaW0gPSB0aGlzLmdldFBvc2l0aW9uKHRoaXMuJHZpZXdwb3J0KVxuXG4gICAgICAgIHBsYWNlbWVudCA9IHBsYWNlbWVudCA9PSAnYm90dG9tJyAmJiBwb3MuYm90dG9tICsgYWN0dWFsSGVpZ2h0ID4gdmlld3BvcnREaW0uYm90dG9tID8gJ3RvcCcgICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgJiYgcG9zLnRvcCAgICAtIGFjdHVhbEhlaWdodCA8IHZpZXdwb3J0RGltLnRvcCAgICA/ICdib3R0b20nIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICdyaWdodCcgICYmIHBvcy5yaWdodCAgKyBhY3R1YWxXaWR0aCAgPiB2aWV3cG9ydERpbS53aWR0aCAgPyAnbGVmdCcgICA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAnbGVmdCcgICAmJiBwb3MubGVmdCAgIC0gYWN0dWFsV2lkdGggIDwgdmlld3BvcnREaW0ubGVmdCAgID8gJ3JpZ2h0JyAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRcblxuICAgICAgICAkdGlwXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKG9yZ1BsYWNlbWVudClcbiAgICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KVxuICAgICAgfVxuXG4gICAgICB2YXIgY2FsY3VsYXRlZE9mZnNldCA9IHRoaXMuZ2V0Q2FsY3VsYXRlZE9mZnNldChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChjYWxjdWxhdGVkT2Zmc2V0LCBwbGFjZW1lbnQpXG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gdGhhdC5ob3ZlclN0YXRlXG4gICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignc2hvd24uYnMuJyArIHRoYXQudHlwZSlcbiAgICAgICAgdGhhdC5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PSAnb3V0JykgdGhhdC5sZWF2ZSh0aGF0KVxuICAgICAgfVxuXG4gICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiR0aXAuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAgICR0aXBcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNvbXBsZXRlKClcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5hcHBseVBsYWNlbWVudCA9IGZ1bmN0aW9uIChvZmZzZXQsIHBsYWNlbWVudCkge1xuICAgIHZhciAkdGlwICAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICB2YXIgaGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgIC8vIG1hbnVhbGx5IHJlYWQgbWFyZ2lucyBiZWNhdXNlIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpbmNsdWRlcyBkaWZmZXJlbmNlXG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlSW50KCR0aXAuY3NzKCdtYXJnaW4tdG9wJyksIDEwKVxuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VJbnQoJHRpcC5jc3MoJ21hcmdpbi1sZWZ0JyksIDEwKVxuXG4gICAgLy8gd2UgbXVzdCBjaGVjayBmb3IgTmFOIGZvciBpZSA4LzlcbiAgICBpZiAoaXNOYU4obWFyZ2luVG9wKSkgIG1hcmdpblRvcCAgPSAwXG4gICAgaWYgKGlzTmFOKG1hcmdpbkxlZnQpKSBtYXJnaW5MZWZ0ID0gMFxuXG4gICAgb2Zmc2V0LnRvcCAgKz0gbWFyZ2luVG9wXG4gICAgb2Zmc2V0LmxlZnQgKz0gbWFyZ2luTGVmdFxuXG4gICAgLy8gJC5mbi5vZmZzZXQgZG9lc24ndCByb3VuZCBwaXhlbCB2YWx1ZXNcbiAgICAvLyBzbyB3ZSB1c2Ugc2V0T2Zmc2V0IGRpcmVjdGx5IHdpdGggb3VyIG93biBmdW5jdGlvbiBCLTBcbiAgICAkLm9mZnNldC5zZXRPZmZzZXQoJHRpcFswXSwgJC5leHRlbmQoe1xuICAgICAgdXNpbmc6IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAkdGlwLmNzcyh7XG4gICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKHByb3BzLnRvcCksXG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChwcm9wcy5sZWZ0KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sIG9mZnNldCksIDApXG5cbiAgICAkdGlwLmFkZENsYXNzKCdpbicpXG5cbiAgICAvLyBjaGVjayB0byBzZWUgaWYgcGxhY2luZyB0aXAgaW4gbmV3IG9mZnNldCBjYXVzZWQgdGhlIHRpcCB0byByZXNpemUgaXRzZWxmXG4gICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICB2YXIgYWN0dWFsSGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgIGlmIChwbGFjZW1lbnQgPT0gJ3RvcCcgJiYgYWN0dWFsSGVpZ2h0ICE9IGhlaWdodCkge1xuICAgICAgb2Zmc2V0LnRvcCA9IG9mZnNldC50b3AgKyBoZWlnaHQgLSBhY3R1YWxIZWlnaHRcbiAgICB9XG5cbiAgICB2YXIgZGVsdGEgPSB0aGlzLmdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YShwbGFjZW1lbnQsIG9mZnNldCwgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgIGlmIChkZWx0YS5sZWZ0KSBvZmZzZXQubGVmdCArPSBkZWx0YS5sZWZ0XG4gICAgZWxzZSBvZmZzZXQudG9wICs9IGRlbHRhLnRvcFxuXG4gICAgdmFyIGlzVmVydGljYWwgICAgICAgICAgPSAvdG9wfGJvdHRvbS8udGVzdChwbGFjZW1lbnQpXG4gICAgdmFyIGFycm93RGVsdGEgICAgICAgICAgPSBpc1ZlcnRpY2FsID8gZGVsdGEubGVmdCAqIDIgLSB3aWR0aCArIGFjdHVhbFdpZHRoIDogZGVsdGEudG9wICogMiAtIGhlaWdodCArIGFjdHVhbEhlaWdodFxuICAgIHZhciBhcnJvd09mZnNldFBvc2l0aW9uID0gaXNWZXJ0aWNhbCA/ICdvZmZzZXRXaWR0aCcgOiAnb2Zmc2V0SGVpZ2h0J1xuXG4gICAgJHRpcC5vZmZzZXQob2Zmc2V0KVxuICAgIHRoaXMucmVwbGFjZUFycm93KGFycm93RGVsdGEsICR0aXBbMF1bYXJyb3dPZmZzZXRQb3NpdGlvbl0sIGlzVmVydGljYWwpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5yZXBsYWNlQXJyb3cgPSBmdW5jdGlvbiAoZGVsdGEsIGRpbWVuc2lvbiwgaXNWZXJ0aWNhbCkge1xuICAgIHRoaXMuYXJyb3coKVxuICAgICAgLmNzcyhpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCcsIDUwICogKDEgLSBkZWx0YSAvIGRpbWVuc2lvbikgKyAnJScpXG4gICAgICAuY3NzKGlzVmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JywgJycpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwICA9IHRoaXMudGlwKClcbiAgICB2YXIgdGl0bGUgPSB0aGlzLmdldFRpdGxlKClcblxuICAgICR0aXAuZmluZCgnLnRvb2x0aXAtaW5uZXInKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnZmFkZSBpbiB0b3AgYm90dG9tIGxlZnQgcmlnaHQnKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciAkdGlwID0gJCh0aGlzLiR0aXApXG4gICAgdmFyIGUgICAgPSAkLkV2ZW50KCdoaWRlLmJzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgIGlmICh0aGF0LmhvdmVyU3RhdGUgIT0gJ2luJykgJHRpcC5kZXRhY2goKVxuICAgICAgdGhhdC4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1kZXNjcmliZWRieScpXG4gICAgICAgIC50cmlnZ2VyKCdoaWRkZW4uYnMuJyArIHRoYXQudHlwZSlcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmICR0aXAuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAkdGlwXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNvbXBsZXRlKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICBjb21wbGV0ZSgpXG5cbiAgICB0aGlzLmhvdmVyU3RhdGUgPSBudWxsXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZml4VGl0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRlID0gdGhpcy4kZWxlbWVudFxuICAgIGlmICgkZS5hdHRyKCd0aXRsZScpIHx8IHR5cGVvZiAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJykgIT0gJ3N0cmluZycpIHtcbiAgICAgICRlLmF0dHIoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnLCAkZS5hdHRyKCd0aXRsZScpIHx8ICcnKS5hdHRyKCd0aXRsZScsICcnKVxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoJGVsZW1lbnQpIHtcbiAgICAkZWxlbWVudCAgID0gJGVsZW1lbnQgfHwgdGhpcy4kZWxlbWVudFxuXG4gICAgdmFyIGVsICAgICA9ICRlbGVtZW50WzBdXG4gICAgdmFyIGlzQm9keSA9IGVsLnRhZ05hbWUgPT0gJ0JPRFknXG5cbiAgICB2YXIgZWxSZWN0ICAgID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBpZiAoZWxSZWN0LndpZHRoID09IG51bGwpIHtcbiAgICAgIC8vIHdpZHRoIGFuZCBoZWlnaHQgYXJlIG1pc3NpbmcgaW4gSUU4LCBzbyBjb21wdXRlIHRoZW0gbWFudWFsbHk7IHNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzE0MDkzXG4gICAgICBlbFJlY3QgPSAkLmV4dGVuZCh7fSwgZWxSZWN0LCB7IHdpZHRoOiBlbFJlY3QucmlnaHQgLSBlbFJlY3QubGVmdCwgaGVpZ2h0OiBlbFJlY3QuYm90dG9tIC0gZWxSZWN0LnRvcCB9KVxuICAgIH1cbiAgICB2YXIgZWxPZmZzZXQgID0gaXNCb2R5ID8geyB0b3A6IDAsIGxlZnQ6IDAgfSA6ICRlbGVtZW50Lm9mZnNldCgpXG4gICAgdmFyIHNjcm9sbCAgICA9IHsgc2Nyb2xsOiBpc0JvZHkgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wIDogJGVsZW1lbnQuc2Nyb2xsVG9wKCkgfVxuICAgIHZhciBvdXRlckRpbXMgPSBpc0JvZHkgPyB7IHdpZHRoOiAkKHdpbmRvdykud2lkdGgoKSwgaGVpZ2h0OiAkKHdpbmRvdykuaGVpZ2h0KCkgfSA6IG51bGxcblxuICAgIHJldHVybiAkLmV4dGVuZCh7fSwgZWxSZWN0LCBzY3JvbGwsIG91dGVyRGltcywgZWxPZmZzZXQpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRDYWxjdWxhdGVkT2Zmc2V0ID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudCA9PSAnYm90dG9tJyA/IHsgdG9wOiBwb3MudG9wICsgcG9zLmhlaWdodCwgICBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCAvIDIgLSBhY3R1YWxXaWR0aCAvIDIgfSA6XG4gICAgICAgICAgIHBsYWNlbWVudCA9PSAndG9wJyAgICA/IHsgdG9wOiBwb3MudG9wIC0gYWN0dWFsSGVpZ2h0LCBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCAvIDIgLSBhY3R1YWxXaWR0aCAvIDIgfSA6XG4gICAgICAgICAgIHBsYWNlbWVudCA9PSAnbGVmdCcgICA/IHsgdG9wOiBwb3MudG9wICsgcG9zLmhlaWdodCAvIDIgLSBhY3R1YWxIZWlnaHQgLyAyLCBsZWZ0OiBwb3MubGVmdCAtIGFjdHVhbFdpZHRoIH0gOlxuICAgICAgICAvKiBwbGFjZW1lbnQgPT0gJ3JpZ2h0JyAqLyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggfVxuXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEgPSBmdW5jdGlvbiAocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpIHtcbiAgICB2YXIgZGVsdGEgPSB7IHRvcDogMCwgbGVmdDogMCB9XG4gICAgaWYgKCF0aGlzLiR2aWV3cG9ydCkgcmV0dXJuIGRlbHRhXG5cbiAgICB2YXIgdmlld3BvcnRQYWRkaW5nID0gdGhpcy5vcHRpb25zLnZpZXdwb3J0ICYmIHRoaXMub3B0aW9ucy52aWV3cG9ydC5wYWRkaW5nIHx8IDBcbiAgICB2YXIgdmlld3BvcnREaW1lbnNpb25zID0gdGhpcy5nZXRQb3NpdGlvbih0aGlzLiR2aWV3cG9ydClcblxuICAgIGlmICgvcmlnaHR8bGVmdC8udGVzdChwbGFjZW1lbnQpKSB7XG4gICAgICB2YXIgdG9wRWRnZU9mZnNldCAgICA9IHBvcy50b3AgLSB2aWV3cG9ydFBhZGRpbmcgLSB2aWV3cG9ydERpbWVuc2lvbnMuc2Nyb2xsXG4gICAgICB2YXIgYm90dG9tRWRnZU9mZnNldCA9IHBvcy50b3AgKyB2aWV3cG9ydFBhZGRpbmcgLSB2aWV3cG9ydERpbWVuc2lvbnMuc2Nyb2xsICsgYWN0dWFsSGVpZ2h0XG4gICAgICBpZiAodG9wRWRnZU9mZnNldCA8IHZpZXdwb3J0RGltZW5zaW9ucy50b3ApIHsgLy8gdG9wIG92ZXJmbG93XG4gICAgICAgIGRlbHRhLnRvcCA9IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgLSB0b3BFZGdlT2Zmc2V0XG4gICAgICB9IGVsc2UgaWYgKGJvdHRvbUVkZ2VPZmZzZXQgPiB2aWV3cG9ydERpbWVuc2lvbnMudG9wICsgdmlld3BvcnREaW1lbnNpb25zLmhlaWdodCkgeyAvLyBib3R0b20gb3ZlcmZsb3dcbiAgICAgICAgZGVsdGEudG9wID0gdmlld3BvcnREaW1lbnNpb25zLnRvcCArIHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQgLSBib3R0b21FZGdlT2Zmc2V0XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsZWZ0RWRnZU9mZnNldCAgPSBwb3MubGVmdCAtIHZpZXdwb3J0UGFkZGluZ1xuICAgICAgdmFyIHJpZ2h0RWRnZU9mZnNldCA9IHBvcy5sZWZ0ICsgdmlld3BvcnRQYWRkaW5nICsgYWN0dWFsV2lkdGhcbiAgICAgIGlmIChsZWZ0RWRnZU9mZnNldCA8IHZpZXdwb3J0RGltZW5zaW9ucy5sZWZ0KSB7IC8vIGxlZnQgb3ZlcmZsb3dcbiAgICAgICAgZGVsdGEubGVmdCA9IHZpZXdwb3J0RGltZW5zaW9ucy5sZWZ0IC0gbGVmdEVkZ2VPZmZzZXRcbiAgICAgIH0gZWxzZSBpZiAocmlnaHRFZGdlT2Zmc2V0ID4gdmlld3BvcnREaW1lbnNpb25zLnJpZ2h0KSB7IC8vIHJpZ2h0IG92ZXJmbG93XG4gICAgICAgIGRlbHRhLmxlZnQgPSB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCArIHZpZXdwb3J0RGltZW5zaW9ucy53aWR0aCAtIHJpZ2h0RWRnZU9mZnNldFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWx0YVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VGl0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRpdGxlXG4gICAgdmFyICRlID0gdGhpcy4kZWxlbWVudFxuICAgIHZhciBvICA9IHRoaXMub3B0aW9uc1xuXG4gICAgdGl0bGUgPSAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJylcbiAgICAgIHx8ICh0eXBlb2Ygby50aXRsZSA9PSAnZnVuY3Rpb24nID8gby50aXRsZS5jYWxsKCRlWzBdKSA6ICBvLnRpdGxlKVxuXG4gICAgcmV0dXJuIHRpdGxlXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRVSUQgPSBmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgZG8gcHJlZml4ICs9IH5+KE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKVxuICAgIHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKVxuICAgIHJldHVybiBwcmVmaXhcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnRpcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuJHRpcCkge1xuICAgICAgdGhpcy4kdGlwID0gJCh0aGlzLm9wdGlvbnMudGVtcGxhdGUpXG4gICAgICBpZiAodGhpcy4kdGlwLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLnR5cGUgKyAnIGB0ZW1wbGF0ZWAgb3B0aW9uIG11c3QgY29uc2lzdCBvZiBleGFjdGx5IDEgdG9wLWxldmVsIGVsZW1lbnQhJylcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuJHRpcFxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuYXJyb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLiRhcnJvdyA9IHRoaXMuJGFycm93IHx8IHRoaXMudGlwKCkuZmluZCgnLnRvb2x0aXAtYXJyb3cnKSlcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGVFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9ICF0aGlzLmVuYWJsZWRcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgaWYgKGUpIHtcbiAgICAgIHNlbGYgPSAkKGUuY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcbiAgICAgIGlmICghc2VsZikge1xuICAgICAgICBzZWxmID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZS5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgICAkKGUuY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZSkge1xuICAgICAgc2VsZi5pblN0YXRlLmNsaWNrID0gIXNlbGYuaW5TdGF0ZS5jbGlja1xuICAgICAgaWYgKHNlbGYuaXNJblN0YXRlVHJ1ZSgpKSBzZWxmLmVudGVyKHNlbGYpXG4gICAgICBlbHNlIHNlbGYubGVhdmUoc2VsZilcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi50aXAoKS5oYXNDbGFzcygnaW4nKSA/IHNlbGYubGVhdmUoc2VsZikgOiBzZWxmLmVudGVyKHNlbGYpXG4gICAgfVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KVxuICAgIHRoaXMuaGlkZShmdW5jdGlvbiAoKSB7XG4gICAgICB0aGF0LiRlbGVtZW50Lm9mZignLicgKyB0aGF0LnR5cGUpLnJlbW92ZURhdGEoJ2JzLicgKyB0aGF0LnR5cGUpXG4gICAgICBpZiAodGhhdC4kdGlwKSB7XG4gICAgICAgIHRoYXQuJHRpcC5kZXRhY2goKVxuICAgICAgfVxuICAgICAgdGhhdC4kdGlwID0gbnVsbFxuICAgICAgdGhhdC4kYXJyb3cgPSBudWxsXG4gICAgICB0aGF0LiR2aWV3cG9ydCA9IG51bGxcbiAgICB9KVxuICB9XG5cblxuICAvLyBUT09MVElQIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMudG9vbHRpcCcpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy50b29sdGlwJywgKGRhdGEgPSBuZXcgVG9vbHRpcCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4udG9vbHRpcFxuXG4gICQuZm4udG9vbHRpcCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IgPSBUb29sdGlwXG5cblxuICAvLyBUT09MVElQIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnRvb2x0aXAubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnRvb2x0aXAgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHBvcG92ZXIuanMgdjMuMy41XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNwb3BvdmVyc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFBPUE9WRVIgUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBQb3BvdmVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmluaXQoJ3BvcG92ZXInLCBlbGVtZW50LCBvcHRpb25zKVxuICB9XG5cbiAgaWYgKCEkLmZuLnRvb2x0aXApIHRocm93IG5ldyBFcnJvcignUG9wb3ZlciByZXF1aXJlcyB0b29sdGlwLmpzJylcblxuICBQb3BvdmVyLlZFUlNJT04gID0gJzMuMy41J1xuXG4gIFBvcG92ZXIuREVGQVVMVFMgPSAkLmV4dGVuZCh7fSwgJC5mbi50b29sdGlwLkNvbnN0cnVjdG9yLkRFRkFVTFRTLCB7XG4gICAgcGxhY2VtZW50OiAncmlnaHQnLFxuICAgIHRyaWdnZXI6ICdjbGljaycsXG4gICAgY29udGVudDogJycsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+PGgzIGNsYXNzPVwicG9wb3Zlci10aXRsZVwiPjwvaDM+PGRpdiBjbGFzcz1cInBvcG92ZXItY29udGVudFwiPjwvZGl2PjwvZGl2PidcbiAgfSlcblxuXG4gIC8vIE5PVEU6IFBPUE9WRVIgRVhURU5EUyB0b29sdGlwLmpzXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUgPSAkLmV4dGVuZCh7fSwgJC5mbi50b29sdGlwLkNvbnN0cnVjdG9yLnByb3RvdHlwZSlcblxuICBQb3BvdmVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvcG92ZXJcblxuICBQb3BvdmVyLnByb3RvdHlwZS5nZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUG9wb3Zlci5ERUZBVUxUU1xuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRpcCAgICA9IHRoaXMudGlwKClcbiAgICB2YXIgdGl0bGUgICA9IHRoaXMuZ2V0VGl0bGUoKVxuICAgIHZhciBjb250ZW50ID0gdGhpcy5nZXRDb250ZW50KClcblxuICAgICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpXG4gICAgJHRpcC5maW5kKCcucG9wb3Zlci1jb250ZW50JykuY2hpbGRyZW4oKS5kZXRhY2goKS5lbmQoKVsgLy8gd2UgdXNlIGFwcGVuZCBmb3IgaHRtbCBvYmplY3RzIHRvIG1haW50YWluIGpzIGV2ZW50c1xuICAgICAgdGhpcy5vcHRpb25zLmh0bWwgPyAodHlwZW9mIGNvbnRlbnQgPT0gJ3N0cmluZycgPyAnaHRtbCcgOiAnYXBwZW5kJykgOiAndGV4dCdcbiAgICBdKGNvbnRlbnQpXG5cbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdmYWRlIHRvcCBib3R0b20gbGVmdCByaWdodCBpbicpXG5cbiAgICAvLyBJRTggZG9lc24ndCBhY2NlcHQgaGlkaW5nIHZpYSB0aGUgYDplbXB0eWAgcHNldWRvIHNlbGVjdG9yLCB3ZSBoYXZlIHRvIGRvXG4gICAgLy8gdGhpcyBtYW51YWxseSBieSBjaGVja2luZyB0aGUgY29udGVudHMuXG4gICAgaWYgKCEkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJykuaHRtbCgpKSAkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJykuaGlkZSgpXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRpdGxlKCkgfHwgdGhpcy5nZXRDb250ZW50KClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmdldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRlID0gdGhpcy4kZWxlbWVudFxuICAgIHZhciBvICA9IHRoaXMub3B0aW9uc1xuXG4gICAgcmV0dXJuICRlLmF0dHIoJ2RhdGEtY29udGVudCcpXG4gICAgICB8fCAodHlwZW9mIG8uY29udGVudCA9PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAgIG8uY29udGVudC5jYWxsKCRlWzBdKSA6XG4gICAgICAgICAgICBvLmNvbnRlbnQpXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuJGFycm93ID0gdGhpcy4kYXJyb3cgfHwgdGhpcy50aXAoKS5maW5kKCcuYXJyb3cnKSlcbiAgfVxuXG5cbiAgLy8gUE9QT1ZFUiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLnBvcG92ZXInKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChvcHRpb24pKSByZXR1cm5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicsIChkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnBvcG92ZXJcblxuICAkLmZuLnBvcG92ZXIgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5wb3BvdmVyLkNvbnN0cnVjdG9yID0gUG9wb3ZlclxuXG5cbiAgLy8gUE9QT1ZFUiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5wb3BvdmVyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5wb3BvdmVyID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBzY3JvbGxzcHkuanMgdjMuMy41XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNzY3JvbGxzcHlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBTQ1JPTExTUFkgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kYm9keSAgICAgICAgICA9ICQoZG9jdW1lbnQuYm9keSlcbiAgICB0aGlzLiRzY3JvbGxFbGVtZW50ID0gJChlbGVtZW50KS5pcyhkb2N1bWVudC5ib2R5KSA/ICQod2luZG93KSA6ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgID0gJC5leHRlbmQoe30sIFNjcm9sbFNweS5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLnNlbGVjdG9yICAgICAgID0gKHRoaXMub3B0aW9ucy50YXJnZXQgfHwgJycpICsgJyAubmF2IGxpID4gYSdcbiAgICB0aGlzLm9mZnNldHMgICAgICAgID0gW11cbiAgICB0aGlzLnRhcmdldHMgICAgICAgID0gW11cbiAgICB0aGlzLmFjdGl2ZVRhcmdldCAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsSGVpZ2h0ICAgPSAwXG5cbiAgICB0aGlzLiRzY3JvbGxFbGVtZW50Lm9uKCdzY3JvbGwuYnMuc2Nyb2xsc3B5JywgJC5wcm94eSh0aGlzLnByb2Nlc3MsIHRoaXMpKVxuICAgIHRoaXMucmVmcmVzaCgpXG4gICAgdGhpcy5wcm9jZXNzKClcbiAgfVxuXG4gIFNjcm9sbFNweS5WRVJTSU9OICA9ICczLjMuNSdcblxuICBTY3JvbGxTcHkuREVGQVVMVFMgPSB7XG4gICAgb2Zmc2V0OiAxMFxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJHNjcm9sbEVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KHRoaXMuJGJvZHlbMF0uc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ICAgICAgICAgID0gdGhpc1xuICAgIHZhciBvZmZzZXRNZXRob2QgID0gJ29mZnNldCdcbiAgICB2YXIgb2Zmc2V0QmFzZSAgICA9IDBcblxuICAgIHRoaXMub2Zmc2V0cyAgICAgID0gW11cbiAgICB0aGlzLnRhcmdldHMgICAgICA9IFtdXG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgPSB0aGlzLmdldFNjcm9sbEhlaWdodCgpXG5cbiAgICBpZiAoISQuaXNXaW5kb3codGhpcy4kc2Nyb2xsRWxlbWVudFswXSkpIHtcbiAgICAgIG9mZnNldE1ldGhvZCA9ICdwb3NpdGlvbidcbiAgICAgIG9mZnNldEJhc2UgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKClcbiAgICB9XG5cbiAgICB0aGlzLiRib2R5XG4gICAgICAuZmluZCh0aGlzLnNlbGVjdG9yKVxuICAgICAgLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWwgICA9ICQodGhpcylcbiAgICAgICAgdmFyIGhyZWYgID0gJGVsLmRhdGEoJ3RhcmdldCcpIHx8ICRlbC5hdHRyKCdocmVmJylcbiAgICAgICAgdmFyICRocmVmID0gL14jLi8udGVzdChocmVmKSAmJiAkKGhyZWYpXG5cbiAgICAgICAgcmV0dXJuICgkaHJlZlxuICAgICAgICAgICYmICRocmVmLmxlbmd0aFxuICAgICAgICAgICYmICRocmVmLmlzKCc6dmlzaWJsZScpXG4gICAgICAgICAgJiYgW1skaHJlZltvZmZzZXRNZXRob2RdKCkudG9wICsgb2Zmc2V0QmFzZSwgaHJlZl1dKSB8fCBudWxsXG4gICAgICB9KVxuICAgICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGFbMF0gLSBiWzBdIH0pXG4gICAgICAuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQub2Zmc2V0cy5wdXNoKHRoaXNbMF0pXG4gICAgICAgIHRoYXQudGFyZ2V0cy5wdXNoKHRoaXNbMV0pXG4gICAgICB9KVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiRzY3JvbGxFbGVtZW50LnNjcm9sbFRvcCgpICsgdGhpcy5vcHRpb25zLm9mZnNldFxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLmdldFNjcm9sbEhlaWdodCgpXG4gICAgdmFyIG1heFNjcm9sbCAgICA9IHRoaXMub3B0aW9ucy5vZmZzZXQgKyBzY3JvbGxIZWlnaHQgLSB0aGlzLiRzY3JvbGxFbGVtZW50LmhlaWdodCgpXG4gICAgdmFyIG9mZnNldHMgICAgICA9IHRoaXMub2Zmc2V0c1xuICAgIHZhciB0YXJnZXRzICAgICAgPSB0aGlzLnRhcmdldHNcbiAgICB2YXIgYWN0aXZlVGFyZ2V0ID0gdGhpcy5hY3RpdmVUYXJnZXRcbiAgICB2YXIgaVxuXG4gICAgaWYgKHRoaXMuc2Nyb2xsSGVpZ2h0ICE9IHNjcm9sbEhlaWdodCkge1xuICAgICAgdGhpcy5yZWZyZXNoKClcbiAgICB9XG5cbiAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgcmV0dXJuIGFjdGl2ZVRhcmdldCAhPSAoaSA9IHRhcmdldHNbdGFyZ2V0cy5sZW5ndGggLSAxXSkgJiYgdGhpcy5hY3RpdmF0ZShpKVxuICAgIH1cblxuICAgIGlmIChhY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgb2Zmc2V0c1swXSkge1xuICAgICAgdGhpcy5hY3RpdmVUYXJnZXQgPSBudWxsXG4gICAgICByZXR1cm4gdGhpcy5jbGVhcigpXG4gICAgfVxuXG4gICAgZm9yIChpID0gb2Zmc2V0cy5sZW5ndGg7IGktLTspIHtcbiAgICAgIGFjdGl2ZVRhcmdldCAhPSB0YXJnZXRzW2ldXG4gICAgICAgICYmIHNjcm9sbFRvcCA+PSBvZmZzZXRzW2ldXG4gICAgICAgICYmIChvZmZzZXRzW2kgKyAxXSA9PT0gdW5kZWZpbmVkIHx8IHNjcm9sbFRvcCA8IG9mZnNldHNbaSArIDFdKVxuICAgICAgICAmJiB0aGlzLmFjdGl2YXRlKHRhcmdldHNbaV0pXG4gICAgfVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IHRhcmdldFxuXG4gICAgdGhpcy5jbGVhcigpXG5cbiAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yICtcbiAgICAgICdbZGF0YS10YXJnZXQ9XCInICsgdGFyZ2V0ICsgJ1wiXSwnICtcbiAgICAgIHRoaXMuc2VsZWN0b3IgKyAnW2hyZWY9XCInICsgdGFyZ2V0ICsgJ1wiXSdcblxuICAgIHZhciBhY3RpdmUgPSAkKHNlbGVjdG9yKVxuICAgICAgLnBhcmVudHMoJ2xpJylcbiAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcblxuICAgIGlmIChhY3RpdmUucGFyZW50KCcuZHJvcGRvd24tbWVudScpLmxlbmd0aCkge1xuICAgICAgYWN0aXZlID0gYWN0aXZlXG4gICAgICAgIC5jbG9zZXN0KCdsaS5kcm9wZG93bicpXG4gICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICB9XG5cbiAgICBhY3RpdmUudHJpZ2dlcignYWN0aXZhdGUuYnMuc2Nyb2xsc3B5JylcbiAgfVxuXG4gIFNjcm9sbFNweS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCh0aGlzLnNlbGVjdG9yKVxuICAgICAgLnBhcmVudHNVbnRpbCh0aGlzLm9wdGlvbnMudGFyZ2V0LCAnLmFjdGl2ZScpXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gIH1cblxuXG4gIC8vIFNDUk9MTFNQWSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuc2Nyb2xsc3B5JylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknLCAoZGF0YSA9IG5ldyBTY3JvbGxTcHkodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnNjcm9sbHNweVxuXG4gICQuZm4uc2Nyb2xsc3B5ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uc2Nyb2xsc3B5LkNvbnN0cnVjdG9yID0gU2Nyb2xsU3B5XG5cblxuICAvLyBTQ1JPTExTUFkgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5zY3JvbGxzcHkubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnNjcm9sbHNweSA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIFNDUk9MTFNQWSBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT09PT1cblxuICAkKHdpbmRvdykub24oJ2xvYWQuYnMuc2Nyb2xsc3B5LmRhdGEtYXBpJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXNweT1cInNjcm9sbFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRzcHkgPSAkKHRoaXMpXG4gICAgICBQbHVnaW4uY2FsbCgkc3B5LCAkc3B5LmRhdGEoKSlcbiAgICB9KVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0YWIuanMgdjMuMy41XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyN0YWJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVEFCIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgVGFiID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAvLyBqc2NzOmRpc2FibGUgcmVxdWlyZURvbGxhckJlZm9yZWpRdWVyeUFzc2lnbm1lbnRcbiAgICB0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gICAgLy8ganNjczplbmFibGUgcmVxdWlyZURvbGxhckJlZm9yZWpRdWVyeUFzc2lnbm1lbnRcbiAgfVxuXG4gIFRhYi5WRVJTSU9OID0gJzMuMy41J1xuXG4gIFRhYi5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgVGFiLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGhpcyAgICA9IHRoaXMuZWxlbWVudFxuICAgIHZhciAkdWwgICAgICA9ICR0aGlzLmNsb3Nlc3QoJ3VsOm5vdCguZHJvcGRvd24tbWVudSknKVxuICAgIHZhciBzZWxlY3RvciA9ICR0aGlzLmRhdGEoJ3RhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIGlmICgkdGhpcy5wYXJlbnQoJ2xpJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm5cblxuICAgIHZhciAkcHJldmlvdXMgPSAkdWwuZmluZCgnLmFjdGl2ZTpsYXN0IGEnKVxuICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KCdoaWRlLmJzLnRhYicsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6ICR0aGlzWzBdXG4gICAgfSlcbiAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudCgnc2hvdy5icy50YWInLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiAkcHJldmlvdXNbMF1cbiAgICB9KVxuXG4gICAgJHByZXZpb3VzLnRyaWdnZXIoaGlkZUV2ZW50KVxuICAgICR0aGlzLnRyaWdnZXIoc2hvd0V2ZW50KVxuXG4gICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdmFyICR0YXJnZXQgPSAkKHNlbGVjdG9yKVxuXG4gICAgdGhpcy5hY3RpdmF0ZSgkdGhpcy5jbG9zZXN0KCdsaScpLCAkdWwpXG4gICAgdGhpcy5hY3RpdmF0ZSgkdGFyZ2V0LCAkdGFyZ2V0LnBhcmVudCgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAkcHJldmlvdXMudHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICdoaWRkZW4uYnMudGFiJyxcbiAgICAgICAgcmVsYXRlZFRhcmdldDogJHRoaXNbMF1cbiAgICAgIH0pXG4gICAgICAkdGhpcy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3Nob3duLmJzLnRhYicsXG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6ICRwcmV2aW91c1swXVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgVGFiLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyICRhY3RpdmUgICAgPSBjb250YWluZXIuZmluZCgnPiAuYWN0aXZlJylcbiAgICB2YXIgdHJhbnNpdGlvbiA9IGNhbGxiYWNrXG4gICAgICAmJiAkLnN1cHBvcnQudHJhbnNpdGlvblxuICAgICAgJiYgKCRhY3RpdmUubGVuZ3RoICYmICRhY3RpdmUuaGFzQ2xhc3MoJ2ZhZGUnKSB8fCAhIWNvbnRhaW5lci5maW5kKCc+IC5mYWRlJykubGVuZ3RoKVxuXG4gICAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICRhY3RpdmVcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZmluZCgnPiAuZHJvcGRvd24tbWVudSA+IC5hY3RpdmUnKVxuICAgICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgLmVuZCgpXG4gICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG5cbiAgICAgIGVsZW1lbnRcbiAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJylcbiAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGggLy8gcmVmbG93IGZvciB0cmFuc2l0aW9uXG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2luJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2ZhZGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICAgIGVsZW1lbnRcbiAgICAgICAgICAuY2xvc2VzdCgnbGkuZHJvcGRvd24nKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgJGFjdGl2ZS5sZW5ndGggJiYgdHJhbnNpdGlvbiA/XG4gICAgICAkYWN0aXZlXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIG5leHQpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChUYWIuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgbmV4dCgpXG5cbiAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdpbicpXG4gIH1cblxuXG4gIC8vIFRBQiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy50YWInKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRhYicsIChkYXRhID0gbmV3IFRhYih0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4udGFiXG5cbiAgJC5mbi50YWIgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi50YWIuQ29uc3RydWN0b3IgPSBUYWJcblxuXG4gIC8vIFRBQiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT1cblxuICAkLmZuLnRhYi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4udGFiID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gVEFCIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PVxuXG4gIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIFBsdWdpbi5jYWxsKCQodGhpcyksICdzaG93JylcbiAgfVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJywgY2xpY2tIYW5kbGVyKVxuICAgIC5vbignY2xpY2suYnMudGFiLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cInBpbGxcIl0nLCBjbGlja0hhbmRsZXIpXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGFmZml4LmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWZmaXhcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBBRkZJWCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQWZmaXggPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBZmZpeC5ERUZBVUxUUywgb3B0aW9ucylcblxuICAgIHRoaXMuJHRhcmdldCA9ICQodGhpcy5vcHRpb25zLnRhcmdldClcbiAgICAgIC5vbignc2Nyb2xsLmJzLmFmZml4LmRhdGEtYXBpJywgJC5wcm94eSh0aGlzLmNoZWNrUG9zaXRpb24sIHRoaXMpKVxuICAgICAgLm9uKCdjbGljay5icy5hZmZpeC5kYXRhLWFwaScsICAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AsIHRoaXMpKVxuXG4gICAgdGhpcy4kZWxlbWVudCAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5hZmZpeGVkICAgICAgPSBudWxsXG4gICAgdGhpcy51bnBpbiAgICAgICAgPSBudWxsXG4gICAgdGhpcy5waW5uZWRPZmZzZXQgPSBudWxsXG5cbiAgICB0aGlzLmNoZWNrUG9zaXRpb24oKVxuICB9XG5cbiAgQWZmaXguVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgQWZmaXguUkVTRVQgICAgPSAnYWZmaXggYWZmaXgtdG9wIGFmZml4LWJvdHRvbSdcblxuICBBZmZpeC5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDAsXG4gICAgdGFyZ2V0OiB3aW5kb3dcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uIChzY3JvbGxIZWlnaHQsIGhlaWdodCwgb2Zmc2V0VG9wLCBvZmZzZXRCb3R0b20pIHtcbiAgICB2YXIgc2Nyb2xsVG9wICAgID0gdGhpcy4kdGFyZ2V0LnNjcm9sbFRvcCgpXG4gICAgdmFyIHBvc2l0aW9uICAgICA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KClcbiAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gdGhpcy4kdGFyZ2V0LmhlaWdodCgpXG5cbiAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwgJiYgdGhpcy5hZmZpeGVkID09ICd0b3AnKSByZXR1cm4gc2Nyb2xsVG9wIDwgb2Zmc2V0VG9wID8gJ3RvcCcgOiBmYWxzZVxuXG4gICAgaWYgKHRoaXMuYWZmaXhlZCA9PSAnYm90dG9tJykge1xuICAgICAgaWYgKG9mZnNldFRvcCAhPSBudWxsKSByZXR1cm4gKHNjcm9sbFRvcCArIHRoaXMudW5waW4gPD0gcG9zaXRpb24udG9wKSA/IGZhbHNlIDogJ2JvdHRvbSdcbiAgICAgIHJldHVybiAoc2Nyb2xsVG9wICsgdGFyZ2V0SGVpZ2h0IDw9IHNjcm9sbEhlaWdodCAtIG9mZnNldEJvdHRvbSkgPyBmYWxzZSA6ICdib3R0b20nXG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxpemluZyAgID0gdGhpcy5hZmZpeGVkID09IG51bGxcbiAgICB2YXIgY29sbGlkZXJUb3AgICAgPSBpbml0aWFsaXppbmcgPyBzY3JvbGxUb3AgOiBwb3NpdGlvbi50b3BcbiAgICB2YXIgY29sbGlkZXJIZWlnaHQgPSBpbml0aWFsaXppbmcgPyB0YXJnZXRIZWlnaHQgOiBoZWlnaHRcblxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiBzY3JvbGxUb3AgPD0gb2Zmc2V0VG9wKSByZXR1cm4gJ3RvcCdcbiAgICBpZiAob2Zmc2V0Qm90dG9tICE9IG51bGwgJiYgKGNvbGxpZGVyVG9wICsgY29sbGlkZXJIZWlnaHQgPj0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSkgcmV0dXJuICdib3R0b20nXG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5nZXRQaW5uZWRPZmZzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucGlubmVkT2Zmc2V0KSByZXR1cm4gdGhpcy5waW5uZWRPZmZzZXRcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKEFmZml4LlJFU0VUKS5hZGRDbGFzcygnYWZmaXgnKVxuICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHJldHVybiAodGhpcy5waW5uZWRPZmZzZXQgPSBwb3NpdGlvbi50b3AgLSBzY3JvbGxUb3ApXG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dCgkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcyksIDEpXG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHJldHVyblxuXG4gICAgdmFyIGhlaWdodCAgICAgICA9IHRoaXMuJGVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0ICAgICAgID0gdGhpcy5vcHRpb25zLm9mZnNldFxuICAgIHZhciBvZmZzZXRUb3AgICAgPSBvZmZzZXQudG9wXG4gICAgdmFyIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b21cbiAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gTWF0aC5tYXgoJChkb2N1bWVudCkuaGVpZ2h0KCksICQoZG9jdW1lbnQuYm9keSkuaGVpZ2h0KCkpXG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCAhPSAnb2JqZWN0JykgICAgICAgICBvZmZzZXRCb3R0b20gPSBvZmZzZXRUb3AgPSBvZmZzZXRcbiAgICBpZiAodHlwZW9mIG9mZnNldFRvcCA9PSAnZnVuY3Rpb24nKSAgICBvZmZzZXRUb3AgICAgPSBvZmZzZXQudG9wKHRoaXMuJGVsZW1lbnQpXG4gICAgaWYgKHR5cGVvZiBvZmZzZXRCb3R0b20gPT0gJ2Z1bmN0aW9uJykgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbSh0aGlzLiRlbGVtZW50KVxuXG4gICAgdmFyIGFmZml4ID0gdGhpcy5nZXRTdGF0ZShzY3JvbGxIZWlnaHQsIGhlaWdodCwgb2Zmc2V0VG9wLCBvZmZzZXRCb3R0b20pXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkICE9IGFmZml4KSB7XG4gICAgICBpZiAodGhpcy51bnBpbiAhPSBudWxsKSB0aGlzLiRlbGVtZW50LmNzcygndG9wJywgJycpXG5cbiAgICAgIHZhciBhZmZpeFR5cGUgPSAnYWZmaXgnICsgKGFmZml4ID8gJy0nICsgYWZmaXggOiAnJylcbiAgICAgIHZhciBlICAgICAgICAgPSAkLkV2ZW50KGFmZml4VHlwZSArICcuYnMuYWZmaXgnKVxuXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICB0aGlzLmFmZml4ZWQgPSBhZmZpeFxuICAgICAgdGhpcy51bnBpbiA9IGFmZml4ID09ICdib3R0b20nID8gdGhpcy5nZXRQaW5uZWRPZmZzZXQoKSA6IG51bGxcblxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpXG4gICAgICAgIC5hZGRDbGFzcyhhZmZpeFR5cGUpXG4gICAgICAgIC50cmlnZ2VyKGFmZml4VHlwZS5yZXBsYWNlKCdhZmZpeCcsICdhZmZpeGVkJykgKyAnLmJzLmFmZml4JylcbiAgICB9XG5cbiAgICBpZiAoYWZmaXggPT0gJ2JvdHRvbScpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2Zmc2V0KHtcbiAgICAgICAgdG9wOiBzY3JvbGxIZWlnaHQgLSBoZWlnaHQgLSBvZmZzZXRCb3R0b21cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cblxuICAvLyBBRkZJWCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5hZmZpeCcpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWZmaXgnLCAoZGF0YSA9IG5ldyBBZmZpeCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWZmaXhcblxuICAkLmZuLmFmZml4ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYWZmaXguQ29uc3RydWN0b3IgPSBBZmZpeFxuXG5cbiAgLy8gQUZGSVggTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmFmZml4Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5hZmZpeCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFGRklYIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXNweT1cImFmZml4XCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhID0gJHNweS5kYXRhKClcblxuICAgICAgZGF0YS5vZmZzZXQgPSBkYXRhLm9mZnNldCB8fCB7fVxuXG4gICAgICBpZiAoZGF0YS5vZmZzZXRCb3R0b20gIT0gbnVsbCkgZGF0YS5vZmZzZXQuYm90dG9tID0gZGF0YS5vZmZzZXRCb3R0b21cbiAgICAgIGlmIChkYXRhLm9mZnNldFRvcCAgICAhPSBudWxsKSBkYXRhLm9mZnNldC50b3AgICAgPSBkYXRhLm9mZnNldFRvcFxuXG4gICAgICBQbHVnaW4uY2FsbCgkc3B5LCBkYXRhKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8qIVxuICogS25vY2tvdXQgSmF2YVNjcmlwdCBsaWJyYXJ5IHYzLjMuMFxuICogKGMpIFN0ZXZlbiBTYW5kZXJzb24gLSBodHRwOi8va25vY2tvdXRqcy5jb20vXG4gKiBMaWNlbnNlOiBNSVQgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuICovXG5cbihmdW5jdGlvbigpIHsoZnVuY3Rpb24ocCl7dmFyIHk9dGhpc3x8KDAsZXZhbCkoXCJ0aGlzXCIpLHc9eS5kb2N1bWVudCxNPXkubmF2aWdhdG9yLHU9eS5qUXVlcnksRT15LkpTT047KGZ1bmN0aW9uKHApe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIixcInJlcXVpcmVcIl0scCk6XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcXVpcmUmJlwib2JqZWN0XCI9PT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09PXR5cGVvZiBtb2R1bGU/cChtb2R1bGUuZXhwb3J0c3x8ZXhwb3J0cyk6cCh5LmtvPXt9KX0pKGZ1bmN0aW9uKE4sTyl7ZnVuY3Rpb24gSihhLGQpe3JldHVybiBudWxsPT09YXx8dHlwZW9mIGEgaW4gUT9hPT09ZDohMX1mdW5jdGlvbiBSKGEsZCl7dmFyIGM7cmV0dXJuIGZ1bmN0aW9uKCl7Y3x8KGM9c2V0VGltZW91dChmdW5jdGlvbigpe2M9cDthKCl9LGQpKX19ZnVuY3Rpb24gUyhhLGQpe3ZhciBjO3JldHVybiBmdW5jdGlvbigpe2NsZWFyVGltZW91dChjKTtcbmM9c2V0VGltZW91dChhLGQpfX1mdW5jdGlvbiBLKGIsZCxjLGUpe2EuZFtiXT17aW5pdDpmdW5jdGlvbihiLGssaCxsLGcpe3ZhciBtLHg7YS53KGZ1bmN0aW9uKCl7dmFyIHE9YS5hLmMoaygpKSxuPSFjIT09IXEscj0heDtpZihyfHxkfHxuIT09bSlyJiZhLloub2EoKSYmKHg9YS5hLmxhKGEuZS5jaGlsZE5vZGVzKGIpLCEwKSksbj8ocnx8YS5lLlQoYixhLmEubGEoeCkpLGEuSmEoZT9lKGcscSk6ZyxiKSk6YS5lLm1hKGIpLG09bn0sbnVsbCx7cTpifSk7cmV0dXJue2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzOiEwfX19O2EuaC5rYVtiXT0hMTthLmUuUltiXT0hMH12YXIgYT1cInVuZGVmaW5lZFwiIT09dHlwZW9mIE4/Tjp7fTthLmI9ZnVuY3Rpb24oYixkKXtmb3IodmFyIGM9Yi5zcGxpdChcIi5cIiksZT1hLGY9MDtmPGMubGVuZ3RoLTE7ZisrKWU9ZVtjW2ZdXTtlW2NbYy5sZW5ndGgtMV1dPWR9O2EuRD1mdW5jdGlvbihhLGQsYyl7YVtkXT1jfTthLnZlcnNpb249XCIzLjMuMFwiO1xuYS5iKFwidmVyc2lvblwiLGEudmVyc2lvbik7YS5hPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYihhLGIpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJmIoYyxhW2NdKX1mdW5jdGlvbiBkKGEsYil7aWYoYilmb3IodmFyIGMgaW4gYiliLmhhc093blByb3BlcnR5KGMpJiYoYVtjXT1iW2NdKTtyZXR1cm4gYX1mdW5jdGlvbiBjKGEsYil7YS5fX3Byb3RvX189YjtyZXR1cm4gYX1mdW5jdGlvbiBlKGIsYyxnLGQpe3ZhciBlPWJbY10ubWF0Y2gobSl8fFtdO2EuYS5vKGcubWF0Y2gobSksZnVuY3Rpb24oYil7YS5hLmdhKGUsYixkKX0pO2JbY109ZS5qb2luKFwiIFwiKX12YXIgZj17X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXksaz17fSxoPXt9O2tbTSYmL0ZpcmVmb3hcXC8yL2kudGVzdChNLnVzZXJBZ2VudCk/XCJLZXlib2FyZEV2ZW50XCI6XCJVSUV2ZW50c1wiXT1bXCJrZXl1cFwiLFwia2V5ZG93blwiLFwia2V5cHJlc3NcIl07ay5Nb3VzZUV2ZW50cz1cImNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlXCIuc3BsaXQoXCIgXCIpO1xuYihrLGZ1bmN0aW9uKGEsYil7aWYoYi5sZW5ndGgpZm9yKHZhciBjPTAsZz1iLmxlbmd0aDtjPGc7YysrKWhbYltjXV09YX0pO3ZhciBsPXtwcm9wZXJ0eWNoYW5nZTohMH0sZz13JiZmdW5jdGlvbigpe2Zvcih2YXIgYT0zLGI9dy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGM9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlcIik7Yi5pbm5lckhUTUw9XCJcXHgzYyEtLVtpZiBndCBJRSBcIisgKythK1wiXT48aT48L2k+PCFbZW5kaWZdLS1cXHgzZVwiLGNbMF07KTtyZXR1cm4gNDxhP2E6cH0oKSxtPS9cXFMrL2c7cmV0dXJue0JiOltcImF1dGhlbnRpY2l0eV90b2tlblwiLC9eX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW4oXy4qKT8kL10sbzpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wLGc9YS5sZW5ndGg7YzxnO2MrKyliKGFbY10sYyl9LG06ZnVuY3Rpb24oYSxiKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZilyZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhLFxuYik7Zm9yKHZhciBjPTAsZz1hLmxlbmd0aDtjPGc7YysrKWlmKGFbY109PT1iKXJldHVybiBjO3JldHVybi0xfSx2YjpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBnPTAsZD1hLmxlbmd0aDtnPGQ7ZysrKWlmKGIuY2FsbChjLGFbZ10sZykpcmV0dXJuIGFbZ107cmV0dXJuIG51bGx9LHlhOmZ1bmN0aW9uKGIsYyl7dmFyIGc9YS5hLm0oYixjKTswPGc/Yi5zcGxpY2UoZywxKTowPT09ZyYmYi5zaGlmdCgpfSx3YjpmdW5jdGlvbihiKXtiPWJ8fFtdO2Zvcih2YXIgYz1bXSxnPTAsZD1iLmxlbmd0aDtnPGQ7ZysrKTA+YS5hLm0oYyxiW2ddKSYmYy5wdXNoKGJbZ10pO3JldHVybiBjfSxLYTpmdW5jdGlvbihhLGIpe2E9YXx8W107Zm9yKHZhciBjPVtdLGc9MCxkPWEubGVuZ3RoO2c8ZDtnKyspYy5wdXNoKGIoYVtnXSxnKSk7cmV0dXJuIGN9LHhhOmZ1bmN0aW9uKGEsYil7YT1hfHxbXTtmb3IodmFyIGM9W10sZz0wLGQ9YS5sZW5ndGg7ZzxkO2crKyliKGFbZ10sZykmJmMucHVzaChhW2ddKTtcbnJldHVybiBjfSxpYTpmdW5jdGlvbihhLGIpe2lmKGIgaW5zdGFuY2VvZiBBcnJheSlhLnB1c2guYXBwbHkoYSxiKTtlbHNlIGZvcih2YXIgYz0wLGc9Yi5sZW5ndGg7YzxnO2MrKylhLnB1c2goYltjXSk7cmV0dXJuIGF9LGdhOmZ1bmN0aW9uKGIsYyxnKXt2YXIgZD1hLmEubShhLmEuY2IoYiksYyk7MD5kP2cmJmIucHVzaChjKTpnfHxiLnNwbGljZShkLDEpfSx6YTpmLGV4dGVuZDpkLEZhOmMsR2E6Zj9jOmQsQTpiLHBhOmZ1bmN0aW9uKGEsYil7aWYoIWEpcmV0dXJuIGE7dmFyIGM9e30sZztmb3IoZyBpbiBhKWEuaGFzT3duUHJvcGVydHkoZykmJihjW2ddPWIoYVtnXSxnLGEpKTtyZXR1cm4gY30sUmE6ZnVuY3Rpb24oYil7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlTm9kZShiLmZpcnN0Q2hpbGQpfSxKYjpmdW5jdGlvbihiKXtiPWEuYS5PKGIpO2Zvcih2YXIgYz0oYlswXSYmYlswXS5vd25lckRvY3VtZW50fHx3KS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGc9MCxkPWIubGVuZ3RoO2c8XG5kO2crKyljLmFwcGVuZENoaWxkKGEuUyhiW2ddKSk7cmV0dXJuIGN9LGxhOmZ1bmN0aW9uKGIsYyl7Zm9yKHZhciBnPTAsZD1iLmxlbmd0aCxlPVtdO2c8ZDtnKyspe3ZhciBtPWJbZ10uY2xvbmVOb2RlKCEwKTtlLnB1c2goYz9hLlMobSk6bSl9cmV0dXJuIGV9LFQ6ZnVuY3Rpb24oYixjKXthLmEuUmEoYik7aWYoYylmb3IodmFyIGc9MCxkPWMubGVuZ3RoO2c8ZDtnKyspYi5hcHBlbmRDaGlsZChjW2ddKX0sUWI6ZnVuY3Rpb24oYixjKXt2YXIgZz1iLm5vZGVUeXBlP1tiXTpiO2lmKDA8Zy5sZW5ndGgpe2Zvcih2YXIgZD1nWzBdLGU9ZC5wYXJlbnROb2RlLG09MCxmPWMubGVuZ3RoO208ZjttKyspZS5pbnNlcnRCZWZvcmUoY1ttXSxkKTttPTA7Zm9yKGY9Zy5sZW5ndGg7bTxmO20rKylhLnJlbW92ZU5vZGUoZ1ttXSl9fSxuYTpmdW5jdGlvbihhLGIpe2lmKGEubGVuZ3RoKXtmb3IoYj04PT09Yi5ub2RlVHlwZSYmYi5wYXJlbnROb2RlfHxiO2EubGVuZ3RoJiZhWzBdLnBhcmVudE5vZGUhPT1cbmI7KWEuc3BsaWNlKDAsMSk7aWYoMTxhLmxlbmd0aCl7dmFyIGM9YVswXSxnPWFbYS5sZW5ndGgtMV07Zm9yKGEubGVuZ3RoPTA7YyE9PWc7KWlmKGEucHVzaChjKSxjPWMubmV4dFNpYmxpbmcsIWMpcmV0dXJuO2EucHVzaChnKX19cmV0dXJuIGF9LFNiOmZ1bmN0aW9uKGEsYil7Nz5nP2Euc2V0QXR0cmlidXRlKFwic2VsZWN0ZWRcIixiKTphLnNlbGVjdGVkPWJ9LGliOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT09YXx8YT09PXA/XCJcIjphLnRyaW0/YS50cmltKCk6YS50b1N0cmluZygpLnJlcGxhY2UoL15bXFxzXFx4YTBdK3xbXFxzXFx4YTBdKyQvZyxcIlwiKX0sRGM6ZnVuY3Rpb24oYSxiKXthPWF8fFwiXCI7cmV0dXJuIGIubGVuZ3RoPmEubGVuZ3RoPyExOmEuc3Vic3RyaW5nKDAsYi5sZW5ndGgpPT09Yn0samM6ZnVuY3Rpb24oYSxiKXtpZihhPT09YilyZXR1cm4hMDtpZigxMT09PWEubm9kZVR5cGUpcmV0dXJuITE7aWYoYi5jb250YWlucylyZXR1cm4gYi5jb250YWlucygzPT09YS5ub2RlVHlwZT9cbmEucGFyZW50Tm9kZTphKTtpZihiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKXJldHVybiAxNj09KGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYSkmMTYpO2Zvcig7YSYmYSE9YjspYT1hLnBhcmVudE5vZGU7cmV0dXJuISFhfSxRYTpmdW5jdGlvbihiKXtyZXR1cm4gYS5hLmpjKGIsYi5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCl9LHRiOmZ1bmN0aW9uKGIpe3JldHVybiEhYS5hLnZiKGIsYS5hLlFhKX0sdjpmdW5jdGlvbihhKXtyZXR1cm4gYSYmYS50YWdOYW1lJiZhLnRhZ05hbWUudG9Mb3dlckNhc2UoKX0sbjpmdW5jdGlvbihiLGMsZCl7dmFyIG09ZyYmbFtjXTtpZighbSYmdSl1KGIpLmJpbmQoYyxkKTtlbHNlIGlmKG18fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGIuYWRkRXZlbnRMaXN0ZW5lcilpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgYi5hdHRhY2hFdmVudCl7dmFyIGU9ZnVuY3Rpb24oYSl7ZC5jYWxsKGIsYSl9LGY9XCJvblwiK2M7Yi5hdHRhY2hFdmVudChmLGUpO2EuYS5DLmZhKGIsXG5mdW5jdGlvbigpe2IuZGV0YWNoRXZlbnQoZixlKX0pfWVsc2UgdGhyb3cgRXJyb3IoXCJCcm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBhZGRFdmVudExpc3RlbmVyIG9yIGF0dGFjaEV2ZW50XCIpO2Vsc2UgYi5hZGRFdmVudExpc3RlbmVyKGMsZCwhMSl9LHFhOmZ1bmN0aW9uKGIsYyl7aWYoIWJ8fCFiLm5vZGVUeXBlKXRocm93IEVycm9yKFwiZWxlbWVudCBtdXN0IGJlIGEgRE9NIG5vZGUgd2hlbiBjYWxsaW5nIHRyaWdnZXJFdmVudFwiKTt2YXIgZztcImlucHV0XCI9PT1hLmEudihiKSYmYi50eXBlJiZcImNsaWNrXCI9PWMudG9Mb3dlckNhc2UoKT8oZz1iLnR5cGUsZz1cImNoZWNrYm94XCI9PWd8fFwicmFkaW9cIj09Zyk6Zz0hMTtpZih1JiYhZyl1KGIpLnRyaWdnZXIoYyk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB3LmNyZWF0ZUV2ZW50KWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGIuZGlzcGF0Y2hFdmVudClnPXcuY3JlYXRlRXZlbnQoaFtjXXx8XCJIVE1MRXZlbnRzXCIpLGcuaW5pdEV2ZW50KGMsXG4hMCwhMCx5LDAsMCwwLDAsMCwhMSwhMSwhMSwhMSwwLGIpLGIuZGlzcGF0Y2hFdmVudChnKTtlbHNlIHRocm93IEVycm9yKFwiVGhlIHN1cHBsaWVkIGVsZW1lbnQgZG9lc24ndCBzdXBwb3J0IGRpc3BhdGNoRXZlbnRcIik7ZWxzZSBpZihnJiZiLmNsaWNrKWIuY2xpY2soKTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBiLmZpcmVFdmVudCliLmZpcmVFdmVudChcIm9uXCIrYyk7ZWxzZSB0aHJvdyBFcnJvcihcIkJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRyaWdnZXJpbmcgZXZlbnRzXCIpO30sYzpmdW5jdGlvbihiKXtyZXR1cm4gYS5GKGIpP2IoKTpifSxjYjpmdW5jdGlvbihiKXtyZXR1cm4gYS5GKGIpP2IuQigpOmJ9LElhOmZ1bmN0aW9uKGIsYyxnKXt2YXIgZDtjJiYoXCJvYmplY3RcIj09PXR5cGVvZiBiLmNsYXNzTGlzdD8oZD1iLmNsYXNzTGlzdFtnP1wiYWRkXCI6XCJyZW1vdmVcIl0sYS5hLm8oYy5tYXRjaChtKSxmdW5jdGlvbihhKXtkLmNhbGwoYi5jbGFzc0xpc3QsYSl9KSk6XCJzdHJpbmdcIj09PVxudHlwZW9mIGIuY2xhc3NOYW1lLmJhc2VWYWw/ZShiLmNsYXNzTmFtZSxcImJhc2VWYWxcIixjLGcpOmUoYixcImNsYXNzTmFtZVwiLGMsZykpfSxIYTpmdW5jdGlvbihiLGMpe3ZhciBnPWEuYS5jKGMpO2lmKG51bGw9PT1nfHxnPT09cClnPVwiXCI7dmFyIGQ9YS5lLmZpcnN0Q2hpbGQoYik7IWR8fDMhPWQubm9kZVR5cGV8fGEuZS5uZXh0U2libGluZyhkKT9hLmUuVChiLFtiLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZyldKTpkLmRhdGE9ZzthLmEubWMoYil9LFJiOmZ1bmN0aW9uKGEsYil7YS5uYW1lPWI7aWYoNz49Zyl0cnl7YS5tZXJnZUF0dHJpYnV0ZXMody5jcmVhdGVFbGVtZW50KFwiPGlucHV0IG5hbWU9J1wiK2EubmFtZStcIicvPlwiKSwhMSl9Y2F0Y2goYyl7fX0sbWM6ZnVuY3Rpb24oYSl7OTw9ZyYmKGE9MT09YS5ub2RlVHlwZT9hOmEucGFyZW50Tm9kZSxhLnN0eWxlJiYoYS5zdHlsZS56b29tPWEuc3R5bGUuem9vbSkpfSxrYzpmdW5jdGlvbihhKXtpZihnKXt2YXIgYj1hLnN0eWxlLndpZHRoO1xuYS5zdHlsZS53aWR0aD0wO2Euc3R5bGUud2lkdGg9Yn19LEJjOmZ1bmN0aW9uKGIsYyl7Yj1hLmEuYyhiKTtjPWEuYS5jKGMpO2Zvcih2YXIgZz1bXSxkPWI7ZDw9YztkKyspZy5wdXNoKGQpO3JldHVybiBnfSxPOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTAsZz1hLmxlbmd0aDtjPGc7YysrKWIucHVzaChhW2NdKTtyZXR1cm4gYn0sSGM6Nj09PWcsSWM6Nz09PWcsTTpnLERiOmZ1bmN0aW9uKGIsYyl7Zm9yKHZhciBnPWEuYS5PKGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbnB1dFwiKSkuY29uY2F0KGEuYS5PKGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZXh0YXJlYVwiKSkpLGQ9XCJzdHJpbmdcIj09dHlwZW9mIGM/ZnVuY3Rpb24oYSl7cmV0dXJuIGEubmFtZT09PWN9OmZ1bmN0aW9uKGEpe3JldHVybiBjLnRlc3QoYS5uYW1lKX0sbT1bXSxlPWcubGVuZ3RoLTE7MDw9ZTtlLS0pZChnW2VdKSYmbS5wdXNoKGdbZV0pO3JldHVybiBtfSx5YzpmdW5jdGlvbihiKXtyZXR1cm5cInN0cmluZ1wiPT1cbnR5cGVvZiBiJiYoYj1hLmEuaWIoYikpP0UmJkUucGFyc2U/RS5wYXJzZShiKToobmV3IEZ1bmN0aW9uKFwicmV0dXJuIFwiK2IpKSgpOm51bGx9LGpiOmZ1bmN0aW9uKGIsYyxnKXtpZighRXx8IUUuc3RyaW5naWZ5KXRocm93IEVycm9yKFwiQ2Fubm90IGZpbmQgSlNPTi5zdHJpbmdpZnkoKS4gU29tZSBicm93c2VycyAoZS5nLiwgSUUgPCA4KSBkb24ndCBzdXBwb3J0IGl0IG5hdGl2ZWx5LCBidXQgeW91IGNhbiBvdmVyY29tZSB0aGlzIGJ5IGFkZGluZyBhIHNjcmlwdCByZWZlcmVuY2UgdG8ganNvbjIuanMsIGRvd25sb2FkYWJsZSBmcm9tIGh0dHA6Ly93d3cuanNvbi5vcmcvanNvbjIuanNcIik7cmV0dXJuIEUuc3RyaW5naWZ5KGEuYS5jKGIpLGMsZyl9LHpjOmZ1bmN0aW9uKGMsZyxkKXtkPWR8fHt9O3ZhciBtPWQucGFyYW1zfHx7fSxlPWQuaW5jbHVkZUZpZWxkc3x8dGhpcy5CYixmPWM7aWYoXCJvYmplY3RcIj09dHlwZW9mIGMmJlwiZm9ybVwiPT09YS5hLnYoYykpZm9yKHZhciBmPWMuYWN0aW9uLFxubD1lLmxlbmd0aC0xOzA8PWw7bC0tKWZvcih2YXIgaz1hLmEuRGIoYyxlW2xdKSxoPWsubGVuZ3RoLTE7MDw9aDtoLS0pbVtrW2hdLm5hbWVdPWtbaF0udmFsdWU7Zz1hLmEuYyhnKTt2YXIgcz13LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO3Muc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtzLmFjdGlvbj1mO3MubWV0aG9kPVwicG9zdFwiO2Zvcih2YXIgcCBpbiBnKWM9dy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYy50eXBlPVwiaGlkZGVuXCIsYy5uYW1lPXAsYy52YWx1ZT1hLmEuamIoYS5hLmMoZ1twXSkpLHMuYXBwZW5kQ2hpbGQoYyk7YihtLGZ1bmN0aW9uKGEsYil7dmFyIGM9dy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7Yy50eXBlPVwiaGlkZGVuXCI7Yy5uYW1lPWE7Yy52YWx1ZT1iO3MuYXBwZW5kQ2hpbGQoYyl9KTt3LmJvZHkuYXBwZW5kQ2hpbGQocyk7ZC5zdWJtaXR0ZXI/ZC5zdWJtaXR0ZXIocyk6cy5zdWJtaXQoKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHMpfSxcbjApfX19KCk7YS5iKFwidXRpbHNcIixhLmEpO2EuYihcInV0aWxzLmFycmF5Rm9yRWFjaFwiLGEuYS5vKTthLmIoXCJ1dGlscy5hcnJheUZpcnN0XCIsYS5hLnZiKTthLmIoXCJ1dGlscy5hcnJheUZpbHRlclwiLGEuYS54YSk7YS5iKFwidXRpbHMuYXJyYXlHZXREaXN0aW5jdFZhbHVlc1wiLGEuYS53Yik7YS5iKFwidXRpbHMuYXJyYXlJbmRleE9mXCIsYS5hLm0pO2EuYihcInV0aWxzLmFycmF5TWFwXCIsYS5hLkthKTthLmIoXCJ1dGlscy5hcnJheVB1c2hBbGxcIixhLmEuaWEpO2EuYihcInV0aWxzLmFycmF5UmVtb3ZlSXRlbVwiLGEuYS55YSk7YS5iKFwidXRpbHMuZXh0ZW5kXCIsYS5hLmV4dGVuZCk7YS5iKFwidXRpbHMuZmllbGRzSW5jbHVkZWRXaXRoSnNvblBvc3RcIixhLmEuQmIpO2EuYihcInV0aWxzLmdldEZvcm1GaWVsZHNcIixhLmEuRGIpO2EuYihcInV0aWxzLnBlZWtPYnNlcnZhYmxlXCIsYS5hLmNiKTthLmIoXCJ1dGlscy5wb3N0SnNvblwiLGEuYS56Yyk7YS5iKFwidXRpbHMucGFyc2VKc29uXCIsYS5hLnljKTthLmIoXCJ1dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlclwiLFxuYS5hLm4pO2EuYihcInV0aWxzLnN0cmluZ2lmeUpzb25cIixhLmEuamIpO2EuYihcInV0aWxzLnJhbmdlXCIsYS5hLkJjKTthLmIoXCJ1dGlscy50b2dnbGVEb21Ob2RlQ3NzQ2xhc3NcIixhLmEuSWEpO2EuYihcInV0aWxzLnRyaWdnZXJFdmVudFwiLGEuYS5xYSk7YS5iKFwidXRpbHMudW53cmFwT2JzZXJ2YWJsZVwiLGEuYS5jKTthLmIoXCJ1dGlscy5vYmplY3RGb3JFYWNoXCIsYS5hLkEpO2EuYihcInV0aWxzLmFkZE9yUmVtb3ZlSXRlbVwiLGEuYS5nYSk7YS5iKFwidXRpbHMuc2V0VGV4dENvbnRlbnRcIixhLmEuSGEpO2EuYihcInVud3JhcFwiLGEuYS5jKTtGdW5jdGlvbi5wcm90b3R5cGUuYmluZHx8KEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kPWZ1bmN0aW9uKGEpe3ZhciBkPXRoaXM7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGQuYXBwbHkoYSxhcmd1bWVudHMpfTt2YXIgYz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9XG5jLnNsaWNlKDApO2UucHVzaC5hcHBseShlLGFyZ3VtZW50cyk7cmV0dXJuIGQuYXBwbHkoYSxlKX19KTthLmEuZj1uZXcgZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGIsayl7dmFyIGg9YltjXTtpZighaHx8XCJudWxsXCI9PT1ofHwhZVtoXSl7aWYoIWspcmV0dXJuIHA7aD1iW2NdPVwia29cIitkKys7ZVtoXT17fX1yZXR1cm4gZVtoXX12YXIgZD0wLGM9XCJfX2tvX19cIisobmV3IERhdGUpLmdldFRpbWUoKSxlPXt9O3JldHVybntnZXQ6ZnVuY3Rpb24oYyxkKXt2YXIgZT1hKGMsITEpO3JldHVybiBlPT09cD9wOmVbZF19LHNldDpmdW5jdGlvbihjLGQsZSl7aWYoZSE9PXB8fGEoYywhMSkhPT1wKWEoYywhMClbZF09ZX0sY2xlYXI6ZnVuY3Rpb24oYSl7dmFyIGI9YVtjXTtyZXR1cm4gYj8oZGVsZXRlIGVbYl0sYVtjXT1udWxsLCEwKTohMX0sSTpmdW5jdGlvbigpe3JldHVybiBkKysgK2N9fX07YS5iKFwidXRpbHMuZG9tRGF0YVwiLGEuYS5mKTthLmIoXCJ1dGlscy5kb21EYXRhLmNsZWFyXCIsYS5hLmYuY2xlYXIpO1xuYS5hLkM9bmV3IGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYihiLGQpe3ZhciBlPWEuYS5mLmdldChiLGMpO2U9PT1wJiZkJiYoZT1bXSxhLmEuZi5zZXQoYixjLGUpKTtyZXR1cm4gZX1mdW5jdGlvbiBkKGMpe3ZhciBlPWIoYywhMSk7aWYoZSlmb3IodmFyIGU9ZS5zbGljZSgwKSxsPTA7bDxlLmxlbmd0aDtsKyspZVtsXShjKTthLmEuZi5jbGVhcihjKTthLmEuQy5jbGVhbkV4dGVybmFsRGF0YShjKTtpZihmW2Mubm9kZVR5cGVdKWZvcihlPWMuZmlyc3RDaGlsZDtjPWU7KWU9Yy5uZXh0U2libGluZyw4PT09Yy5ub2RlVHlwZSYmZChjKX12YXIgYz1hLmEuZi5JKCksZT17MTohMCw4OiEwLDk6ITB9LGY9ezE6ITAsOTohMH07cmV0dXJue2ZhOmZ1bmN0aW9uKGEsYyl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgYyl0aHJvdyBFcnJvcihcIkNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvblwiKTtiKGEsITApLnB1c2goYyl9LFBiOmZ1bmN0aW9uKGQsZSl7dmFyIGY9YihkLCExKTtmJiYoYS5hLnlhKGYsXG5lKSwwPT1mLmxlbmd0aCYmYS5hLmYuc2V0KGQsYyxwKSl9LFM6ZnVuY3Rpb24oYil7aWYoZVtiLm5vZGVUeXBlXSYmKGQoYiksZltiLm5vZGVUeXBlXSkpe3ZhciBjPVtdO2EuYS5pYShjLGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpKTtmb3IodmFyIGw9MCxnPWMubGVuZ3RoO2w8ZztsKyspZChjW2xdKX1yZXR1cm4gYn0scmVtb3ZlTm9kZTpmdW5jdGlvbihiKXthLlMoYik7Yi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYil9LGNsZWFuRXh0ZXJuYWxEYXRhOmZ1bmN0aW9uKGEpe3UmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHUuY2xlYW5EYXRhJiZ1LmNsZWFuRGF0YShbYV0pfX19O2EuUz1hLmEuQy5TO2EucmVtb3ZlTm9kZT1hLmEuQy5yZW1vdmVOb2RlO2EuYihcImNsZWFuTm9kZVwiLGEuUyk7YS5iKFwicmVtb3ZlTm9kZVwiLGEucmVtb3ZlTm9kZSk7YS5iKFwidXRpbHMuZG9tTm9kZURpc3Bvc2FsXCIsYS5hLkMpO2EuYihcInV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2tcIixcbmEuYS5DLmZhKTthLmIoXCJ1dGlscy5kb21Ob2RlRGlzcG9zYWwucmVtb3ZlRGlzcG9zZUNhbGxiYWNrXCIsYS5hLkMuUGIpOyhmdW5jdGlvbigpe2EuYS5jYT1mdW5jdGlvbihiLGQpe3ZhciBjO2lmKHUpaWYodS5wYXJzZUhUTUwpYz11LnBhcnNlSFRNTChiLGQpfHxbXTtlbHNle2lmKChjPXUuY2xlYW4oW2JdLGQpKSYmY1swXSl7Zm9yKHZhciBlPWNbMF07ZS5wYXJlbnROb2RlJiYxMSE9PWUucGFyZW50Tm9kZS5ub2RlVHlwZTspZT1lLnBhcmVudE5vZGU7ZS5wYXJlbnROb2RlJiZlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSl9fWVsc2V7KGU9ZCl8fChlPXcpO2M9ZS5wYXJlbnRXaW5kb3d8fGUuZGVmYXVsdFZpZXd8fHk7dmFyIGY9YS5hLmliKGIpLnRvTG93ZXJDYXNlKCksZT1lLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZj1mLm1hdGNoKC9ePCh0aGVhZHx0Ym9keXx0Zm9vdCkvKSYmWzEsXCI8dGFibGU+XCIsXCI8L3RhYmxlPlwiXXx8IWYuaW5kZXhPZihcIjx0clwiKSYmWzIsXCI8dGFibGU+PHRib2R5PlwiLFxuXCI8L3Rib2R5PjwvdGFibGU+XCJdfHwoIWYuaW5kZXhPZihcIjx0ZFwiKXx8IWYuaW5kZXhPZihcIjx0aFwiKSkmJlszLFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIl18fFswLFwiXCIsXCJcIl0saz1cImlnbm9yZWQ8ZGl2PlwiK2ZbMV0rYitmWzJdK1wiPC9kaXY+XCI7Zm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIGMuaW5uZXJTaGl2P2UuYXBwZW5kQ2hpbGQoYy5pbm5lclNoaXYoaykpOmUuaW5uZXJIVE1MPWs7ZlswXS0tOyllPWUubGFzdENoaWxkO2M9YS5hLk8oZS5sYXN0Q2hpbGQuY2hpbGROb2Rlcyl9cmV0dXJuIGN9O2EuYS5nYj1mdW5jdGlvbihiLGQpe2EuYS5SYShiKTtkPWEuYS5jKGQpO2lmKG51bGwhPT1kJiZkIT09cClpZihcInN0cmluZ1wiIT10eXBlb2YgZCYmKGQ9ZC50b1N0cmluZygpKSx1KXUoYikuaHRtbChkKTtlbHNlIGZvcih2YXIgYz1hLmEuY2EoZCxiLm93bmVyRG9jdW1lbnQpLGU9MDtlPGMubGVuZ3RoO2UrKyliLmFwcGVuZENoaWxkKGNbZV0pfX0pKCk7XG5hLmIoXCJ1dGlscy5wYXJzZUh0bWxGcmFnbWVudFwiLGEuYS5jYSk7YS5iKFwidXRpbHMuc2V0SHRtbFwiLGEuYS5nYik7YS5IPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYihjLGQpe2lmKGMpaWYoOD09Yy5ub2RlVHlwZSl7dmFyIGY9YS5ILkxiKGMubm9kZVZhbHVlKTtudWxsIT1mJiZkLnB1c2goe2ljOmMsd2M6Zn0pfWVsc2UgaWYoMT09Yy5ub2RlVHlwZSlmb3IodmFyIGY9MCxrPWMuY2hpbGROb2RlcyxoPWsubGVuZ3RoO2Y8aDtmKyspYihrW2ZdLGQpfXZhciBkPXt9O3JldHVybnskYTpmdW5jdGlvbihhKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBhKXRocm93IEVycm9yKFwiWW91IGNhbiBvbmx5IHBhc3MgYSBmdW5jdGlvbiB0byBrby5tZW1vaXphdGlvbi5tZW1vaXplKClcIik7dmFyIGI9KDQyOTQ5NjcyOTYqKDErTWF0aC5yYW5kb20oKSl8MCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKSsoNDI5NDk2NzI5NiooMStNYXRoLnJhbmRvbSgpKXwwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xuZFtiXT1hO3JldHVyblwiXFx4M2MhLS1ba29fbWVtbzpcIitiK1wiXS0tXFx4M2VcIn0sV2I6ZnVuY3Rpb24oYSxiKXt2YXIgZj1kW2FdO2lmKGY9PT1wKXRocm93IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhbnkgbWVtbyB3aXRoIElEIFwiK2ErXCIuIFBlcmhhcHMgaXQncyBhbHJlYWR5IGJlZW4gdW5tZW1vaXplZC5cIik7dHJ5e3JldHVybiBmLmFwcGx5KG51bGwsYnx8W10pLCEwfWZpbmFsbHl7ZGVsZXRlIGRbYV19fSxYYjpmdW5jdGlvbihjLGQpe3ZhciBmPVtdO2IoYyxmKTtmb3IodmFyIGs9MCxoPWYubGVuZ3RoO2s8aDtrKyspe3ZhciBsPWZba10uaWMsZz1bbF07ZCYmYS5hLmlhKGcsZCk7YS5ILldiKGZba10ud2MsZyk7bC5ub2RlVmFsdWU9XCJcIjtsLnBhcmVudE5vZGUmJmwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsKX19LExiOmZ1bmN0aW9uKGEpe3JldHVybihhPWEubWF0Y2goL15cXFtrb19tZW1vXFw6KC4qPylcXF0kLykpP2FbMV06bnVsbH19fSgpO2EuYihcIm1lbW9pemF0aW9uXCIsYS5IKTtcbmEuYihcIm1lbW9pemF0aW9uLm1lbW9pemVcIixhLkguJGEpO2EuYihcIm1lbW9pemF0aW9uLnVubWVtb2l6ZVwiLGEuSC5XYik7YS5iKFwibWVtb2l6YXRpb24ucGFyc2VNZW1vVGV4dFwiLGEuSC5MYik7YS5iKFwibWVtb2l6YXRpb24udW5tZW1vaXplRG9tTm9kZUFuZERlc2NlbmRhbnRzXCIsYS5ILlhiKTthLlNhPXt0aHJvdHRsZTpmdW5jdGlvbihiLGQpe2IudGhyb3R0bGVFdmFsdWF0aW9uPWQ7dmFyIGM9bnVsbDtyZXR1cm4gYS5qKHtyZWFkOmIsd3JpdGU6ZnVuY3Rpb24oYSl7Y2xlYXJUaW1lb3V0KGMpO2M9c2V0VGltZW91dChmdW5jdGlvbigpe2IoYSl9LGQpfX0pfSxyYXRlTGltaXQ6ZnVuY3Rpb24oYSxkKXt2YXIgYyxlLGY7XCJudW1iZXJcIj09dHlwZW9mIGQ/Yz1kOihjPWQudGltZW91dCxlPWQubWV0aG9kKTtmPVwibm90aWZ5V2hlbkNoYW5nZXNTdG9wXCI9PWU/UzpSO2EuWmEoZnVuY3Rpb24oYSl7cmV0dXJuIGYoYSxjKX0pfSxub3RpZnk6ZnVuY3Rpb24oYSxkKXthLmVxdWFsaXR5Q29tcGFyZXI9XG5cImFsd2F5c1wiPT1kP251bGw6Sn19O3ZhciBRPXt1bmRlZmluZWQ6MSxcImJvb2xlYW5cIjoxLG51bWJlcjoxLHN0cmluZzoxfTthLmIoXCJleHRlbmRlcnNcIixhLlNhKTthLlViPWZ1bmN0aW9uKGIsZCxjKXt0aGlzLmRhPWI7dGhpcy5MYT1kO3RoaXMuaGM9Yzt0aGlzLkdiPSExO2EuRCh0aGlzLFwiZGlzcG9zZVwiLHRoaXMucCl9O2EuVWIucHJvdG90eXBlLnA9ZnVuY3Rpb24oKXt0aGlzLkdiPSEwO3RoaXMuaGMoKX07YS5RPWZ1bmN0aW9uKCl7YS5hLkdhKHRoaXMsYS5RLmZuKTt0aGlzLkc9e307dGhpcy5yYj0xfTt2YXIgej17VTpmdW5jdGlvbihiLGQsYyl7dmFyIGU9dGhpcztjPWN8fFwiY2hhbmdlXCI7dmFyIGY9bmV3IGEuVWIoZSxkP2IuYmluZChkKTpiLGZ1bmN0aW9uKCl7YS5hLnlhKGUuR1tjXSxmKTtlLnVhJiZlLnVhKGMpfSk7ZS5qYSYmZS5qYShjKTtlLkdbY118fChlLkdbY109W10pO2UuR1tjXS5wdXNoKGYpO3JldHVybiBmfSxub3RpZnlTdWJzY3JpYmVyczpmdW5jdGlvbihiLFxuZCl7ZD1kfHxcImNoYW5nZVwiO1wiY2hhbmdlXCI9PT1kJiZ0aGlzLlliKCk7aWYodGhpcy5CYShkKSl0cnl7YS5rLnhiKCk7Zm9yKHZhciBjPXRoaXMuR1tkXS5zbGljZSgwKSxlPTAsZjtmPWNbZV07KytlKWYuR2J8fGYuTGEoYil9ZmluYWxseXthLmsuZW5kKCl9fSxBYTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJifSxwYzpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5BYSgpIT09YX0sWWI6ZnVuY3Rpb24oKXsrK3RoaXMucmJ9LFphOmZ1bmN0aW9uKGIpe3ZhciBkPXRoaXMsYz1hLkYoZCksZSxmLGs7ZC50YXx8KGQudGE9ZC5ub3RpZnlTdWJzY3JpYmVycyxkLm5vdGlmeVN1YnNjcmliZXJzPWZ1bmN0aW9uKGEsYil7YiYmXCJjaGFuZ2VcIiE9PWI/XCJiZWZvcmVDaGFuZ2VcIj09PWI/ZC5wYihhKTpkLnRhKGEsYik6ZC5xYihhKX0pO3ZhciBoPWIoZnVuY3Rpb24oKXtjJiZrPT09ZCYmKGs9ZCgpKTtlPSExO2QuV2EoZixrKSYmZC50YShmPWspfSk7ZC5xYj1mdW5jdGlvbihhKXtlPSEwO2s9YTtcbmgoKX07ZC5wYj1mdW5jdGlvbihhKXtlfHwoZj1hLGQudGEoYSxcImJlZm9yZUNoYW5nZVwiKSl9fSxCYTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5HW2FdJiZ0aGlzLkdbYV0ubGVuZ3RofSxuYzpmdW5jdGlvbihiKXtpZihiKXJldHVybiB0aGlzLkdbYl0mJnRoaXMuR1tiXS5sZW5ndGh8fDA7dmFyIGQ9MDthLmEuQSh0aGlzLkcsZnVuY3Rpb24oYSxiKXtkKz1iLmxlbmd0aH0pO3JldHVybiBkfSxXYTpmdW5jdGlvbihhLGQpe3JldHVybiF0aGlzLmVxdWFsaXR5Q29tcGFyZXJ8fCF0aGlzLmVxdWFsaXR5Q29tcGFyZXIoYSxkKX0sZXh0ZW5kOmZ1bmN0aW9uKGIpe3ZhciBkPXRoaXM7YiYmYS5hLkEoYixmdW5jdGlvbihiLGUpe3ZhciBmPWEuU2FbYl07XCJmdW5jdGlvblwiPT10eXBlb2YgZiYmKGQ9ZihkLGUpfHxkKX0pO3JldHVybiBkfX07YS5EKHosXCJzdWJzY3JpYmVcIix6LlUpO2EuRCh6LFwiZXh0ZW5kXCIsei5leHRlbmQpO2EuRCh6LFwiZ2V0U3Vic2NyaXB0aW9uc0NvdW50XCIsei5uYyk7XG5hLmEuemEmJmEuYS5GYSh6LEZ1bmN0aW9uLnByb3RvdHlwZSk7YS5RLmZuPXo7YS5IYj1mdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5VJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLm5vdGlmeVN1YnNjcmliZXJzfTthLmIoXCJzdWJzY3JpYmFibGVcIixhLlEpO2EuYihcImlzU3Vic2NyaWJhYmxlXCIsYS5IYik7YS5aPWEuaz1mdW5jdGlvbigpe2Z1bmN0aW9uIGIoYSl7Yy5wdXNoKGUpO2U9YX1mdW5jdGlvbiBkKCl7ZT1jLnBvcCgpfXZhciBjPVtdLGUsZj0wO3JldHVybnt4YjpiLGVuZDpkLE9iOmZ1bmN0aW9uKGIpe2lmKGUpe2lmKCFhLkhiKGIpKXRocm93IEVycm9yKFwiT25seSBzdWJzY3JpYmFibGUgdGhpbmdzIGNhbiBhY3QgYXMgZGVwZW5kZW5jaWVzXCIpO2UuTGEoYixiLmFjfHwoYi5hYz0rK2YpKX19LHU6ZnVuY3Rpb24oYSxjLGUpe3RyeXtyZXR1cm4gYigpLGEuYXBwbHkoYyxlfHxbXSl9ZmluYWxseXtkKCl9fSxvYTpmdW5jdGlvbigpe2lmKGUpcmV0dXJuIGUudy5vYSgpfSxcbkNhOmZ1bmN0aW9uKCl7aWYoZSlyZXR1cm4gZS5DYX19fSgpO2EuYihcImNvbXB1dGVkQ29udGV4dFwiLGEuWik7YS5iKFwiY29tcHV0ZWRDb250ZXh0LmdldERlcGVuZGVuY2llc0NvdW50XCIsYS5aLm9hKTthLmIoXCJjb21wdXRlZENvbnRleHQuaXNJbml0aWFsXCIsYS5aLkNhKTthLmIoXCJjb21wdXRlZENvbnRleHQuaXNTbGVlcGluZ1wiLGEuWi5KYyk7YS5iKFwiaWdub3JlRGVwZW5kZW5jaWVzXCIsYS5HYz1hLmsudSk7YS5yPWZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGQoKXtpZigwPGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQuV2EoYyxhcmd1bWVudHNbMF0pJiYoZC5YKCksYz1hcmd1bWVudHNbMF0sZC5XKCkpLHRoaXM7YS5rLk9iKGQpO3JldHVybiBjfXZhciBjPWI7YS5RLmNhbGwoZCk7YS5hLkdhKGQsYS5yLmZuKTtkLkI9ZnVuY3Rpb24oKXtyZXR1cm4gY307ZC5XPWZ1bmN0aW9uKCl7ZC5ub3RpZnlTdWJzY3JpYmVycyhjKX07ZC5YPWZ1bmN0aW9uKCl7ZC5ub3RpZnlTdWJzY3JpYmVycyhjLFxuXCJiZWZvcmVDaGFuZ2VcIil9O2EuRChkLFwicGVla1wiLGQuQik7YS5EKGQsXCJ2YWx1ZUhhc011dGF0ZWRcIixkLlcpO2EuRChkLFwidmFsdWVXaWxsTXV0YXRlXCIsZC5YKTtyZXR1cm4gZH07YS5yLmZuPXtlcXVhbGl0eUNvbXBhcmVyOkp9O3ZhciBIPWEuci5BYz1cIl9fa29fcHJvdG9fX1wiO2Euci5mbltIXT1hLnI7YS5hLnphJiZhLmEuRmEoYS5yLmZuLGEuUS5mbik7YS5UYT1mdW5jdGlvbihiLGQpe3JldHVybiBudWxsPT09Ynx8Yj09PXB8fGJbSF09PT1wPyExOmJbSF09PT1kPyEwOmEuVGEoYltIXSxkKX07YS5GPWZ1bmN0aW9uKGIpe3JldHVybiBhLlRhKGIsYS5yKX07YS5EYT1mdW5jdGlvbihiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBiJiZiW0hdPT09YS5yfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBiJiZiW0hdPT09YS5qJiZiLnFjPyEwOiExfTthLmIoXCJvYnNlcnZhYmxlXCIsYS5yKTthLmIoXCJpc09ic2VydmFibGVcIixhLkYpO2EuYihcImlzV3JpdGVhYmxlT2JzZXJ2YWJsZVwiLGEuRGEpO1xuYS5iKFwiaXNXcml0YWJsZU9ic2VydmFibGVcIixhLkRhKTthLmJhPWZ1bmN0aW9uKGIpe2I9Ynx8W107aWYoXCJvYmplY3RcIiE9dHlwZW9mIGJ8fCEoXCJsZW5ndGhcImluIGIpKXRocm93IEVycm9yKFwiVGhlIGFyZ3VtZW50IHBhc3NlZCB3aGVuIGluaXRpYWxpemluZyBhbiBvYnNlcnZhYmxlIGFycmF5IG11c3QgYmUgYW4gYXJyYXksIG9yIG51bGwsIG9yIHVuZGVmaW5lZC5cIik7Yj1hLnIoYik7YS5hLkdhKGIsYS5iYS5mbik7cmV0dXJuIGIuZXh0ZW5kKHt0cmFja0FycmF5Q2hhbmdlczohMH0pfTthLmJhLmZuPXtyZW1vdmU6ZnVuY3Rpb24oYil7Zm9yKHZhciBkPXRoaXMuQigpLGM9W10sZT1cImZ1bmN0aW9uXCIhPXR5cGVvZiBifHxhLkYoYik/ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1ifTpiLGY9MDtmPGQubGVuZ3RoO2YrKyl7dmFyIGs9ZFtmXTtlKGspJiYoMD09PWMubGVuZ3RoJiZ0aGlzLlgoKSxjLnB1c2goayksZC5zcGxpY2UoZiwxKSxmLS0pfWMubGVuZ3RoJiZ0aGlzLlcoKTtyZXR1cm4gY30sXG5yZW1vdmVBbGw6ZnVuY3Rpb24oYil7aWYoYj09PXApe3ZhciBkPXRoaXMuQigpLGM9ZC5zbGljZSgwKTt0aGlzLlgoKTtkLnNwbGljZSgwLGQubGVuZ3RoKTt0aGlzLlcoKTtyZXR1cm4gY31yZXR1cm4gYj90aGlzLnJlbW92ZShmdW5jdGlvbihjKXtyZXR1cm4gMDw9YS5hLm0oYixjKX0pOltdfSxkZXN0cm95OmZ1bmN0aW9uKGIpe3ZhciBkPXRoaXMuQigpLGM9XCJmdW5jdGlvblwiIT10eXBlb2YgYnx8YS5GKGIpP2Z1bmN0aW9uKGEpe3JldHVybiBhPT09Yn06Yjt0aGlzLlgoKTtmb3IodmFyIGU9ZC5sZW5ndGgtMTswPD1lO2UtLSljKGRbZV0pJiYoZFtlXS5fZGVzdHJveT0hMCk7dGhpcy5XKCl9LGRlc3Ryb3lBbGw6ZnVuY3Rpb24oYil7cmV0dXJuIGI9PT1wP3RoaXMuZGVzdHJveShmdW5jdGlvbigpe3JldHVybiEwfSk6Yj90aGlzLmRlc3Ryb3koZnVuY3Rpb24oZCl7cmV0dXJuIDA8PWEuYS5tKGIsZCl9KTpbXX0saW5kZXhPZjpmdW5jdGlvbihiKXt2YXIgZD10aGlzKCk7cmV0dXJuIGEuYS5tKGQsXG5iKX0scmVwbGFjZTpmdW5jdGlvbihhLGQpe3ZhciBjPXRoaXMuaW5kZXhPZihhKTswPD1jJiYodGhpcy5YKCksdGhpcy5CKClbY109ZCx0aGlzLlcoKSl9fTthLmEubyhcInBvcCBwdXNoIHJldmVyc2Ugc2hpZnQgc29ydCBzcGxpY2UgdW5zaGlmdFwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihiKXthLmJhLmZuW2JdPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5CKCk7dGhpcy5YKCk7dGhpcy55YihhLGIsYXJndW1lbnRzKTthPWFbYl0uYXBwbHkoYSxhcmd1bWVudHMpO3RoaXMuVygpO3JldHVybiBhfX0pO2EuYS5vKFtcInNsaWNlXCJdLGZ1bmN0aW9uKGIpe2EuYmEuZm5bYl09ZnVuY3Rpb24oKXt2YXIgYT10aGlzKCk7cmV0dXJuIGFbYl0uYXBwbHkoYSxhcmd1bWVudHMpfX0pO2EuYS56YSYmYS5hLkZhKGEuYmEuZm4sYS5yLmZuKTthLmIoXCJvYnNlcnZhYmxlQXJyYXlcIixhLmJhKTthLlNhLnRyYWNrQXJyYXlDaGFuZ2VzPWZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGQoKXtpZighYyl7Yz0hMDt2YXIgZz1cbmIubm90aWZ5U3Vic2NyaWJlcnM7Yi5ub3RpZnlTdWJzY3JpYmVycz1mdW5jdGlvbihhLGIpe2ImJlwiY2hhbmdlXCIhPT1ifHwrK2s7cmV0dXJuIGcuYXBwbHkodGhpcyxhcmd1bWVudHMpfTt2YXIgZD1bXS5jb25jYXQoYi5CKCl8fFtdKTtlPW51bGw7Zj1iLlUoZnVuY3Rpb24oYyl7Yz1bXS5jb25jYXQoY3x8W10pO2lmKGIuQmEoXCJhcnJheUNoYW5nZVwiKSl7dmFyIGc7aWYoIWV8fDE8ayllPWEuYS5NYShkLGMse3NwYXJzZTohMH0pO2c9ZX1kPWM7ZT1udWxsO2s9MDtnJiZnLmxlbmd0aCYmYi5ub3RpZnlTdWJzY3JpYmVycyhnLFwiYXJyYXlDaGFuZ2VcIil9KX19aWYoIWIueWIpe3ZhciBjPSExLGU9bnVsbCxmLGs9MCxoPWIuamEsbD1iLnVhO2IuamE9ZnVuY3Rpb24oYSl7aCYmaC5jYWxsKGIsYSk7XCJhcnJheUNoYW5nZVwiPT09YSYmZCgpfTtiLnVhPWZ1bmN0aW9uKGEpe2wmJmwuY2FsbChiLGEpO1wiYXJyYXlDaGFuZ2VcIiE9PWF8fGIuQmEoXCJhcnJheUNoYW5nZVwiKXx8KGYucCgpLGM9ITEpfTtcbmIueWI9ZnVuY3Rpb24oYixkLGYpe2Z1bmN0aW9uIGwoYSxiLGMpe3JldHVybiBoW2gubGVuZ3RoXT17c3RhdHVzOmEsdmFsdWU6YixpbmRleDpjfX1pZihjJiYhayl7dmFyIGg9W10scj1iLmxlbmd0aCx2PWYubGVuZ3RoLHQ9MDtzd2l0Y2goZCl7Y2FzZSBcInB1c2hcIjp0PXI7Y2FzZSBcInVuc2hpZnRcIjpmb3IoZD0wO2Q8djtkKyspbChcImFkZGVkXCIsZltkXSx0K2QpO2JyZWFrO2Nhc2UgXCJwb3BcIjp0PXItMTtjYXNlIFwic2hpZnRcIjpyJiZsKFwiZGVsZXRlZFwiLGJbdF0sdCk7YnJlYWs7Y2FzZSBcInNwbGljZVwiOmQ9TWF0aC5taW4oTWF0aC5tYXgoMCwwPmZbMF0/citmWzBdOmZbMF0pLHIpO2Zvcih2YXIgcj0xPT09dj9yOk1hdGgubWluKGQrKGZbMV18fDApLHIpLHY9ZCt2LTIsdD1NYXRoLm1heChyLHYpLEc9W10sQT1bXSxwPTI7ZDx0OysrZCwrK3ApZDxyJiZBLnB1c2gobChcImRlbGV0ZWRcIixiW2RdLGQpKSxkPHYmJkcucHVzaChsKFwiYWRkZWRcIixmW3BdLGQpKTthLmEuQ2IoQSxHKTticmVhaztcbmRlZmF1bHQ6cmV0dXJufWU9aH19fX07YS53PWEuaj1mdW5jdGlvbihiLGQsYyl7ZnVuY3Rpb24gZShhLGIsYyl7aWYoSSYmYj09PWcpdGhyb3cgRXJyb3IoXCJBICdwdXJlJyBjb21wdXRlZCBtdXN0IG5vdCBiZSBjYWxsZWQgcmVjdXJzaXZlbHlcIik7QlthXT1jO2Muc2E9RisrO2MuZWE9Yi5BYSgpfWZ1bmN0aW9uIGYoKXt2YXIgYSxiO2ZvcihhIGluIEIpaWYoQi5oYXNPd25Qcm9wZXJ0eShhKSYmKGI9QlthXSxiLmRhLnBjKGIuZWEpKSlyZXR1cm4hMH1mdW5jdGlvbiBrKCl7IXMmJkImJmEuYS5BKEIsZnVuY3Rpb24oYSxiKXtiLnAmJmIucCgpfSk7Qj1udWxsO0Y9MDtHPSEwO3M9cj0hMX1mdW5jdGlvbiBoKCl7dmFyIGE9Zy50aHJvdHRsZUV2YWx1YXRpb247YSYmMDw9YT8oY2xlYXJUaW1lb3V0KHopLHo9c2V0VGltZW91dChmdW5jdGlvbigpe2woITApfSxhKSk6Zy5uYj9nLm5iKCk6bCghMCl9ZnVuY3Rpb24gbChiKXtpZighdiYmIUcpe2lmKHkmJnkoKSl7aWYoIXQpe3coKTtyZXR1cm59fWVsc2UgdD1cbiExO3Y9ITA7dHJ5e3ZhciBjPUIsbT1GLGY9ST9wOiFGO2Euay54Yih7TGE6ZnVuY3Rpb24oYSxiKXtHfHwobSYmY1tiXT8oZShiLGEsY1tiXSksZGVsZXRlIGNbYl0sLS1tKTpCW2JdfHxlKGIsYSxzP3tkYTphfTphLlUoaCkpKX0sdzpnLENhOmZ9KTtCPXt9O0Y9MDt0cnl7dmFyIGw9ZD9BLmNhbGwoZCk6QSgpfWZpbmFsbHl7YS5rLmVuZCgpLG0mJiFzJiZhLmEuQShjLGZ1bmN0aW9uKGEsYil7Yi5wJiZiLnAoKX0pLHI9ITF9Zy5XYShuLGwpJiYoc3x8cShuLFwiYmVmb3JlQ2hhbmdlXCIpLG49bCxzP2cuWWIoKTpiJiZxKG4pKTtmJiZxKG4sXCJhd2FrZVwiKX1maW5hbGx5e3Y9ITF9Rnx8dygpfX1mdW5jdGlvbiBnKCl7aWYoMDxhcmd1bWVudHMubGVuZ3RoKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQylDLmFwcGx5KGQsYXJndW1lbnRzKTtlbHNlIHRocm93IEVycm9yKFwiQ2Fubm90IHdyaXRlIGEgdmFsdWUgdG8gYSBrby5jb21wdXRlZCB1bmxlc3MgeW91IHNwZWNpZnkgYSAnd3JpdGUnIG9wdGlvbi4gSWYgeW91IHdpc2ggdG8gcmVhZCB0aGUgY3VycmVudCB2YWx1ZSwgZG9uJ3QgcGFzcyBhbnkgcGFyYW1ldGVycy5cIik7XG5yZXR1cm4gdGhpc31hLmsuT2IoZyk7KHJ8fHMmJmYoKSkmJmwoKTtyZXR1cm4gbn1mdW5jdGlvbiBtKCl7KHImJiFGfHxzJiZmKCkpJiZsKCk7cmV0dXJuIG59ZnVuY3Rpb24geCgpe3JldHVybiByfHwwPEZ9ZnVuY3Rpb24gcShhLGIpe2cubm90aWZ5U3Vic2NyaWJlcnMoYSxiKX12YXIgbixyPSEwLHY9ITEsdD0hMSxHPSExLEE9YixJPSExLHM9ITE7QSYmXCJvYmplY3RcIj09dHlwZW9mIEE/KGM9QSxBPWMucmVhZCk6KGM9Y3x8e30sQXx8KEE9Yy5yZWFkKSk7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgQSl0aHJvdyBFcnJvcihcIlBhc3MgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBrby5jb21wdXRlZFwiKTt2YXIgQz1jLndyaXRlLEQ9Yy5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWR8fGMucXx8bnVsbCx1PWMuZGlzcG9zZVdoZW58fGMuUGEseT11LHc9ayxCPXt9LEY9MCx6PW51bGw7ZHx8KGQ9Yy5vd25lcik7YS5RLmNhbGwoZyk7YS5hLkdhKGcsYS5qLmZuKTtcbmcuQj1tO2cub2E9ZnVuY3Rpb24oKXtyZXR1cm4gRn07Zy5xYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQztnLnA9ZnVuY3Rpb24oKXt3KCl9O2cuJD14O3ZhciBUPWcuWmE7Zy5aYT1mdW5jdGlvbihhKXtULmNhbGwoZyxhKTtnLm5iPWZ1bmN0aW9uKCl7Zy5wYihuKTtyPSEwO2cucWIoZyl9fTtjLnB1cmU/KHM9ST0hMCxnLmphPWZ1bmN0aW9uKGIpe2lmKCFHJiZzJiZcImNoYW5nZVwiPT1iKXtzPSExO2lmKHJ8fGYoKSlCPW51bGwsRj0wLHI9ITAsbCgpO2Vsc2V7dmFyIGM9W107YS5hLkEoQixmdW5jdGlvbihhLGIpe2NbYi5zYV09YX0pO2EuYS5vKGMsZnVuY3Rpb24oYSxiKXt2YXIgYz1CW2FdLGc9Yy5kYS5VKGgpO2cuc2E9YjtnLmVhPWMuZWE7QlthXT1nfSl9R3x8cShuLFwiYXdha2VcIil9fSxnLnVhPWZ1bmN0aW9uKGIpe0d8fFwiY2hhbmdlXCIhPWJ8fGcuQmEoXCJjaGFuZ2VcIil8fChhLmEuQShCLGZ1bmN0aW9uKGEsYil7Yi5wJiYoQlthXT17ZGE6Yi5kYSxzYTpiLnNhLGVhOmIuZWF9LGIucCgpKX0pLFxucz0hMCxxKHAsXCJhc2xlZXBcIikpfSxnLmJjPWcuQWEsZy5BYT1mdW5jdGlvbigpe3MmJihyfHxmKCkpJiZsKCk7cmV0dXJuIGcuYmMoKX0pOmMuZGVmZXJFdmFsdWF0aW9uJiYoZy5qYT1mdW5jdGlvbihhKXtcImNoYW5nZVwiIT1hJiZcImJlZm9yZUNoYW5nZVwiIT1hfHxtKCl9KTthLkQoZyxcInBlZWtcIixnLkIpO2EuRChnLFwiZGlzcG9zZVwiLGcucCk7YS5EKGcsXCJpc0FjdGl2ZVwiLGcuJCk7YS5EKGcsXCJnZXREZXBlbmRlbmNpZXNDb3VudFwiLGcub2EpO0QmJih0PSEwLEQubm9kZVR5cGUmJih5PWZ1bmN0aW9uKCl7cmV0dXJuIWEuYS5RYShEKXx8dSYmdSgpfSkpO3N8fGMuZGVmZXJFdmFsdWF0aW9ufHxsKCk7RCYmeCgpJiZELm5vZGVUeXBlJiYodz1mdW5jdGlvbigpe2EuYS5DLlBiKEQsdyk7aygpfSxhLmEuQy5mYShELHcpKTtyZXR1cm4gZ307YS5zYz1mdW5jdGlvbihiKXtyZXR1cm4gYS5UYShiLGEuail9O3o9YS5yLkFjO2Eualt6XT1hLnI7YS5qLmZuPXtlcXVhbGl0eUNvbXBhcmVyOkp9O1xuYS5qLmZuW3pdPWEuajthLmEuemEmJmEuYS5GYShhLmouZm4sYS5RLmZuKTthLmIoXCJkZXBlbmRlbnRPYnNlcnZhYmxlXCIsYS5qKTthLmIoXCJjb21wdXRlZFwiLGEuaik7YS5iKFwiaXNDb21wdXRlZFwiLGEuc2MpO2EuTmI9ZnVuY3Rpb24oYixkKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYS53KGIsZCx7cHVyZTohMH0pO2I9YS5hLmV4dGVuZCh7fSxiKTtiLnB1cmU9ITA7cmV0dXJuIGEudyhiLGQpfTthLmIoXCJwdXJlQ29tcHV0ZWRcIixhLk5iKTsoZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGEsZixrKXtrPWt8fG5ldyBjO2E9ZihhKTtpZihcIm9iamVjdFwiIT10eXBlb2YgYXx8bnVsbD09PWF8fGE9PT1wfHxhIGluc3RhbmNlb2YgRGF0ZXx8YSBpbnN0YW5jZW9mIFN0cmluZ3x8YSBpbnN0YW5jZW9mIE51bWJlcnx8YSBpbnN0YW5jZW9mIEJvb2xlYW4pcmV0dXJuIGE7dmFyIGg9YSBpbnN0YW5jZW9mIEFycmF5P1tdOnt9O2suc2F2ZShhLGgpO2QoYSxmdW5jdGlvbihjKXt2YXIgZz1cbmYoYVtjXSk7c3dpdGNoKHR5cGVvZiBnKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcImZ1bmN0aW9uXCI6aFtjXT1nO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpjYXNlIFwidW5kZWZpbmVkXCI6dmFyIGQ9ay5nZXQoZyk7aFtjXT1kIT09cD9kOmIoZyxmLGspfX0pO3JldHVybiBofWZ1bmN0aW9uIGQoYSxiKXtpZihhIGluc3RhbmNlb2YgQXJyYXkpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKWIoYyk7XCJmdW5jdGlvblwiPT10eXBlb2YgYS50b0pTT04mJmIoXCJ0b0pTT05cIil9ZWxzZSBmb3IoYyBpbiBhKWIoYyl9ZnVuY3Rpb24gYygpe3RoaXMua2V5cz1bXTt0aGlzLm1iPVtdfWEuVmI9ZnVuY3Rpb24oYyl7aWYoMD09YXJndW1lbnRzLmxlbmd0aCl0aHJvdyBFcnJvcihcIldoZW4gY2FsbGluZyBrby50b0pTLCBwYXNzIHRoZSBvYmplY3QgeW91IHdhbnQgdG8gY29udmVydC5cIik7cmV0dXJuIGIoYyxmdW5jdGlvbihiKXtmb3IodmFyIGM9MDthLkYoYikmJlxuMTA+YztjKyspYj1iKCk7cmV0dXJuIGJ9KX07YS50b0pTT049ZnVuY3Rpb24oYixjLGQpe2I9YS5WYihiKTtyZXR1cm4gYS5hLmpiKGIsYyxkKX07Yy5wcm90b3R5cGU9e3NhdmU6ZnVuY3Rpb24oYixjKXt2YXIgZD1hLmEubSh0aGlzLmtleXMsYik7MDw9ZD90aGlzLm1iW2RdPWM6KHRoaXMua2V5cy5wdXNoKGIpLHRoaXMubWIucHVzaChjKSl9LGdldDpmdW5jdGlvbihiKXtiPWEuYS5tKHRoaXMua2V5cyxiKTtyZXR1cm4gMDw9Yj90aGlzLm1iW2JdOnB9fX0pKCk7YS5iKFwidG9KU1wiLGEuVmIpO2EuYihcInRvSlNPTlwiLGEudG9KU09OKTsoZnVuY3Rpb24oKXthLmk9e3M6ZnVuY3Rpb24oYil7c3dpdGNoKGEuYS52KGIpKXtjYXNlIFwib3B0aW9uXCI6cmV0dXJuITA9PT1iLl9fa29fX2hhc0RvbURhdGFPcHRpb25WYWx1ZV9fP2EuYS5mLmdldChiLGEuZC5vcHRpb25zLmFiKTo3Pj1hLmEuTT9iLmdldEF0dHJpYnV0ZU5vZGUoXCJ2YWx1ZVwiKSYmYi5nZXRBdHRyaWJ1dGVOb2RlKFwidmFsdWVcIikuc3BlY2lmaWVkP1xuYi52YWx1ZTpiLnRleHQ6Yi52YWx1ZTtjYXNlIFwic2VsZWN0XCI6cmV0dXJuIDA8PWIuc2VsZWN0ZWRJbmRleD9hLmkucyhiLm9wdGlvbnNbYi5zZWxlY3RlZEluZGV4XSk6cDtkZWZhdWx0OnJldHVybiBiLnZhbHVlfX0sWTpmdW5jdGlvbihiLGQsYyl7c3dpdGNoKGEuYS52KGIpKXtjYXNlIFwib3B0aW9uXCI6c3dpdGNoKHR5cGVvZiBkKXtjYXNlIFwic3RyaW5nXCI6YS5hLmYuc2V0KGIsYS5kLm9wdGlvbnMuYWIscCk7XCJfX2tvX19oYXNEb21EYXRhT3B0aW9uVmFsdWVfX1wiaW4gYiYmZGVsZXRlIGIuX19rb19faGFzRG9tRGF0YU9wdGlvblZhbHVlX187Yi52YWx1ZT1kO2JyZWFrO2RlZmF1bHQ6YS5hLmYuc2V0KGIsYS5kLm9wdGlvbnMuYWIsZCksYi5fX2tvX19oYXNEb21EYXRhT3B0aW9uVmFsdWVfXz0hMCxiLnZhbHVlPVwibnVtYmVyXCI9PT10eXBlb2YgZD9kOlwiXCJ9YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmlmKFwiXCI9PT1kfHxudWxsPT09ZClkPXA7Zm9yKHZhciBlPS0xLGY9MCxrPWIub3B0aW9ucy5sZW5ndGgsXG5oO2Y8azsrK2YpaWYoaD1hLmkucyhiLm9wdGlvbnNbZl0pLGg9PWR8fFwiXCI9PWgmJmQ9PT1wKXtlPWY7YnJlYWt9aWYoY3x8MDw9ZXx8ZD09PXAmJjE8Yi5zaXplKWIuc2VsZWN0ZWRJbmRleD1lO2JyZWFrO2RlZmF1bHQ6aWYobnVsbD09PWR8fGQ9PT1wKWQ9XCJcIjtiLnZhbHVlPWR9fX19KSgpO2EuYihcInNlbGVjdEV4dGVuc2lvbnNcIixhLmkpO2EuYihcInNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlXCIsYS5pLnMpO2EuYihcInNlbGVjdEV4dGVuc2lvbnMud3JpdGVWYWx1ZVwiLGEuaS5ZKTthLmg9ZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGIpe2I9YS5hLmliKGIpOzEyMz09PWIuY2hhckNvZGVBdCgwKSYmKGI9Yi5zbGljZSgxLC0xKSk7dmFyIGM9W10sZD1iLm1hdGNoKGUpLHgsaD1bXSxuPTA7aWYoZCl7ZC5wdXNoKFwiLFwiKTtmb3IodmFyIHI9MCx2O3Y9ZFtyXTsrK3Ipe3ZhciB0PXYuY2hhckNvZGVBdCgwKTtpZig0ND09PXQpe2lmKDA+PW4pe2MucHVzaCh4JiZoLmxlbmd0aD97a2V5OngsXG52YWx1ZTpoLmpvaW4oXCJcIil9Ont1bmtub3duOnh8fGguam9pbihcIlwiKX0pO3g9bj0wO2g9W107Y29udGludWV9fWVsc2UgaWYoNTg9PT10KXtpZighbiYmIXgmJjE9PT1oLmxlbmd0aCl7eD1oLnBvcCgpO2NvbnRpbnVlfX1lbHNlIDQ3PT09dCYmciYmMTx2Lmxlbmd0aD8odD1kW3ItMV0ubWF0Y2goZikpJiYha1t0WzBdXSYmKGI9Yi5zdWJzdHIoYi5pbmRleE9mKHYpKzEpLGQ9Yi5tYXRjaChlKSxkLnB1c2goXCIsXCIpLHI9LTEsdj1cIi9cIik6NDA9PT10fHwxMjM9PT10fHw5MT09PXQ/KytuOjQxPT09dHx8MTI1PT09dHx8OTM9PT10Py0tbjp4fHxoLmxlbmd0aHx8MzQhPT10JiYzOSE9PXR8fCh2PXYuc2xpY2UoMSwtMSkpO2gucHVzaCh2KX19cmV0dXJuIGN9dmFyIGQ9W1widHJ1ZVwiLFwiZmFsc2VcIixcIm51bGxcIixcInVuZGVmaW5lZFwiXSxjPS9eKD86WyRfYS16XVskXFx3XSp8KC4rKShcXC5cXHMqWyRfYS16XVskXFx3XSp8XFxbLitcXF0pKSQvaSxlPVJlZ0V4cChcIlxcXCIoPzpbXlxcXCJcXFxcXFxcXF18XFxcXFxcXFwuKSpcXFwifCcoPzpbXidcXFxcXFxcXF18XFxcXFxcXFwuKSonfC8oPzpbXi9cXFxcXFxcXF18XFxcXFxcXFwuKSovdyp8W15cXFxcczosL11bXixcXFwiJ3t9KCkvOltcXFxcXV0qW15cXFxccyxcXFwiJ3t9KCkvOltcXFxcXV18W15cXFxcc11cIixcblwiZ1wiKSxmPS9bXFxdKVwiJ0EtWmEtejAtOV8kXSskLyxrPXtcImluXCI6MSxcInJldHVyblwiOjEsXCJ0eXBlb2ZcIjoxfSxoPXt9O3JldHVybntrYTpbXSxWOmgsYmI6YixFYTpmdW5jdGlvbihlLGcpe2Z1bmN0aW9uIG0oYixnKXt2YXIgZTtpZighcil7dmFyIGw9YS5nZXRCaW5kaW5nSGFuZGxlcihiKTtpZihsJiZsLnByZXByb2Nlc3MmJiEoZz1sLnByZXByb2Nlc3MoZyxiLG0pKSlyZXR1cm47aWYobD1oW2JdKWU9ZywwPD1hLmEubShkLGUpP2U9ITE6KGw9ZS5tYXRjaChjKSxlPW51bGw9PT1sPyExOmxbMV0/XCJPYmplY3QoXCIrbFsxXStcIilcIitsWzJdOmUpLGw9ZTtsJiZrLnB1c2goXCInXCIrYitcIic6ZnVuY3Rpb24oX3ope1wiK2UrXCI9X3p9XCIpfW4mJihnPVwiZnVuY3Rpb24oKXtyZXR1cm4gXCIrZytcIiB9XCIpO2YucHVzaChcIidcIitiK1wiJzpcIitnKX1nPWd8fHt9O3ZhciBmPVtdLGs9W10sbj1nLnZhbHVlQWNjZXNzb3JzLHI9Zy5iaW5kaW5nUGFyYW1zLHY9XCJzdHJpbmdcIj09PXR5cGVvZiBlP2IoZSk6ZTtcbmEuYS5vKHYsZnVuY3Rpb24oYSl7bShhLmtleXx8YS51bmtub3duLGEudmFsdWUpfSk7ay5sZW5ndGgmJm0oXCJfa29fcHJvcGVydHlfd3JpdGVyc1wiLFwie1wiK2suam9pbihcIixcIikrXCIgfVwiKTtyZXR1cm4gZi5qb2luKFwiLFwiKX0sdmM6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKylpZihhW2NdLmtleT09YilyZXR1cm4hMDtyZXR1cm4hMX0scmE6ZnVuY3Rpb24oYixjLGQsZSxmKXtpZihiJiZhLkYoYikpIWEuRGEoYil8fGYmJmIuQigpPT09ZXx8YihlKTtlbHNlIGlmKChiPWMuZ2V0KFwiX2tvX3Byb3BlcnR5X3dyaXRlcnNcIikpJiZiW2RdKWJbZF0oZSl9fX0oKTthLmIoXCJleHByZXNzaW9uUmV3cml0aW5nXCIsYS5oKTthLmIoXCJleHByZXNzaW9uUmV3cml0aW5nLmJpbmRpbmdSZXdyaXRlVmFsaWRhdG9yc1wiLGEuaC5rYSk7YS5iKFwiZXhwcmVzc2lvblJld3JpdGluZy5wYXJzZU9iamVjdExpdGVyYWxcIixhLmguYmIpO2EuYihcImV4cHJlc3Npb25SZXdyaXRpbmcucHJlUHJvY2Vzc0JpbmRpbmdzXCIsXG5hLmguRWEpO2EuYihcImV4cHJlc3Npb25SZXdyaXRpbmcuX3R3b1dheUJpbmRpbmdzXCIsYS5oLlYpO2EuYihcImpzb25FeHByZXNzaW9uUmV3cml0aW5nXCIsYS5oKTthLmIoXCJqc29uRXhwcmVzc2lvblJld3JpdGluZy5pbnNlcnRQcm9wZXJ0eUFjY2Vzc29yc0ludG9Kc29uXCIsYS5oLkVhKTsoZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGEpe3JldHVybiA4PT1hLm5vZGVUeXBlJiZrLnRlc3QoZj9hLnRleHQ6YS5ub2RlVmFsdWUpfWZ1bmN0aW9uIGQoYSl7cmV0dXJuIDg9PWEubm9kZVR5cGUmJmgudGVzdChmP2EudGV4dDphLm5vZGVWYWx1ZSl9ZnVuY3Rpb24gYyhhLGMpe2Zvcih2YXIgZT1hLGY9MSxsPVtdO2U9ZS5uZXh0U2libGluZzspe2lmKGQoZSkmJihmLS0sMD09PWYpKXJldHVybiBsO2wucHVzaChlKTtiKGUpJiZmKyt9aWYoIWMpdGhyb3cgRXJyb3IoXCJDYW5ub3QgZmluZCBjbG9zaW5nIGNvbW1lbnQgdGFnIHRvIG1hdGNoOiBcIithLm5vZGVWYWx1ZSk7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZShhLFxuYil7dmFyIGQ9YyhhLGIpO3JldHVybiBkPzA8ZC5sZW5ndGg/ZFtkLmxlbmd0aC0xXS5uZXh0U2libGluZzphLm5leHRTaWJsaW5nOm51bGx9dmFyIGY9dyYmXCJcXHgzYyEtLXRlc3QtLVxceDNlXCI9PT13LmNyZWF0ZUNvbW1lbnQoXCJ0ZXN0XCIpLnRleHQsaz1mPy9eXFx4M2MhLS1cXHMqa28oPzpcXHMrKFtcXHNcXFNdKykpP1xccyotLVxceDNlJC86L15cXHMqa28oPzpcXHMrKFtcXHNcXFNdKykpP1xccyokLyxoPWY/L15cXHgzYyEtLVxccypcXC9rb1xccyotLVxceDNlJC86L15cXHMqXFwva29cXHMqJC8sbD17dWw6ITAsb2w6ITB9O2EuZT17Ujp7fSxjaGlsZE5vZGVzOmZ1bmN0aW9uKGEpe3JldHVybiBiKGEpP2MoYSk6YS5jaGlsZE5vZGVzfSxtYTpmdW5jdGlvbihjKXtpZihiKGMpKXtjPWEuZS5jaGlsZE5vZGVzKGMpO2Zvcih2YXIgZD0wLGU9Yy5sZW5ndGg7ZDxlO2QrKylhLnJlbW92ZU5vZGUoY1tkXSl9ZWxzZSBhLmEuUmEoYyl9LFQ6ZnVuY3Rpb24oYyxkKXtpZihiKGMpKXthLmUubWEoYyk7Zm9yKHZhciBlPWMubmV4dFNpYmxpbmcsXG5mPTAsbD1kLmxlbmd0aDtmPGw7ZisrKWUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZFtmXSxlKX1lbHNlIGEuYS5UKGMsZCl9LE1iOmZ1bmN0aW9uKGEsYyl7YihhKT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGMsYS5uZXh0U2libGluZyk6YS5maXJzdENoaWxkP2EuaW5zZXJ0QmVmb3JlKGMsYS5maXJzdENoaWxkKTphLmFwcGVuZENoaWxkKGMpfSxGYjpmdW5jdGlvbihjLGQsZSl7ZT9iKGMpP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZCxlLm5leHRTaWJsaW5nKTplLm5leHRTaWJsaW5nP2MuaW5zZXJ0QmVmb3JlKGQsZS5uZXh0U2libGluZyk6Yy5hcHBlbmRDaGlsZChkKTphLmUuTWIoYyxkKX0sZmlyc3RDaGlsZDpmdW5jdGlvbihhKXtyZXR1cm4gYihhKT8hYS5uZXh0U2libGluZ3x8ZChhLm5leHRTaWJsaW5nKT9udWxsOmEubmV4dFNpYmxpbmc6YS5maXJzdENoaWxkfSxuZXh0U2libGluZzpmdW5jdGlvbihhKXtiKGEpJiYoYT1lKGEpKTtyZXR1cm4gYS5uZXh0U2libGluZyYmXG5kKGEubmV4dFNpYmxpbmcpP251bGw6YS5uZXh0U2libGluZ30sb2M6YixGYzpmdW5jdGlvbihhKXtyZXR1cm4oYT0oZj9hLnRleHQ6YS5ub2RlVmFsdWUpLm1hdGNoKGspKT9hWzFdOm51bGx9LEtiOmZ1bmN0aW9uKGMpe2lmKGxbYS5hLnYoYyldKXt2YXIgbT1jLmZpcnN0Q2hpbGQ7aWYobSl7ZG8gaWYoMT09PW0ubm9kZVR5cGUpe3ZhciBmO2Y9bS5maXJzdENoaWxkO3ZhciBoPW51bGw7aWYoZil7ZG8gaWYoaCloLnB1c2goZik7ZWxzZSBpZihiKGYpKXt2YXIgaz1lKGYsITApO2s/Zj1rOmg9W2ZdfWVsc2UgZChmKSYmKGg9W2ZdKTt3aGlsZShmPWYubmV4dFNpYmxpbmcpfWlmKGY9aClmb3IoaD1tLm5leHRTaWJsaW5nLGs9MDtrPGYubGVuZ3RoO2srKyloP2MuaW5zZXJ0QmVmb3JlKGZba10saCk6Yy5hcHBlbmRDaGlsZChmW2tdKX13aGlsZShtPW0ubmV4dFNpYmxpbmcpfX19fX0pKCk7YS5iKFwidmlydHVhbEVsZW1lbnRzXCIsYS5lKTthLmIoXCJ2aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzXCIsXG5hLmUuUik7YS5iKFwidmlydHVhbEVsZW1lbnRzLmVtcHR5Tm9kZVwiLGEuZS5tYSk7YS5iKFwidmlydHVhbEVsZW1lbnRzLmluc2VydEFmdGVyXCIsYS5lLkZiKTthLmIoXCJ2aXJ0dWFsRWxlbWVudHMucHJlcGVuZFwiLGEuZS5NYik7YS5iKFwidmlydHVhbEVsZW1lbnRzLnNldERvbU5vZGVDaGlsZHJlblwiLGEuZS5UKTsoZnVuY3Rpb24oKXthLkw9ZnVuY3Rpb24oKXt0aGlzLmVjPXt9fTthLmEuZXh0ZW5kKGEuTC5wcm90b3R5cGUse25vZGVIYXNCaW5kaW5nczpmdW5jdGlvbihiKXtzd2l0Y2goYi5ub2RlVHlwZSl7Y2FzZSAxOnJldHVybiBudWxsIT1iLmdldEF0dHJpYnV0ZShcImRhdGEtYmluZFwiKXx8YS5nLmdldENvbXBvbmVudE5hbWVGb3JOb2RlKGIpO2Nhc2UgODpyZXR1cm4gYS5lLm9jKGIpO2RlZmF1bHQ6cmV0dXJuITF9fSxnZXRCaW5kaW5nczpmdW5jdGlvbihiLGQpe3ZhciBjPXRoaXMuZ2V0QmluZGluZ3NTdHJpbmcoYixkKSxjPWM/dGhpcy5wYXJzZUJpbmRpbmdzU3RyaW5nKGMsXG5kLGIpOm51bGw7cmV0dXJuIGEuZy5zYihjLGIsZCwhMSl9LGdldEJpbmRpbmdBY2Nlc3NvcnM6ZnVuY3Rpb24oYixkKXt2YXIgYz10aGlzLmdldEJpbmRpbmdzU3RyaW5nKGIsZCksYz1jP3RoaXMucGFyc2VCaW5kaW5nc1N0cmluZyhjLGQsYix7dmFsdWVBY2Nlc3NvcnM6ITB9KTpudWxsO3JldHVybiBhLmcuc2IoYyxiLGQsITApfSxnZXRCaW5kaW5nc1N0cmluZzpmdW5jdGlvbihiKXtzd2l0Y2goYi5ub2RlVHlwZSl7Y2FzZSAxOnJldHVybiBiLmdldEF0dHJpYnV0ZShcImRhdGEtYmluZFwiKTtjYXNlIDg6cmV0dXJuIGEuZS5GYyhiKTtkZWZhdWx0OnJldHVybiBudWxsfX0scGFyc2VCaW5kaW5nc1N0cmluZzpmdW5jdGlvbihiLGQsYyxlKXt0cnl7dmFyIGY9dGhpcy5lYyxrPWIrKGUmJmUudmFsdWVBY2Nlc3NvcnN8fFwiXCIpLGg7aWYoIShoPWZba10pKXt2YXIgbCxnPVwid2l0aCgkY29udGV4dCl7d2l0aCgkZGF0YXx8e30pe3JldHVybntcIithLmguRWEoYixlKStcIn19fVwiO2w9bmV3IEZ1bmN0aW9uKFwiJGNvbnRleHRcIixcblwiJGVsZW1lbnRcIixnKTtoPWZba109bH1yZXR1cm4gaChkLGMpfWNhdGNoKG0pe3Rocm93IG0ubWVzc2FnZT1cIlVuYWJsZSB0byBwYXJzZSBiaW5kaW5ncy5cXG5CaW5kaW5ncyB2YWx1ZTogXCIrYitcIlxcbk1lc3NhZ2U6IFwiK20ubWVzc2FnZSxtO319fSk7YS5MLmluc3RhbmNlPW5ldyBhLkx9KSgpO2EuYihcImJpbmRpbmdQcm92aWRlclwiLGEuTCk7KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYihhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYX19ZnVuY3Rpb24gZChhKXtyZXR1cm4gYSgpfWZ1bmN0aW9uIGMoYil7cmV0dXJuIGEuYS5wYShhLmsudShiKSxmdW5jdGlvbihhLGMpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBiKClbY119fSl9ZnVuY3Rpb24gZShkLGcsZSl7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGQ/YyhkLmJpbmQobnVsbCxnLGUpKTphLmEucGEoZCxiKX1mdW5jdGlvbiBmKGEsYil7cmV0dXJuIGModGhpcy5nZXRCaW5kaW5ncy5iaW5kKHRoaXMsYSxiKSl9ZnVuY3Rpb24gayhiLFxuYyxkKXt2YXIgZyxlPWEuZS5maXJzdENoaWxkKGMpLGY9YS5MLmluc3RhbmNlLG09Zi5wcmVwcm9jZXNzTm9kZTtpZihtKXtmb3IoO2c9ZTspZT1hLmUubmV4dFNpYmxpbmcoZyksbS5jYWxsKGYsZyk7ZT1hLmUuZmlyc3RDaGlsZChjKX1mb3IoO2c9ZTspZT1hLmUubmV4dFNpYmxpbmcoZyksaChiLGcsZCl9ZnVuY3Rpb24gaChiLGMsZCl7dmFyIGU9ITAsZj0xPT09Yy5ub2RlVHlwZTtmJiZhLmUuS2IoYyk7aWYoZiYmZHx8YS5MLmluc3RhbmNlLm5vZGVIYXNCaW5kaW5ncyhjKSllPWcoYyxudWxsLGIsZCkuc2hvdWxkQmluZERlc2NlbmRhbnRzO2UmJiF4W2EuYS52KGMpXSYmayhiLGMsIWYpfWZ1bmN0aW9uIGwoYil7dmFyIGM9W10sZD17fSxnPVtdO2EuYS5BKGIsZnVuY3Rpb24gSShlKXtpZighZFtlXSl7dmFyIGY9YS5nZXRCaW5kaW5nSGFuZGxlcihlKTtmJiYoZi5hZnRlciYmKGcucHVzaChlKSxhLmEubyhmLmFmdGVyLGZ1bmN0aW9uKGMpe2lmKGJbY10pe2lmKC0xIT09YS5hLm0oZyxcbmMpKXRocm93IEVycm9yKFwiQ2Fubm90IGNvbWJpbmUgdGhlIGZvbGxvd2luZyBiaW5kaW5ncywgYmVjYXVzZSB0aGV5IGhhdmUgYSBjeWNsaWMgZGVwZW5kZW5jeTogXCIrZy5qb2luKFwiLCBcIikpO0koYyl9fSksZy5sZW5ndGgtLSksYy5wdXNoKHtrZXk6ZSxFYjpmfSkpO2RbZV09ITB9fSk7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiLGMsZyxlKXt2YXIgbT1hLmEuZi5nZXQoYixxKTtpZighYyl7aWYobSl0aHJvdyBFcnJvcihcIllvdSBjYW5ub3QgYXBwbHkgYmluZGluZ3MgbXVsdGlwbGUgdGltZXMgdG8gdGhlIHNhbWUgZWxlbWVudC5cIik7YS5hLmYuc2V0KGIscSwhMCl9IW0mJmUmJmEuVGIoYixnKTt2YXIgaDtpZihjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyloPWM7ZWxzZXt2YXIgaz1hLkwuaW5zdGFuY2UseD1rLmdldEJpbmRpbmdBY2Nlc3NvcnN8fGYsbj1hLmooZnVuY3Rpb24oKXsoaD1jP2MoZyxiKTp4LmNhbGwoayxiLGcpKSYmZy5LJiZnLksoKTtyZXR1cm4gaH0sbnVsbCx7cTpifSk7XG5oJiZuLiQoKXx8KG49bnVsbCl9dmFyIHU7aWYoaCl7dmFyIHc9bj9mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZChuKClbYV0pfX06ZnVuY3Rpb24oYSl7cmV0dXJuIGhbYV19LHk9ZnVuY3Rpb24oKXtyZXR1cm4gYS5hLnBhKG4/bigpOmgsZCl9O3kuZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiBoW2FdJiZkKHcoYSkpfTt5Lmhhcz1mdW5jdGlvbihhKXtyZXR1cm4gYSBpbiBofTtlPWwoaCk7YS5hLm8oZSxmdW5jdGlvbihjKXt2YXIgZD1jLkViLmluaXQsZT1jLkViLnVwZGF0ZSxmPWMua2V5O2lmKDg9PT1iLm5vZGVUeXBlJiYhYS5lLlJbZl0pdGhyb3cgRXJyb3IoXCJUaGUgYmluZGluZyAnXCIrZitcIicgY2Fubm90IGJlIHVzZWQgd2l0aCB2aXJ0dWFsIGVsZW1lbnRzXCIpO3RyeXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkJiZhLmsudShmdW5jdGlvbigpe3ZhciBhPWQoYix3KGYpLHksZy4kZGF0YSxnKTtpZihhJiZhLmNvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzKXtpZih1IT09XG5wKXRocm93IEVycm9yKFwiTXVsdGlwbGUgYmluZGluZ3MgKFwiK3UrXCIgYW5kIFwiK2YrXCIpIGFyZSB0cnlpbmcgdG8gY29udHJvbCBkZXNjZW5kYW50IGJpbmRpbmdzIG9mIHRoZSBzYW1lIGVsZW1lbnQuIFlvdSBjYW5ub3QgdXNlIHRoZXNlIGJpbmRpbmdzIHRvZ2V0aGVyIG9uIHRoZSBzYW1lIGVsZW1lbnQuXCIpO3U9Zn19KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZhLmooZnVuY3Rpb24oKXtlKGIsdyhmKSx5LGcuJGRhdGEsZyl9LG51bGwse3E6Yn0pfWNhdGNoKG0pe3Rocm93IG0ubWVzc2FnZT0nVW5hYmxlIHRvIHByb2Nlc3MgYmluZGluZyBcIicrZitcIjogXCIraFtmXSsnXCJcXG5NZXNzYWdlOiAnK20ubWVzc2FnZSxtO319KX1yZXR1cm57c2hvdWxkQmluZERlc2NlbmRhbnRzOnU9PT1wfX1mdW5jdGlvbiBtKGIpe3JldHVybiBiJiZiIGluc3RhbmNlb2YgYS5OP2I6bmV3IGEuTihiKX1hLmQ9e307dmFyIHg9e3NjcmlwdDohMCx0ZXh0YXJlYTohMH07YS5nZXRCaW5kaW5nSGFuZGxlcj1mdW5jdGlvbihiKXtyZXR1cm4gYS5kW2JdfTtcbmEuTj1mdW5jdGlvbihiLGMsZCxnKXt2YXIgZT10aGlzLGY9XCJmdW5jdGlvblwiPT10eXBlb2YgYiYmIWEuRihiKSxtLGw9YS5qKGZ1bmN0aW9uKCl7dmFyIG09Zj9iKCk6YixoPWEuYS5jKG0pO2M/KGMuSyYmYy5LKCksYS5hLmV4dGVuZChlLGMpLGwmJihlLks9bCkpOihlLiRwYXJlbnRzPVtdLGUuJHJvb3Q9aCxlLmtvPWEpO2UuJHJhd0RhdGE9bTtlLiRkYXRhPWg7ZCYmKGVbZF09aCk7ZyYmZyhlLGMsaCk7cmV0dXJuIGUuJGRhdGF9LG51bGwse1BhOmZ1bmN0aW9uKCl7cmV0dXJuIG0mJiFhLmEudGIobSl9LHE6ITB9KTtsLiQoKSYmKGUuSz1sLGwuZXF1YWxpdHlDb21wYXJlcj1udWxsLG09W10sbC5aYj1mdW5jdGlvbihiKXttLnB1c2goYik7YS5hLkMuZmEoYixmdW5jdGlvbihiKXthLmEueWEobSxiKTttLmxlbmd0aHx8KGwucCgpLGUuSz1sPXApfSl9KX07YS5OLnByb3RvdHlwZS5jcmVhdGVDaGlsZENvbnRleHQ9ZnVuY3Rpb24oYixjLGQpe3JldHVybiBuZXcgYS5OKGIsdGhpcyxcbmMsZnVuY3Rpb24oYSxiKXthLiRwYXJlbnRDb250ZXh0PWI7YS4kcGFyZW50PWIuJGRhdGE7YS4kcGFyZW50cz0oYi4kcGFyZW50c3x8W10pLnNsaWNlKDApO2EuJHBhcmVudHMudW5zaGlmdChhLiRwYXJlbnQpO2QmJmQoYSl9KX07YS5OLnByb3RvdHlwZS5leHRlbmQ9ZnVuY3Rpb24oYil7cmV0dXJuIG5ldyBhLk4odGhpcy5LfHx0aGlzLiRkYXRhLHRoaXMsbnVsbCxmdW5jdGlvbihjLGQpe2MuJHJhd0RhdGE9ZC4kcmF3RGF0YTthLmEuZXh0ZW5kKGMsXCJmdW5jdGlvblwiPT10eXBlb2YgYj9iKCk6Yil9KX07dmFyIHE9YS5hLmYuSSgpLG49YS5hLmYuSSgpO2EuVGI9ZnVuY3Rpb24oYixjKXtpZigyPT1hcmd1bWVudHMubGVuZ3RoKWEuYS5mLnNldChiLG4sYyksYy5LJiZjLksuWmIoYik7ZWxzZSByZXR1cm4gYS5hLmYuZ2V0KGIsbil9O2EudmE9ZnVuY3Rpb24oYixjLGQpezE9PT1iLm5vZGVUeXBlJiZhLmUuS2IoYik7cmV0dXJuIGcoYixjLG0oZCksITApfTthLmNjPWZ1bmN0aW9uKGIsXG5jLGQpe2Q9bShkKTtyZXR1cm4gYS52YShiLGUoYyxkLGIpLGQpfTthLkphPWZ1bmN0aW9uKGEsYil7MSE9PWIubm9kZVR5cGUmJjghPT1iLm5vZGVUeXBlfHxrKG0oYSksYiwhMCl9O2EudWI9ZnVuY3Rpb24oYSxiKXshdSYmeS5qUXVlcnkmJih1PXkualF1ZXJ5KTtpZihiJiYxIT09Yi5ub2RlVHlwZSYmOCE9PWIubm9kZVR5cGUpdGhyb3cgRXJyb3IoXCJrby5hcHBseUJpbmRpbmdzOiBmaXJzdCBwYXJhbWV0ZXIgc2hvdWxkIGJlIHlvdXIgdmlldyBtb2RlbDsgc2Vjb25kIHBhcmFtZXRlciBzaG91bGQgYmUgYSBET00gbm9kZVwiKTtiPWJ8fHkuZG9jdW1lbnQuYm9keTtoKG0oYSksYiwhMCl9O2EuT2E9ZnVuY3Rpb24oYil7c3dpdGNoKGIubm9kZVR5cGUpe2Nhc2UgMTpjYXNlIDg6dmFyIGM9YS5UYihiKTtpZihjKXJldHVybiBjO2lmKGIucGFyZW50Tm9kZSlyZXR1cm4gYS5PYShiLnBhcmVudE5vZGUpfXJldHVybiBwfTthLmdjPWZ1bmN0aW9uKGIpe3JldHVybihiPWEuT2EoYikpP1xuYi4kZGF0YTpwfTthLmIoXCJiaW5kaW5nSGFuZGxlcnNcIixhLmQpO2EuYihcImFwcGx5QmluZGluZ3NcIixhLnViKTthLmIoXCJhcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50c1wiLGEuSmEpO2EuYihcImFwcGx5QmluZGluZ0FjY2Vzc29yc1RvTm9kZVwiLGEudmEpO2EuYihcImFwcGx5QmluZGluZ3NUb05vZGVcIixhLmNjKTthLmIoXCJjb250ZXh0Rm9yXCIsYS5PYSk7YS5iKFwiZGF0YUZvclwiLGEuZ2MpfSkoKTsoZnVuY3Rpb24oYil7ZnVuY3Rpb24gZChkLGUpe3ZhciBnPWYuaGFzT3duUHJvcGVydHkoZCk/ZltkXTpiLG07Zz9nLlUoZSk6KGc9ZltkXT1uZXcgYS5RLGcuVShlKSxjKGQsZnVuY3Rpb24oYSxiKXt2YXIgYz0hKCFifHwhYi5zeW5jaHJvbm91cyk7a1tkXT17ZGVmaW5pdGlvbjphLHRjOmN9O2RlbGV0ZSBmW2RdO218fGM/Zy5ub3RpZnlTdWJzY3JpYmVycyhhKTpzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Zy5ub3RpZnlTdWJzY3JpYmVycyhhKX0sMCl9KSxtPSEwKX1mdW5jdGlvbiBjKGEsYil7ZShcImdldENvbmZpZ1wiLFxuW2FdLGZ1bmN0aW9uKGMpe2M/ZShcImxvYWRDb21wb25lbnRcIixbYSxjXSxmdW5jdGlvbihhKXtiKGEsYyl9KTpiKG51bGwsbnVsbCl9KX1mdW5jdGlvbiBlKGMsZCxnLGYpe2Z8fChmPWEuZy5sb2FkZXJzLnNsaWNlKDApKTt2YXIgaz1mLnNoaWZ0KCk7aWYoayl7dmFyIHE9a1tjXTtpZihxKXt2YXIgbj0hMTtpZihxLmFwcGx5KGssZC5jb25jYXQoZnVuY3Rpb24oYSl7bj9nKG51bGwpOm51bGwhPT1hP2coYSk6ZShjLGQsZyxmKX0pKSE9PWImJihuPSEwLCFrLnN1cHByZXNzTG9hZGVyRXhjZXB0aW9ucykpdGhyb3cgRXJyb3IoXCJDb21wb25lbnQgbG9hZGVycyBtdXN0IHN1cHBseSB2YWx1ZXMgYnkgaW52b2tpbmcgdGhlIGNhbGxiYWNrLCBub3QgYnkgcmV0dXJuaW5nIHZhbHVlcyBzeW5jaHJvbm91c2x5LlwiKTt9ZWxzZSBlKGMsZCxnLGYpfWVsc2UgZyhudWxsKX12YXIgZj17fSxrPXt9O2EuZz17Z2V0OmZ1bmN0aW9uKGMsZSl7dmFyIGc9ay5oYXNPd25Qcm9wZXJ0eShjKT9rW2NdOlxuYjtnP2cudGM/YS5rLnUoZnVuY3Rpb24oKXtlKGcuZGVmaW5pdGlvbil9KTpzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShnLmRlZmluaXRpb24pfSwwKTpkKGMsZSl9LHpiOmZ1bmN0aW9uKGEpe2RlbGV0ZSBrW2FdfSxvYjplfTthLmcubG9hZGVycz1bXTthLmIoXCJjb21wb25lbnRzXCIsYS5nKTthLmIoXCJjb21wb25lbnRzLmdldFwiLGEuZy5nZXQpO2EuYihcImNvbXBvbmVudHMuY2xlYXJDYWNoZWREZWZpbml0aW9uXCIsYS5nLnpiKX0pKCk7KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYihiLGMsZCxlKXtmdW5jdGlvbiBrKCl7MD09PS0tdiYmZShoKX12YXIgaD17fSx2PTIsdD1kLnRlbXBsYXRlO2Q9ZC52aWV3TW9kZWw7dD9mKGMsdCxmdW5jdGlvbihjKXthLmcub2IoXCJsb2FkVGVtcGxhdGVcIixbYixjXSxmdW5jdGlvbihhKXtoLnRlbXBsYXRlPWE7aygpfSl9KTprKCk7ZD9mKGMsZCxmdW5jdGlvbihjKXthLmcub2IoXCJsb2FkVmlld01vZGVsXCIsW2IsY10sZnVuY3Rpb24oYSl7aFtsXT1hO2soKX0pfSk6XG5rKCl9ZnVuY3Rpb24gZChhLGIsYyl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpYyhmdW5jdGlvbihhKXtyZXR1cm4gbmV3IGIoYSl9KTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2xdKWMoYltsXSk7ZWxzZSBpZihcImluc3RhbmNlXCJpbiBiKXt2YXIgZT1iLmluc3RhbmNlO2MoZnVuY3Rpb24oKXtyZXR1cm4gZX0pfWVsc2VcInZpZXdNb2RlbFwiaW4gYj9kKGEsYi52aWV3TW9kZWwsYyk6YShcIlVua25vd24gdmlld01vZGVsIHZhbHVlOiBcIitiKX1mdW5jdGlvbiBjKGIpe3N3aXRjaChhLmEudihiKSl7Y2FzZSBcInNjcmlwdFwiOnJldHVybiBhLmEuY2EoYi50ZXh0KTtjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4gYS5hLmNhKGIudmFsdWUpO2Nhc2UgXCJ0ZW1wbGF0ZVwiOmlmKGUoYi5jb250ZW50KSlyZXR1cm4gYS5hLmxhKGIuY29udGVudC5jaGlsZE5vZGVzKX1yZXR1cm4gYS5hLmxhKGIuY2hpbGROb2Rlcyl9ZnVuY3Rpb24gZShhKXtyZXR1cm4geS5Eb2N1bWVudEZyYWdtZW50P2EgaW5zdGFuY2VvZlxuRG9jdW1lbnRGcmFnbWVudDphJiYxMT09PWEubm9kZVR5cGV9ZnVuY3Rpb24gZihhLGIsYyl7XCJzdHJpbmdcIj09PXR5cGVvZiBiLnJlcXVpcmU/T3x8eS5yZXF1aXJlPyhPfHx5LnJlcXVpcmUpKFtiLnJlcXVpcmVdLGMpOmEoXCJVc2VzIHJlcXVpcmUsIGJ1dCBubyBBTUQgbG9hZGVyIGlzIHByZXNlbnRcIik6YyhiKX1mdW5jdGlvbiBrKGEpe3JldHVybiBmdW5jdGlvbihiKXt0aHJvdyBFcnJvcihcIkNvbXBvbmVudCAnXCIrYStcIic6IFwiK2IpO319dmFyIGg9e307YS5nLnJlZ2lzdGVyPWZ1bmN0aW9uKGIsYyl7aWYoIWMpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGNvbmZpZ3VyYXRpb24gZm9yIFwiK2IpO2lmKGEuZy5YYShiKSl0aHJvdyBFcnJvcihcIkNvbXBvbmVudCBcIitiK1wiIGlzIGFscmVhZHkgcmVnaXN0ZXJlZFwiKTtoW2JdPWN9O2EuZy5YYT1mdW5jdGlvbihhKXtyZXR1cm4gYSBpbiBofTthLmcuRWM9ZnVuY3Rpb24oYil7ZGVsZXRlIGhbYl07YS5nLnpiKGIpfTthLmcuQWI9e2dldENvbmZpZzpmdW5jdGlvbihhLFxuYil7YihoLmhhc093blByb3BlcnR5KGEpP2hbYV06bnVsbCl9LGxvYWRDb21wb25lbnQ6ZnVuY3Rpb24oYSxjLGQpe3ZhciBlPWsoYSk7ZihlLGMsZnVuY3Rpb24oYyl7YihhLGUsYyxkKX0pfSxsb2FkVGVtcGxhdGU6ZnVuY3Rpb24oYixkLGYpe2I9ayhiKTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGQpZihhLmEuY2EoZCkpO2Vsc2UgaWYoZCBpbnN0YW5jZW9mIEFycmF5KWYoZCk7ZWxzZSBpZihlKGQpKWYoYS5hLk8oZC5jaGlsZE5vZGVzKSk7ZWxzZSBpZihkLmVsZW1lbnQpaWYoZD1kLmVsZW1lbnQseS5IVE1MRWxlbWVudD9kIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ6ZCYmZC50YWdOYW1lJiYxPT09ZC5ub2RlVHlwZSlmKGMoZCkpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkKXt2YXIgbD13LmdldEVsZW1lbnRCeUlkKGQpO2w/ZihjKGwpKTpiKFwiQ2Fubm90IGZpbmQgZWxlbWVudCB3aXRoIElEIFwiK2QpfWVsc2UgYihcIlVua25vd24gZWxlbWVudCB0eXBlOiBcIitkKTtlbHNlIGIoXCJVbmtub3duIHRlbXBsYXRlIHZhbHVlOiBcIitcbmQpfSxsb2FkVmlld01vZGVsOmZ1bmN0aW9uKGEsYixjKXtkKGsoYSksYixjKX19O3ZhciBsPVwiY3JlYXRlVmlld01vZGVsXCI7YS5iKFwiY29tcG9uZW50cy5yZWdpc3RlclwiLGEuZy5yZWdpc3Rlcik7YS5iKFwiY29tcG9uZW50cy5pc1JlZ2lzdGVyZWRcIixhLmcuWGEpO2EuYihcImNvbXBvbmVudHMudW5yZWdpc3RlclwiLGEuZy5FYyk7YS5iKFwiY29tcG9uZW50cy5kZWZhdWx0TG9hZGVyXCIsYS5nLkFiKTthLmcubG9hZGVycy5wdXNoKGEuZy5BYik7YS5nLiRiPWh9KSgpOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGIoYixlKXt2YXIgZj1iLmdldEF0dHJpYnV0ZShcInBhcmFtc1wiKTtpZihmKXt2YXIgZj1kLnBhcnNlQmluZGluZ3NTdHJpbmcoZixlLGIse3ZhbHVlQWNjZXNzb3JzOiEwLGJpbmRpbmdQYXJhbXM6ITB9KSxmPWEuYS5wYShmLGZ1bmN0aW9uKGQpe3JldHVybiBhLncoZCxudWxsLHtxOmJ9KX0pLGs9YS5hLnBhKGYsZnVuY3Rpb24oZCl7dmFyIGU9ZC5CKCk7cmV0dXJuIGQuJCgpP2Eudyh7cmVhZDpmdW5jdGlvbigpe3JldHVybiBhLmEuYyhkKCkpfSxcbndyaXRlOmEuRGEoZSkmJmZ1bmN0aW9uKGEpe2QoKShhKX0scTpifSk6ZX0pO2suaGFzT3duUHJvcGVydHkoXCIkcmF3XCIpfHwoay4kcmF3PWYpO3JldHVybiBrfXJldHVybnskcmF3Ont9fX1hLmcuZ2V0Q29tcG9uZW50TmFtZUZvck5vZGU9ZnVuY3Rpb24oYil7Yj1hLmEudihiKTtyZXR1cm4gYS5nLlhhKGIpJiZifTthLmcuc2I9ZnVuY3Rpb24oYyxkLGYsayl7aWYoMT09PWQubm9kZVR5cGUpe3ZhciBoPWEuZy5nZXRDb21wb25lbnROYW1lRm9yTm9kZShkKTtpZihoKXtjPWN8fHt9O2lmKGMuY29tcG9uZW50KXRocm93IEVycm9yKCdDYW5ub3QgdXNlIHRoZSBcImNvbXBvbmVudFwiIGJpbmRpbmcgb24gYSBjdXN0b20gZWxlbWVudCBtYXRjaGluZyBhIGNvbXBvbmVudCcpO3ZhciBsPXtuYW1lOmgscGFyYW1zOmIoZCxmKX07Yy5jb21wb25lbnQ9az9mdW5jdGlvbigpe3JldHVybiBsfTpsfX1yZXR1cm4gY307dmFyIGQ9bmV3IGEuTDs5PmEuYS5NJiYoYS5nLnJlZ2lzdGVyPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXt3LmNyZWF0ZUVsZW1lbnQoYik7XG5yZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fShhLmcucmVnaXN0ZXIpLHcuY3JlYXRlRG9jdW1lbnRGcmFnbWVudD1mdW5jdGlvbihiKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZD1iKCksZj1hLmcuJGIsaztmb3IoayBpbiBmKWYuaGFzT3duUHJvcGVydHkoaykmJmQuY3JlYXRlRWxlbWVudChrKTtyZXR1cm4gZH19KHcuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCkpfSkoKTsoZnVuY3Rpb24oYil7ZnVuY3Rpb24gZChiLGMsZCl7Yz1jLnRlbXBsYXRlO2lmKCFjKXRocm93IEVycm9yKFwiQ29tcG9uZW50ICdcIitiK1wiJyBoYXMgbm8gdGVtcGxhdGVcIik7Yj1hLmEubGEoYyk7YS5lLlQoZCxiKX1mdW5jdGlvbiBjKGEsYixjLGQpe3ZhciBlPWEuY3JlYXRlVmlld01vZGVsO3JldHVybiBlP2UuY2FsbChhLGQse2VsZW1lbnQ6Yix0ZW1wbGF0ZU5vZGVzOmN9KTpkfXZhciBlPTA7YS5kLmNvbXBvbmVudD17aW5pdDpmdW5jdGlvbihmLGssaCxsLGcpe2Z1bmN0aW9uIG0oKXt2YXIgYT14JiZcbnguZGlzcG9zZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmYS5jYWxsKHgpO3E9bnVsbH12YXIgeCxxLG49YS5hLk8oYS5lLmNoaWxkTm9kZXMoZikpO2EuYS5DLmZhKGYsbSk7YS53KGZ1bmN0aW9uKCl7dmFyIGw9YS5hLmMoaygpKSxoLHQ7XCJzdHJpbmdcIj09PXR5cGVvZiBsP2g9bDooaD1hLmEuYyhsLm5hbWUpLHQ9YS5hLmMobC5wYXJhbXMpKTtpZighaCl0aHJvdyBFcnJvcihcIk5vIGNvbXBvbmVudCBuYW1lIHNwZWNpZmllZFwiKTt2YXIgcD1xPSsrZTthLmcuZ2V0KGgsZnVuY3Rpb24oZSl7aWYocT09PXApe20oKTtpZighZSl0aHJvdyBFcnJvcihcIlVua25vd24gY29tcG9uZW50ICdcIitoK1wiJ1wiKTtkKGgsZSxmKTt2YXIgbD1jKGUsZixuLHQpO2U9Zy5jcmVhdGVDaGlsZENvbnRleHQobCxiLGZ1bmN0aW9uKGEpe2EuJGNvbXBvbmVudD1sO2EuJGNvbXBvbmVudFRlbXBsYXRlTm9kZXM9bn0pO3g9bDthLkphKGUsZil9fSl9LG51bGwse3E6Zn0pO3JldHVybntjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczohMH19fTtcbmEuZS5SLmNvbXBvbmVudD0hMH0pKCk7dmFyIFA9e1wiY2xhc3NcIjpcImNsYXNzTmFtZVwiLFwiZm9yXCI6XCJodG1sRm9yXCJ9O2EuZC5hdHRyPXt1cGRhdGU6ZnVuY3Rpb24oYixkKXt2YXIgYz1hLmEuYyhkKCkpfHx7fTthLmEuQShjLGZ1bmN0aW9uKGMsZCl7ZD1hLmEuYyhkKTt2YXIgaz0hMT09PWR8fG51bGw9PT1kfHxkPT09cDtrJiZiLnJlbW92ZUF0dHJpYnV0ZShjKTs4Pj1hLmEuTSYmYyBpbiBQPyhjPVBbY10saz9iLnJlbW92ZUF0dHJpYnV0ZShjKTpiW2NdPWQpOmt8fGIuc2V0QXR0cmlidXRlKGMsZC50b1N0cmluZygpKTtcIm5hbWVcIj09PWMmJmEuYS5SYihiLGs/XCJcIjpkLnRvU3RyaW5nKCkpfSl9fTsoZnVuY3Rpb24oKXthLmQuY2hlY2tlZD17YWZ0ZXI6W1widmFsdWVcIixcImF0dHJcIl0saW5pdDpmdW5jdGlvbihiLGQsYyl7ZnVuY3Rpb24gZSgpe3ZhciBlPWIuY2hlY2tlZCxmPXg/aygpOmU7aWYoIWEuWi5DYSgpJiYoIWx8fGUpKXt2YXIgaD1hLmsudShkKTtnP20hPT1mPyhlJiYoYS5hLmdhKGgsXG5mLCEwKSxhLmEuZ2EoaCxtLCExKSksbT1mKTphLmEuZ2EoaCxmLGUpOmEuaC5yYShoLGMsXCJjaGVja2VkXCIsZiwhMCl9fWZ1bmN0aW9uIGYoKXt2YXIgYz1hLmEuYyhkKCkpO2IuY2hlY2tlZD1nPzA8PWEuYS5tKGMsaygpKTpoP2M6aygpPT09Y312YXIgaz1hLk5iKGZ1bmN0aW9uKCl7cmV0dXJuIGMuaGFzKFwiY2hlY2tlZFZhbHVlXCIpP2EuYS5jKGMuZ2V0KFwiY2hlY2tlZFZhbHVlXCIpKTpjLmhhcyhcInZhbHVlXCIpP2EuYS5jKGMuZ2V0KFwidmFsdWVcIikpOmIudmFsdWV9KSxoPVwiY2hlY2tib3hcIj09Yi50eXBlLGw9XCJyYWRpb1wiPT1iLnR5cGU7aWYoaHx8bCl7dmFyIGc9aCYmYS5hLmMoZCgpKWluc3RhbmNlb2YgQXJyYXksbT1nP2soKTpwLHg9bHx8ZztsJiYhYi5uYW1lJiZhLmQudW5pcXVlTmFtZS5pbml0KGIsZnVuY3Rpb24oKXtyZXR1cm4hMH0pO2EudyhlLG51bGwse3E6Yn0pO2EuYS5uKGIsXCJjbGlja1wiLGUpO2EudyhmLG51bGwse3E6Yn0pfX19O2EuaC5WLmNoZWNrZWQ9ITA7YS5kLmNoZWNrZWRWYWx1ZT1cbnt1cGRhdGU6ZnVuY3Rpb24oYixkKXtiLnZhbHVlPWEuYS5jKGQoKSl9fX0pKCk7YS5kLmNzcz17dXBkYXRlOmZ1bmN0aW9uKGIsZCl7dmFyIGM9YS5hLmMoZCgpKTtudWxsIT09YyYmXCJvYmplY3RcIj09dHlwZW9mIGM/YS5hLkEoYyxmdW5jdGlvbihjLGQpe2Q9YS5hLmMoZCk7YS5hLklhKGIsYyxkKX0pOihjPVN0cmluZyhjfHxcIlwiKSxhLmEuSWEoYixiLl9fa29fX2Nzc1ZhbHVlLCExKSxiLl9fa29fX2Nzc1ZhbHVlPWMsYS5hLklhKGIsYywhMCkpfX07YS5kLmVuYWJsZT17dXBkYXRlOmZ1bmN0aW9uKGIsZCl7dmFyIGM9YS5hLmMoZCgpKTtjJiZiLmRpc2FibGVkP2IucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik6Y3x8Yi5kaXNhYmxlZHx8KGIuZGlzYWJsZWQ9ITApfX07YS5kLmRpc2FibGU9e3VwZGF0ZTpmdW5jdGlvbihiLGQpe2EuZC5lbmFibGUudXBkYXRlKGIsZnVuY3Rpb24oKXtyZXR1cm4hYS5hLmMoZCgpKX0pfX07YS5kLmV2ZW50PXtpbml0OmZ1bmN0aW9uKGIsZCxjLFxuZSxmKXt2YXIgaz1kKCl8fHt9O2EuYS5BKGssZnVuY3Rpb24oaCl7XCJzdHJpbmdcIj09dHlwZW9mIGgmJmEuYS5uKGIsaCxmdW5jdGlvbihiKXt2YXIgZyxtPWQoKVtoXTtpZihtKXt0cnl7dmFyIGs9YS5hLk8oYXJndW1lbnRzKTtlPWYuJGRhdGE7ay51bnNoaWZ0KGUpO2c9bS5hcHBseShlLGspfWZpbmFsbHl7ITAhPT1nJiYoYi5wcmV2ZW50RGVmYXVsdD9iLnByZXZlbnREZWZhdWx0KCk6Yi5yZXR1cm5WYWx1ZT0hMSl9ITE9PT1jLmdldChoK1wiQnViYmxlXCIpJiYoYi5jYW5jZWxCdWJibGU9ITAsYi5zdG9wUHJvcGFnYXRpb24mJmIuc3RvcFByb3BhZ2F0aW9uKCkpfX0pfSl9fTthLmQuZm9yZWFjaD17SWI6ZnVuY3Rpb24oYil7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGQ9YigpLGM9YS5hLmNiKGQpO2lmKCFjfHxcIm51bWJlclwiPT10eXBlb2YgYy5sZW5ndGgpcmV0dXJue2ZvcmVhY2g6ZCx0ZW1wbGF0ZUVuZ2luZTphLlAuVmF9O2EuYS5jKGQpO3JldHVybntmb3JlYWNoOmMuZGF0YSxhczpjLmFzLFxuaW5jbHVkZURlc3Ryb3llZDpjLmluY2x1ZGVEZXN0cm95ZWQsYWZ0ZXJBZGQ6Yy5hZnRlckFkZCxiZWZvcmVSZW1vdmU6Yy5iZWZvcmVSZW1vdmUsYWZ0ZXJSZW5kZXI6Yy5hZnRlclJlbmRlcixiZWZvcmVNb3ZlOmMuYmVmb3JlTW92ZSxhZnRlck1vdmU6Yy5hZnRlck1vdmUsdGVtcGxhdGVFbmdpbmU6YS5QLlZhfX19LGluaXQ6ZnVuY3Rpb24oYixkKXtyZXR1cm4gYS5kLnRlbXBsYXRlLmluaXQoYixhLmQuZm9yZWFjaC5JYihkKSl9LHVwZGF0ZTpmdW5jdGlvbihiLGQsYyxlLGYpe3JldHVybiBhLmQudGVtcGxhdGUudXBkYXRlKGIsYS5kLmZvcmVhY2guSWIoZCksYyxlLGYpfX07YS5oLmthLmZvcmVhY2g9ITE7YS5lLlIuZm9yZWFjaD0hMDthLmQuaGFzZm9jdXM9e2luaXQ6ZnVuY3Rpb24oYixkLGMpe2Z1bmN0aW9uIGUoZSl7Yi5fX2tvX2hhc2ZvY3VzVXBkYXRpbmc9ITA7dmFyIGY9Yi5vd25lckRvY3VtZW50O2lmKFwiYWN0aXZlRWxlbWVudFwiaW4gZil7dmFyIGc7dHJ5e2c9Zi5hY3RpdmVFbGVtZW50fWNhdGNoKG0pe2c9XG5mLmJvZHl9ZT1nPT09Yn1mPWQoKTthLmgucmEoZixjLFwiaGFzZm9jdXNcIixlLCEwKTtiLl9fa29faGFzZm9jdXNMYXN0VmFsdWU9ZTtiLl9fa29faGFzZm9jdXNVcGRhdGluZz0hMX12YXIgZj1lLmJpbmQobnVsbCwhMCksaz1lLmJpbmQobnVsbCwhMSk7YS5hLm4oYixcImZvY3VzXCIsZik7YS5hLm4oYixcImZvY3VzaW5cIixmKTthLmEubihiLFwiYmx1clwiLGspO2EuYS5uKGIsXCJmb2N1c291dFwiLGspfSx1cGRhdGU6ZnVuY3Rpb24oYixkKXt2YXIgYz0hIWEuYS5jKGQoKSk7Yi5fX2tvX2hhc2ZvY3VzVXBkYXRpbmd8fGIuX19rb19oYXNmb2N1c0xhc3RWYWx1ZT09PWN8fChjP2IuZm9jdXMoKTpiLmJsdXIoKSxhLmsudShhLmEucWEsbnVsbCxbYixjP1wiZm9jdXNpblwiOlwiZm9jdXNvdXRcIl0pKX19O2EuaC5WLmhhc2ZvY3VzPSEwO2EuZC5oYXNGb2N1cz1hLmQuaGFzZm9jdXM7YS5oLlYuaGFzRm9jdXM9ITA7YS5kLmh0bWw9e2luaXQ6ZnVuY3Rpb24oKXtyZXR1cm57Y29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M6ITB9fSxcbnVwZGF0ZTpmdW5jdGlvbihiLGQpe2EuYS5nYihiLGQoKSl9fTtLKFwiaWZcIik7SyhcImlmbm90XCIsITEsITApO0soXCJ3aXRoXCIsITAsITEsZnVuY3Rpb24oYSxkKXtyZXR1cm4gYS5jcmVhdGVDaGlsZENvbnRleHQoZCl9KTt2YXIgTD17fTthLmQub3B0aW9ucz17aW5pdDpmdW5jdGlvbihiKXtpZihcInNlbGVjdFwiIT09YS5hLnYoYikpdGhyb3cgRXJyb3IoXCJvcHRpb25zIGJpbmRpbmcgYXBwbGllcyBvbmx5IHRvIFNFTEVDVCBlbGVtZW50c1wiKTtmb3IoOzA8Yi5sZW5ndGg7KWIucmVtb3ZlKDApO3JldHVybntjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczohMH19LHVwZGF0ZTpmdW5jdGlvbihiLGQsYyl7ZnVuY3Rpb24gZSgpe3JldHVybiBhLmEueGEoYi5vcHRpb25zLGZ1bmN0aW9uKGEpe3JldHVybiBhLnNlbGVjdGVkfSl9ZnVuY3Rpb24gZihhLGIsYyl7dmFyIGQ9dHlwZW9mIGI7cmV0dXJuXCJmdW5jdGlvblwiPT1kP2IoYSk6XCJzdHJpbmdcIj09ZD9hW2JdOmN9ZnVuY3Rpb24gayhkLGUpe2lmKHImJlxubSlhLmkuWShiLGEuYS5jKGMuZ2V0KFwidmFsdWVcIikpLCEwKTtlbHNlIGlmKG4ubGVuZ3RoKXt2YXIgZz0wPD1hLmEubShuLGEuaS5zKGVbMF0pKTthLmEuU2IoZVswXSxnKTtyJiYhZyYmYS5rLnUoYS5hLnFhLG51bGwsW2IsXCJjaGFuZ2VcIl0pfX12YXIgaD1iLm11bHRpcGxlLGw9MCE9Yi5sZW5ndGgmJmg/Yi5zY3JvbGxUb3A6bnVsbCxnPWEuYS5jKGQoKSksbT1jLmdldChcInZhbHVlQWxsb3dVbnNldFwiKSYmYy5oYXMoXCJ2YWx1ZVwiKSx4PWMuZ2V0KFwib3B0aW9uc0luY2x1ZGVEZXN0cm95ZWRcIik7ZD17fTt2YXIgcSxuPVtdO218fChoP249YS5hLkthKGUoKSxhLmkucyk6MDw9Yi5zZWxlY3RlZEluZGV4JiZuLnB1c2goYS5pLnMoYi5vcHRpb25zW2Iuc2VsZWN0ZWRJbmRleF0pKSk7ZyYmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBnLmxlbmd0aCYmKGc9W2ddKSxxPWEuYS54YShnLGZ1bmN0aW9uKGIpe3JldHVybiB4fHxiPT09cHx8bnVsbD09PWJ8fCFhLmEuYyhiLl9kZXN0cm95KX0pLGMuaGFzKFwib3B0aW9uc0NhcHRpb25cIikmJlxuKGc9YS5hLmMoYy5nZXQoXCJvcHRpb25zQ2FwdGlvblwiKSksbnVsbCE9PWcmJmchPT1wJiZxLnVuc2hpZnQoTCkpKTt2YXIgcj0hMTtkLmJlZm9yZVJlbW92ZT1mdW5jdGlvbihhKXtiLnJlbW92ZUNoaWxkKGEpfTtnPWs7Yy5oYXMoXCJvcHRpb25zQWZ0ZXJSZW5kZXJcIikmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGMuZ2V0KFwib3B0aW9uc0FmdGVyUmVuZGVyXCIpJiYoZz1mdW5jdGlvbihiLGQpe2soMCxkKTthLmsudShjLmdldChcIm9wdGlvbnNBZnRlclJlbmRlclwiKSxudWxsLFtkWzBdLGIhPT1MP2I6cF0pfSk7YS5hLmZiKGIscSxmdW5jdGlvbihkLGUsZyl7Zy5sZW5ndGgmJihuPSFtJiZnWzBdLnNlbGVjdGVkP1thLmkucyhnWzBdKV06W10scj0hMCk7ZT1iLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtkPT09TD8oYS5hLkhhKGUsYy5nZXQoXCJvcHRpb25zQ2FwdGlvblwiKSksYS5pLlkoZSxwKSk6KGc9ZihkLGMuZ2V0KFwib3B0aW9uc1ZhbHVlXCIpLGQpLGEuaS5ZKGUsYS5hLmMoZykpLFxuZD1mKGQsYy5nZXQoXCJvcHRpb25zVGV4dFwiKSxnKSxhLmEuSGEoZSxkKSk7cmV0dXJuW2VdfSxkLGcpO2Euay51KGZ1bmN0aW9uKCl7bT9hLmkuWShiLGEuYS5jKGMuZ2V0KFwidmFsdWVcIikpLCEwKTooaD9uLmxlbmd0aCYmZSgpLmxlbmd0aDxuLmxlbmd0aDpuLmxlbmd0aCYmMDw9Yi5zZWxlY3RlZEluZGV4P2EuaS5zKGIub3B0aW9uc1tiLnNlbGVjdGVkSW5kZXhdKSE9PW5bMF06bi5sZW5ndGh8fDA8PWIuc2VsZWN0ZWRJbmRleCkmJmEuYS5xYShiLFwiY2hhbmdlXCIpfSk7YS5hLmtjKGIpO2wmJjIwPE1hdGguYWJzKGwtYi5zY3JvbGxUb3ApJiYoYi5zY3JvbGxUb3A9bCl9fTthLmQub3B0aW9ucy5hYj1hLmEuZi5JKCk7YS5kLnNlbGVjdGVkT3B0aW9ucz17YWZ0ZXI6W1wib3B0aW9uc1wiLFwiZm9yZWFjaFwiXSxpbml0OmZ1bmN0aW9uKGIsZCxjKXthLmEubihiLFwiY2hhbmdlXCIsZnVuY3Rpb24oKXt2YXIgZT1kKCksZj1bXTthLmEubyhiLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwib3B0aW9uXCIpLFxuZnVuY3Rpb24oYil7Yi5zZWxlY3RlZCYmZi5wdXNoKGEuaS5zKGIpKX0pO2EuaC5yYShlLGMsXCJzZWxlY3RlZE9wdGlvbnNcIixmKX0pfSx1cGRhdGU6ZnVuY3Rpb24oYixkKXtpZihcInNlbGVjdFwiIT1hLmEudihiKSl0aHJvdyBFcnJvcihcInZhbHVlcyBiaW5kaW5nIGFwcGxpZXMgb25seSB0byBTRUxFQ1QgZWxlbWVudHNcIik7dmFyIGM9YS5hLmMoZCgpKTtjJiZcIm51bWJlclwiPT10eXBlb2YgYy5sZW5ndGgmJmEuYS5vKGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJvcHRpb25cIiksZnVuY3Rpb24oYil7dmFyIGQ9MDw9YS5hLm0oYyxhLmkucyhiKSk7YS5hLlNiKGIsZCl9KX19O2EuaC5WLnNlbGVjdGVkT3B0aW9ucz0hMDthLmQuc3R5bGU9e3VwZGF0ZTpmdW5jdGlvbihiLGQpe3ZhciBjPWEuYS5jKGQoKXx8e30pO2EuYS5BKGMsZnVuY3Rpb24oYyxkKXtkPWEuYS5jKGQpO2lmKG51bGw9PT1kfHxkPT09cHx8ITE9PT1kKWQ9XCJcIjtiLnN0eWxlW2NdPWR9KX19O2EuZC5zdWJtaXQ9e2luaXQ6ZnVuY3Rpb24oYixcbmQsYyxlLGYpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGQoKSl0aHJvdyBFcnJvcihcIlRoZSB2YWx1ZSBmb3IgYSBzdWJtaXQgYmluZGluZyBtdXN0IGJlIGEgZnVuY3Rpb25cIik7YS5hLm4oYixcInN1Ym1pdFwiLGZ1bmN0aW9uKGEpe3ZhciBjLGU9ZCgpO3RyeXtjPWUuY2FsbChmLiRkYXRhLGIpfWZpbmFsbHl7ITAhPT1jJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6YS5yZXR1cm5WYWx1ZT0hMSl9fSl9fTthLmQudGV4dD17aW5pdDpmdW5jdGlvbigpe3JldHVybntjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczohMH19LHVwZGF0ZTpmdW5jdGlvbihiLGQpe2EuYS5IYShiLGQoKSl9fTthLmUuUi50ZXh0PSEwOyhmdW5jdGlvbigpe2lmKHkmJnkubmF2aWdhdG9yKXZhciBiPWZ1bmN0aW9uKGEpe2lmKGEpcmV0dXJuIHBhcnNlRmxvYXQoYVsxXSl9LGQ9eS5vcGVyYSYmeS5vcGVyYS52ZXJzaW9uJiZwYXJzZUludCh5Lm9wZXJhLnZlcnNpb24oKSksYz15Lm5hdmlnYXRvci51c2VyQWdlbnQsXG5lPWIoYy5tYXRjaCgvXig/Oig/IWNocm9tZSkuKSp2ZXJzaW9uXFwvKFteIF0qKSBzYWZhcmkvaSkpLGY9YihjLm1hdGNoKC9GaXJlZm94XFwvKFteIF0qKS8pKTtpZigxMD5hLmEuTSl2YXIgaz1hLmEuZi5JKCksaD1hLmEuZi5JKCksbD1mdW5jdGlvbihiKXt2YXIgYz10aGlzLmFjdGl2ZUVsZW1lbnQ7KGM9YyYmYS5hLmYuZ2V0KGMsaCkpJiZjKGIpfSxnPWZ1bmN0aW9uKGIsYyl7dmFyIGQ9Yi5vd25lckRvY3VtZW50O2EuYS5mLmdldChkLGspfHwoYS5hLmYuc2V0KGQsaywhMCksYS5hLm4oZCxcInNlbGVjdGlvbmNoYW5nZVwiLGwpKTthLmEuZi5zZXQoYixoLGMpfTthLmQudGV4dElucHV0PXtpbml0OmZ1bmN0aW9uKGIsYyxsKXtmdW5jdGlvbiBoKGMsZCl7YS5hLm4oYixjLGQpfWZ1bmN0aW9uIGsoKXt2YXIgZD1hLmEuYyhjKCkpO2lmKG51bGw9PT1kfHxkPT09cClkPVwiXCI7dyE9PXAmJmQ9PT13P3NldFRpbWVvdXQoayw0KTpiLnZhbHVlIT09ZCYmKHU9ZCxiLnZhbHVlPWQpfWZ1bmN0aW9uIHYoKXtBfHxcbih3PWIudmFsdWUsQT1zZXRUaW1lb3V0KHQsNCkpfWZ1bmN0aW9uIHQoKXtjbGVhclRpbWVvdXQoQSk7dz1BPXA7dmFyIGQ9Yi52YWx1ZTt1IT09ZCYmKHU9ZCxhLmgucmEoYygpLGwsXCJ0ZXh0SW5wdXRcIixkKSl9dmFyIHU9Yi52YWx1ZSxBLHc7MTA+YS5hLk0/KGgoXCJwcm9wZXJ0eWNoYW5nZVwiLGZ1bmN0aW9uKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0KCl9KSw4PT1hLmEuTSYmKGgoXCJrZXl1cFwiLHQpLGgoXCJrZXlkb3duXCIsdCkpLDg8PWEuYS5NJiYoZyhiLHQpLGgoXCJkcmFnZW5kXCIsdikpKTooaChcImlucHV0XCIsdCksNT5lJiZcInRleHRhcmVhXCI9PT1hLmEudihiKT8oaChcImtleWRvd25cIix2KSxoKFwicGFzdGVcIix2KSxoKFwiY3V0XCIsdikpOjExPmQ/aChcImtleWRvd25cIix2KTo0PmYmJihoKFwiRE9NQXV0b0NvbXBsZXRlXCIsdCksaChcImRyYWdkcm9wXCIsdCksaChcImRyb3BcIix0KSkpO2goXCJjaGFuZ2VcIix0KTthLncoayxudWxsLHtxOmJ9KX19O2EuaC5WLnRleHRJbnB1dD0hMDthLmQudGV4dGlucHV0PVxue3ByZXByb2Nlc3M6ZnVuY3Rpb24oYSxiLGMpe2MoXCJ0ZXh0SW5wdXRcIixhKX19fSkoKTthLmQudW5pcXVlTmFtZT17aW5pdDpmdW5jdGlvbihiLGQpe2lmKGQoKSl7dmFyIGM9XCJrb191bmlxdWVfXCIrICsrYS5kLnVuaXF1ZU5hbWUuZmM7YS5hLlJiKGIsYyl9fX07YS5kLnVuaXF1ZU5hbWUuZmM9MDthLmQudmFsdWU9e2FmdGVyOltcIm9wdGlvbnNcIixcImZvcmVhY2hcIl0saW5pdDpmdW5jdGlvbihiLGQsYyl7aWYoXCJpbnB1dFwiIT1iLnRhZ05hbWUudG9Mb3dlckNhc2UoKXx8XCJjaGVja2JveFwiIT1iLnR5cGUmJlwicmFkaW9cIiE9Yi50eXBlKXt2YXIgZT1bXCJjaGFuZ2VcIl0sZj1jLmdldChcInZhbHVlVXBkYXRlXCIpLGs9ITEsaD1udWxsO2YmJihcInN0cmluZ1wiPT10eXBlb2YgZiYmKGY9W2ZdKSxhLmEuaWEoZSxmKSxlPWEuYS53YihlKSk7dmFyIGw9ZnVuY3Rpb24oKXtoPW51bGw7az0hMTt2YXIgZT1kKCksZz1hLmkucyhiKTthLmgucmEoZSxjLFwidmFsdWVcIixnKX07IWEuYS5NfHxcImlucHV0XCIhPVxuYi50YWdOYW1lLnRvTG93ZXJDYXNlKCl8fFwidGV4dFwiIT1iLnR5cGV8fFwib2ZmXCI9PWIuYXV0b2NvbXBsZXRlfHxiLmZvcm0mJlwib2ZmXCI9PWIuZm9ybS5hdXRvY29tcGxldGV8fC0xIT1hLmEubShlLFwicHJvcGVydHljaGFuZ2VcIil8fChhLmEubihiLFwicHJvcGVydHljaGFuZ2VcIixmdW5jdGlvbigpe2s9ITB9KSxhLmEubihiLFwiZm9jdXNcIixmdW5jdGlvbigpe2s9ITF9KSxhLmEubihiLFwiYmx1clwiLGZ1bmN0aW9uKCl7ayYmbCgpfSkpO2EuYS5vKGUsZnVuY3Rpb24oYyl7dmFyIGQ9bDthLmEuRGMoYyxcImFmdGVyXCIpJiYoZD1mdW5jdGlvbigpe2g9YS5pLnMoYik7c2V0VGltZW91dChsLDApfSxjPWMuc3Vic3RyaW5nKDUpKTthLmEubihiLGMsZCl9KTt2YXIgZz1mdW5jdGlvbigpe3ZhciBlPWEuYS5jKGQoKSksZj1hLmkucyhiKTtpZihudWxsIT09aCYmZT09PWgpc2V0VGltZW91dChnLDApO2Vsc2UgaWYoZSE9PWYpaWYoXCJzZWxlY3RcIj09PWEuYS52KGIpKXt2YXIgbD1jLmdldChcInZhbHVlQWxsb3dVbnNldFwiKSxcbmY9ZnVuY3Rpb24oKXthLmkuWShiLGUsbCl9O2YoKTtsfHxlPT09YS5pLnMoYik/c2V0VGltZW91dChmLDApOmEuay51KGEuYS5xYSxudWxsLFtiLFwiY2hhbmdlXCJdKX1lbHNlIGEuaS5ZKGIsZSl9O2EudyhnLG51bGwse3E6Yn0pfWVsc2UgYS52YShiLHtjaGVja2VkVmFsdWU6ZH0pfSx1cGRhdGU6ZnVuY3Rpb24oKXt9fTthLmguVi52YWx1ZT0hMDthLmQudmlzaWJsZT17dXBkYXRlOmZ1bmN0aW9uKGIsZCl7dmFyIGM9YS5hLmMoZCgpKSxlPVwibm9uZVwiIT1iLnN0eWxlLmRpc3BsYXk7YyYmIWU/Yi5zdHlsZS5kaXNwbGF5PVwiXCI6IWMmJmUmJihiLnN0eWxlLmRpc3BsYXk9XCJub25lXCIpfX07KGZ1bmN0aW9uKGIpe2EuZFtiXT17aW5pdDpmdW5jdGlvbihkLGMsZSxmLGspe3JldHVybiBhLmQuZXZlbnQuaW5pdC5jYWxsKHRoaXMsZCxmdW5jdGlvbigpe3ZhciBhPXt9O2FbYl09YygpO3JldHVybiBhfSxlLGYsayl9fX0pKFwiY2xpY2tcIik7YS5KPWZ1bmN0aW9uKCl7fTthLkoucHJvdG90eXBlLnJlbmRlclRlbXBsYXRlU291cmNlPVxuZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcIk92ZXJyaWRlIHJlbmRlclRlbXBsYXRlU291cmNlXCIpO307YS5KLnByb3RvdHlwZS5jcmVhdGVKYXZhU2NyaXB0RXZhbHVhdG9yQmxvY2s9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcIk92ZXJyaWRlIGNyZWF0ZUphdmFTY3JpcHRFdmFsdWF0b3JCbG9ja1wiKTt9O2EuSi5wcm90b3R5cGUubWFrZVRlbXBsYXRlU291cmNlPWZ1bmN0aW9uKGIsZCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGIpe2Q9ZHx8dzt2YXIgYz1kLmdldEVsZW1lbnRCeUlkKGIpO2lmKCFjKXRocm93IEVycm9yKFwiQ2Fubm90IGZpbmQgdGVtcGxhdGUgd2l0aCBJRCBcIitiKTtyZXR1cm4gbmV3IGEudC5sKGMpfWlmKDE9PWIubm9kZVR5cGV8fDg9PWIubm9kZVR5cGUpcmV0dXJuIG5ldyBhLnQuaGEoYik7dGhyb3cgRXJyb3IoXCJVbmtub3duIHRlbXBsYXRlIHR5cGU6IFwiK2IpO307YS5KLnByb3RvdHlwZS5yZW5kZXJUZW1wbGF0ZT1mdW5jdGlvbihhLGQsYyxlKXthPXRoaXMubWFrZVRlbXBsYXRlU291cmNlKGEsXG5lKTtyZXR1cm4gdGhpcy5yZW5kZXJUZW1wbGF0ZVNvdXJjZShhLGQsYyxlKX07YS5KLnByb3RvdHlwZS5pc1RlbXBsYXRlUmV3cml0dGVuPWZ1bmN0aW9uKGEsZCl7cmV0dXJuITE9PT10aGlzLmFsbG93VGVtcGxhdGVSZXdyaXRpbmc/ITA6dGhpcy5tYWtlVGVtcGxhdGVTb3VyY2UoYSxkKS5kYXRhKFwiaXNSZXdyaXR0ZW5cIil9O2EuSi5wcm90b3R5cGUucmV3cml0ZVRlbXBsYXRlPWZ1bmN0aW9uKGEsZCxjKXthPXRoaXMubWFrZVRlbXBsYXRlU291cmNlKGEsYyk7ZD1kKGEudGV4dCgpKTthLnRleHQoZCk7YS5kYXRhKFwiaXNSZXdyaXR0ZW5cIiwhMCl9O2EuYihcInRlbXBsYXRlRW5naW5lXCIsYS5KKTthLmtiPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYihiLGMsZCxoKXtiPWEuaC5iYihiKTtmb3IodmFyIGw9YS5oLmthLGc9MDtnPGIubGVuZ3RoO2crKyl7dmFyIG09YltnXS5rZXk7aWYobC5oYXNPd25Qcm9wZXJ0eShtKSl7dmFyIHg9bFttXTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgeCl7aWYobT1cbngoYltnXS52YWx1ZSkpdGhyb3cgRXJyb3IobSk7fWVsc2UgaWYoIXgpdGhyb3cgRXJyb3IoXCJUaGlzIHRlbXBsYXRlIGVuZ2luZSBkb2VzIG5vdCBzdXBwb3J0IHRoZSAnXCIrbStcIicgYmluZGluZyB3aXRoaW4gaXRzIHRlbXBsYXRlc1wiKTt9fWQ9XCJrby5fX3RyX2FtYnRucyhmdW5jdGlvbigkY29udGV4dCwkZWxlbWVudCl7cmV0dXJuKGZ1bmN0aW9uKCl7cmV0dXJueyBcIithLmguRWEoYix7dmFsdWVBY2Nlc3NvcnM6ITB9KStcIiB9IH0pKCl9LCdcIitkLnRvTG93ZXJDYXNlKCkrXCInKVwiO3JldHVybiBoLmNyZWF0ZUphdmFTY3JpcHRFdmFsdWF0b3JCbG9jayhkKStjfXZhciBkPS8oPChbYS16XStcXGQqKSg/OlxccysoPyFkYXRhLWJpbmRcXHMqPVxccyopW2EtejAtOVxcLV0rKD86PSg/OlxcXCJbXlxcXCJdKlxcXCJ8XFwnW15cXCddKlxcJ3xbXj5dKikpPykqXFxzKylkYXRhLWJpbmRcXHMqPVxccyooW1wiJ10pKFtcXHNcXFNdKj8pXFwzL2dpLGM9L1xceDNjIS0tXFxzKmtvXFxiXFxzKihbXFxzXFxTXSo/KVxccyotLVxceDNlL2c7cmV0dXJue2xjOmZ1bmN0aW9uKGIsXG5jLGQpe2MuaXNUZW1wbGF0ZVJld3JpdHRlbihiLGQpfHxjLnJld3JpdGVUZW1wbGF0ZShiLGZ1bmN0aW9uKGIpe3JldHVybiBhLmtiLnhjKGIsYyl9LGQpfSx4YzpmdW5jdGlvbihhLGYpe3JldHVybiBhLnJlcGxhY2UoZCxmdW5jdGlvbihhLGMsZCxlLG0pe3JldHVybiBiKG0sYyxkLGYpfSkucmVwbGFjZShjLGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGIoYyxcIlxceDNjIS0tIGtvIC0tXFx4M2VcIixcIiNjb21tZW50XCIsZil9KX0sZGM6ZnVuY3Rpb24oYixjKXtyZXR1cm4gYS5ILiRhKGZ1bmN0aW9uKGQsaCl7dmFyIGw9ZC5uZXh0U2libGluZztsJiZsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1jJiZhLnZhKGwsYixoKX0pfX19KCk7YS5iKFwiX190cl9hbWJ0bnNcIixhLmtiLmRjKTsoZnVuY3Rpb24oKXthLnQ9e307YS50Lmw9ZnVuY3Rpb24oYSl7dGhpcy5sPWF9O2EudC5sLnByb3RvdHlwZS50ZXh0PWZ1bmN0aW9uKCl7dmFyIGI9YS5hLnYodGhpcy5sKSxiPVwic2NyaXB0XCI9PT1iP1widGV4dFwiOlxuXCJ0ZXh0YXJlYVwiPT09Yj9cInZhbHVlXCI6XCJpbm5lckhUTUxcIjtpZigwPT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLmxbYl07dmFyIGQ9YXJndW1lbnRzWzBdO1wiaW5uZXJIVE1MXCI9PT1iP2EuYS5nYih0aGlzLmwsZCk6dGhpcy5sW2JdPWR9O3ZhciBiPWEuYS5mLkkoKStcIl9cIjthLnQubC5wcm90b3R5cGUuZGF0YT1mdW5jdGlvbihjKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gYS5hLmYuZ2V0KHRoaXMubCxiK2MpO2EuYS5mLnNldCh0aGlzLmwsYitjLGFyZ3VtZW50c1sxXSl9O3ZhciBkPWEuYS5mLkkoKTthLnQuaGE9ZnVuY3Rpb24oYSl7dGhpcy5sPWF9O2EudC5oYS5wcm90b3R5cGU9bmV3IGEudC5sO2EudC5oYS5wcm90b3R5cGUudGV4dD1mdW5jdGlvbigpe2lmKDA9PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBiPWEuYS5mLmdldCh0aGlzLmwsZCl8fHt9O2IubGI9PT1wJiZiLk5hJiYoYi5sYj1iLk5hLmlubmVySFRNTCk7cmV0dXJuIGIubGJ9YS5hLmYuc2V0KHRoaXMubCxcbmQse2xiOmFyZ3VtZW50c1swXX0pfTthLnQubC5wcm90b3R5cGUubm9kZXM9ZnVuY3Rpb24oKXtpZigwPT1hcmd1bWVudHMubGVuZ3RoKXJldHVybihhLmEuZi5nZXQodGhpcy5sLGQpfHx7fSkuTmE7YS5hLmYuc2V0KHRoaXMubCxkLHtOYTphcmd1bWVudHNbMF19KX07YS5iKFwidGVtcGxhdGVTb3VyY2VzXCIsYS50KTthLmIoXCJ0ZW1wbGF0ZVNvdXJjZXMuZG9tRWxlbWVudFwiLGEudC5sKTthLmIoXCJ0ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGVcIixhLnQuaGEpfSkoKTsoZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGIsYyxkKXt2YXIgZTtmb3IoYz1hLmUubmV4dFNpYmxpbmcoYyk7YiYmKGU9YikhPT1jOyliPWEuZS5uZXh0U2libGluZyhlKSxkKGUsYil9ZnVuY3Rpb24gZChjLGQpe2lmKGMubGVuZ3RoKXt2YXIgZT1jWzBdLGY9Y1tjLmxlbmd0aC0xXSxoPWUucGFyZW50Tm9kZSxrPWEuTC5pbnN0YW5jZSxyPWsucHJlcHJvY2Vzc05vZGU7aWYocil7YihlLGYsZnVuY3Rpb24oYSxcbmIpe3ZhciBjPWEucHJldmlvdXNTaWJsaW5nLGQ9ci5jYWxsKGssYSk7ZCYmKGE9PT1lJiYoZT1kWzBdfHxiKSxhPT09ZiYmKGY9ZFtkLmxlbmd0aC0xXXx8YykpfSk7Yy5sZW5ndGg9MDtpZighZSlyZXR1cm47ZT09PWY/Yy5wdXNoKGUpOihjLnB1c2goZSxmKSxhLmEubmEoYyxoKSl9YihlLGYsZnVuY3Rpb24oYil7MSE9PWIubm9kZVR5cGUmJjghPT1iLm5vZGVUeXBlfHxhLnViKGQsYil9KTtiKGUsZixmdW5jdGlvbihiKXsxIT09Yi5ub2RlVHlwZSYmOCE9PWIubm9kZVR5cGV8fGEuSC5YYihiLFtkXSl9KTthLmEubmEoYyxoKX19ZnVuY3Rpb24gYyhhKXtyZXR1cm4gYS5ub2RlVHlwZT9hOjA8YS5sZW5ndGg/YVswXTpudWxsfWZ1bmN0aW9uIGUoYixlLGYsaCxxKXtxPXF8fHt9O3ZhciBuPShiJiZjKGIpfHxmfHx7fSkub3duZXJEb2N1bWVudCxyPXEudGVtcGxhdGVFbmdpbmV8fGs7YS5rYi5sYyhmLHIsbik7Zj1yLnJlbmRlclRlbXBsYXRlKGYsaCxxLG4pO2lmKFwibnVtYmVyXCIhPVxudHlwZW9mIGYubGVuZ3RofHwwPGYubGVuZ3RoJiZcIm51bWJlclwiIT10eXBlb2YgZlswXS5ub2RlVHlwZSl0aHJvdyBFcnJvcihcIlRlbXBsYXRlIGVuZ2luZSBtdXN0IHJldHVybiBhbiBhcnJheSBvZiBET00gbm9kZXNcIik7bj0hMTtzd2l0Y2goZSl7Y2FzZSBcInJlcGxhY2VDaGlsZHJlblwiOmEuZS5UKGIsZik7bj0hMDticmVhaztjYXNlIFwicmVwbGFjZU5vZGVcIjphLmEuUWIoYixmKTtuPSEwO2JyZWFrO2Nhc2UgXCJpZ25vcmVUYXJnZXROb2RlXCI6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcIlVua25vd24gcmVuZGVyTW9kZTogXCIrZSk7fW4mJihkKGYsaCkscS5hZnRlclJlbmRlciYmYS5rLnUocS5hZnRlclJlbmRlcixudWxsLFtmLGguJGRhdGFdKSk7cmV0dXJuIGZ9ZnVuY3Rpb24gZihiLGMsZCl7cmV0dXJuIGEuRihiKT9iKCk6XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihjLGQpOmJ9dmFyIGs7YS5oYj1mdW5jdGlvbihiKXtpZihiIT1wJiYhKGIgaW5zdGFuY2VvZiBhLkopKXRocm93IEVycm9yKFwidGVtcGxhdGVFbmdpbmUgbXVzdCBpbmhlcml0IGZyb20ga28udGVtcGxhdGVFbmdpbmVcIik7XG5rPWJ9O2EuZWI9ZnVuY3Rpb24oYixkLGgseCxxKXtoPWh8fHt9O2lmKChoLnRlbXBsYXRlRW5naW5lfHxrKT09cCl0aHJvdyBFcnJvcihcIlNldCBhIHRlbXBsYXRlIGVuZ2luZSBiZWZvcmUgY2FsbGluZyByZW5kZXJUZW1wbGF0ZVwiKTtxPXF8fFwicmVwbGFjZUNoaWxkcmVuXCI7aWYoeCl7dmFyIG49Yyh4KTtyZXR1cm4gYS5qKGZ1bmN0aW9uKCl7dmFyIGs9ZCYmZCBpbnN0YW5jZW9mIGEuTj9kOm5ldyBhLk4oYS5hLmMoZCkpLHA9ZihiLGsuJGRhdGEsayksaz1lKHgscSxwLGssaCk7XCJyZXBsYWNlTm9kZVwiPT1xJiYoeD1rLG49Yyh4KSl9LG51bGwse1BhOmZ1bmN0aW9uKCl7cmV0dXJuIW58fCFhLmEuUWEobil9LHE6biYmXCJyZXBsYWNlTm9kZVwiPT1xP24ucGFyZW50Tm9kZTpufSl9cmV0dXJuIGEuSC4kYShmdW5jdGlvbihjKXthLmViKGIsZCxoLGMsXCJyZXBsYWNlTm9kZVwiKX0pfTthLkNjPWZ1bmN0aW9uKGIsYyxoLGsscSl7ZnVuY3Rpb24gbihhLGIpe2QoYix2KTtoLmFmdGVyUmVuZGVyJiZcbmguYWZ0ZXJSZW5kZXIoYixhKTt2PW51bGx9ZnVuY3Rpb24gcihhLGMpe3Y9cS5jcmVhdGVDaGlsZENvbnRleHQoYSxoLmFzLGZ1bmN0aW9uKGEpe2EuJGluZGV4PWN9KTt2YXIgZD1mKGIsYSx2KTtyZXR1cm4gZShudWxsLFwiaWdub3JlVGFyZ2V0Tm9kZVwiLGQsdixoKX12YXIgdjtyZXR1cm4gYS5qKGZ1bmN0aW9uKCl7dmFyIGI9YS5hLmMoYyl8fFtdO1widW5kZWZpbmVkXCI9PXR5cGVvZiBiLmxlbmd0aCYmKGI9W2JdKTtiPWEuYS54YShiLGZ1bmN0aW9uKGIpe3JldHVybiBoLmluY2x1ZGVEZXN0cm95ZWR8fGI9PT1wfHxudWxsPT09Ynx8IWEuYS5jKGIuX2Rlc3Ryb3kpfSk7YS5rLnUoYS5hLmZiLG51bGwsW2ssYixyLGgsbl0pfSxudWxsLHtxOmt9KX07dmFyIGg9YS5hLmYuSSgpO2EuZC50ZW1wbGF0ZT17aW5pdDpmdW5jdGlvbihiLGMpe3ZhciBkPWEuYS5jKGMoKSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGR8fGQubmFtZSlhLmUubWEoYik7ZWxzZXtpZihcIm5vZGVzXCJpbiBkKXtpZihkPVxuZC5ub2Rlc3x8W10sYS5GKGQpKXRocm93IEVycm9yKCdUaGUgXCJub2Rlc1wiIG9wdGlvbiBtdXN0IGJlIGEgcGxhaW4sIG5vbi1vYnNlcnZhYmxlIGFycmF5LicpO31lbHNlIGQ9YS5lLmNoaWxkTm9kZXMoYik7ZD1hLmEuSmIoZCk7KG5ldyBhLnQuaGEoYikpLm5vZGVzKGQpfXJldHVybntjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczohMH19LHVwZGF0ZTpmdW5jdGlvbihiLGMsZCxlLGYpe3ZhciBrPWMoKSxyO2M9YS5hLmMoayk7ZD0hMDtlPW51bGw7XCJzdHJpbmdcIj09dHlwZW9mIGM/Yz17fTooaz1jLm5hbWUsXCJpZlwiaW4gYyYmKGQ9YS5hLmMoY1tcImlmXCJdKSksZCYmXCJpZm5vdFwiaW4gYyYmKGQ9IWEuYS5jKGMuaWZub3QpKSxyPWEuYS5jKGMuZGF0YSkpO1wiZm9yZWFjaFwiaW4gYz9lPWEuQ2Moa3x8YixkJiZjLmZvcmVhY2h8fFtdLGMsYixmKTpkPyhmPVwiZGF0YVwiaW4gYz9mLmNyZWF0ZUNoaWxkQ29udGV4dChyLGMuYXMpOmYsZT1hLmViKGt8fGIsZixjLGIpKTphLmUubWEoYik7Zj1cbmU7KHI9YS5hLmYuZ2V0KGIsaCkpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByLnAmJnIucCgpO2EuYS5mLnNldChiLGgsZiYmZi4kKCk/ZjpwKX19O2EuaC5rYS50ZW1wbGF0ZT1mdW5jdGlvbihiKXtiPWEuaC5iYihiKTtyZXR1cm4gMT09Yi5sZW5ndGgmJmJbMF0udW5rbm93bnx8YS5oLnZjKGIsXCJuYW1lXCIpP251bGw6XCJUaGlzIHRlbXBsYXRlIGVuZ2luZSBkb2VzIG5vdCBzdXBwb3J0IGFub255bW91cyB0ZW1wbGF0ZXMgbmVzdGVkIHdpdGhpbiBpdHMgdGVtcGxhdGVzXCJ9O2EuZS5SLnRlbXBsYXRlPSEwfSkoKTthLmIoXCJzZXRUZW1wbGF0ZUVuZ2luZVwiLGEuaGIpO2EuYihcInJlbmRlclRlbXBsYXRlXCIsYS5lYik7YS5hLkNiPWZ1bmN0aW9uKGEsZCxjKXtpZihhLmxlbmd0aCYmZC5sZW5ndGgpe3ZhciBlLGYsayxoLGw7Zm9yKGU9Zj0wOyghY3x8ZTxjKSYmKGg9YVtmXSk7KytmKXtmb3Ioaz0wO2w9ZFtrXTsrK2spaWYoaC52YWx1ZT09PWwudmFsdWUpe2gubW92ZWQ9bC5pbmRleDtsLm1vdmVkPVxuaC5pbmRleDtkLnNwbGljZShrLDEpO2U9az0wO2JyZWFrfWUrPWt9fX07YS5hLk1hPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYihiLGMsZSxmLGspe3ZhciBoPU1hdGgubWluLGw9TWF0aC5tYXgsZz1bXSxtLHA9Yi5sZW5ndGgscSxuPWMubGVuZ3RoLHI9bi1wfHwxLHY9cCtuKzEsdCx1LHc7Zm9yKG09MDttPD1wO20rKylmb3IodT10LGcucHVzaCh0PVtdKSx3PWgobixtK3IpLHE9bCgwLG0tMSk7cTw9dztxKyspdFtxXT1xP20/YlttLTFdPT09Y1txLTFdP3VbcS0xXTpoKHVbcV18fHYsdFtxLTFdfHx2KSsxOnErMTptKzE7aD1bXTtsPVtdO3I9W107bT1wO2ZvcihxPW47bXx8cTspbj1nW21dW3FdLTEscSYmbj09PWdbbV1bcS0xXT9sLnB1c2goaFtoLmxlbmd0aF09e3N0YXR1czplLHZhbHVlOmNbLS1xXSxpbmRleDpxfSk6bSYmbj09PWdbbS0xXVtxXT9yLnB1c2goaFtoLmxlbmd0aF09e3N0YXR1czpmLHZhbHVlOmJbLS1tXSxpbmRleDptfSk6KC0tcSwtLW0say5zcGFyc2V8fGgucHVzaCh7c3RhdHVzOlwicmV0YWluZWRcIixcbnZhbHVlOmNbcV19KSk7YS5hLkNiKGwsciwxMCpwKTtyZXR1cm4gaC5yZXZlcnNlKCl9cmV0dXJuIGZ1bmN0aW9uKGEsYyxlKXtlPVwiYm9vbGVhblwiPT09dHlwZW9mIGU/e2RvbnRMaW1pdE1vdmVzOmV9OmV8fHt9O2E9YXx8W107Yz1jfHxbXTtyZXR1cm4gYS5sZW5ndGg8PWMubGVuZ3RoP2IoYSxjLFwiYWRkZWRcIixcImRlbGV0ZWRcIixlKTpiKGMsYSxcImRlbGV0ZWRcIixcImFkZGVkXCIsZSl9fSgpO2EuYihcInV0aWxzLmNvbXBhcmVBcnJheXNcIixhLmEuTWEpOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGIoYixkLGYsayxoKXt2YXIgbD1bXSxnPWEuaihmdW5jdGlvbigpe3ZhciBnPWQoZixoLGEuYS5uYShsLGIpKXx8W107MDxsLmxlbmd0aCYmKGEuYS5RYihsLGcpLGsmJmEuay51KGssbnVsbCxbZixnLGhdKSk7bC5sZW5ndGg9MDthLmEuaWEobCxnKX0sbnVsbCx7cTpiLFBhOmZ1bmN0aW9uKCl7cmV0dXJuIWEuYS50YihsKX19KTtyZXR1cm57YWE6bCxqOmcuJCgpP2c6cH19dmFyIGQ9YS5hLmYuSSgpO1xuYS5hLmZiPWZ1bmN0aW9uKGMsZSxmLGssaCl7ZnVuY3Rpb24gbChiLGQpe3M9dVtkXTt0IT09ZCYmKHpbYl09cyk7cy5VYSh0KyspO2EuYS5uYShzLmFhLGMpO3IucHVzaChzKTt5LnB1c2gocyl9ZnVuY3Rpb24gZyhiLGMpe2lmKGIpZm9yKHZhciBkPTAsZT1jLmxlbmd0aDtkPGU7ZCsrKWNbZF0mJmEuYS5vKGNbZF0uYWEsZnVuY3Rpb24oYSl7YihhLGQsY1tkXS53YSl9KX1lPWV8fFtdO2s9a3x8e307dmFyIG09YS5hLmYuZ2V0KGMsZCk9PT1wLHU9YS5hLmYuZ2V0KGMsZCl8fFtdLHE9YS5hLkthKHUsZnVuY3Rpb24oYSl7cmV0dXJuIGEud2F9KSxuPWEuYS5NYShxLGUsay5kb250TGltaXRNb3Zlcykscj1bXSx2PTAsdD0wLHc9W10seT1bXTtlPVtdO2Zvcih2YXIgej1bXSxxPVtdLHMsQz0wLEQsRTtEPW5bQ107QysrKXN3aXRjaChFPUQubW92ZWQsRC5zdGF0dXMpe2Nhc2UgXCJkZWxldGVkXCI6RT09PXAmJihzPXVbdl0scy5qJiZzLmoucCgpLHcucHVzaC5hcHBseSh3LGEuYS5uYShzLmFhLFxuYykpLGsuYmVmb3JlUmVtb3ZlJiYoZVtDXT1zLHkucHVzaChzKSkpO3YrKzticmVhaztjYXNlIFwicmV0YWluZWRcIjpsKEMsdisrKTticmVhaztjYXNlIFwiYWRkZWRcIjpFIT09cD9sKEMsRSk6KHM9e3dhOkQudmFsdWUsVWE6YS5yKHQrKyl9LHIucHVzaChzKSx5LnB1c2gocyksbXx8KHFbQ109cykpfWcoay5iZWZvcmVNb3ZlLHopO2EuYS5vKHcsay5iZWZvcmVSZW1vdmU/YS5TOmEucmVtb3ZlTm9kZSk7Zm9yKHZhciBDPTAsbT1hLmUuZmlyc3RDaGlsZChjKSxIO3M9eVtDXTtDKyspe3MuYWF8fGEuYS5leHRlbmQocyxiKGMsZixzLndhLGgscy5VYSkpO2Zvcih2PTA7bj1zLmFhW3ZdO209bi5uZXh0U2libGluZyxIPW4sdisrKW4hPT1tJiZhLmUuRmIoYyxuLEgpOyFzLnJjJiZoJiYoaChzLndhLHMuYWEscy5VYSkscy5yYz0hMCl9ZyhrLmJlZm9yZVJlbW92ZSxlKTtnKGsuYWZ0ZXJNb3ZlLHopO2coay5hZnRlckFkZCxxKTthLmEuZi5zZXQoYyxkLHIpfX0pKCk7YS5iKFwidXRpbHMuc2V0RG9tTm9kZUNoaWxkcmVuRnJvbUFycmF5TWFwcGluZ1wiLFxuYS5hLmZiKTthLlA9ZnVuY3Rpb24oKXt0aGlzLmFsbG93VGVtcGxhdGVSZXdyaXRpbmc9ITF9O2EuUC5wcm90b3R5cGU9bmV3IGEuSjthLlAucHJvdG90eXBlLnJlbmRlclRlbXBsYXRlU291cmNlPWZ1bmN0aW9uKGIsZCxjLGUpe2lmKGQ9KDk+YS5hLk0/MDpiLm5vZGVzKT9iLm5vZGVzKCk6bnVsbClyZXR1cm4gYS5hLk8oZC5jbG9uZU5vZGUoITApLmNoaWxkTm9kZXMpO2I9Yi50ZXh0KCk7cmV0dXJuIGEuYS5jYShiLGUpfTthLlAuVmE9bmV3IGEuUDthLmhiKGEuUC5WYSk7YS5iKFwibmF0aXZlVGVtcGxhdGVFbmdpbmVcIixhLlApOyhmdW5jdGlvbigpe2EuWWE9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnVjPWZ1bmN0aW9uKCl7aWYoIXV8fCF1LnRtcGwpcmV0dXJuIDA7dHJ5e2lmKDA8PXUudG1wbC50YWcudG1wbC5vcGVuLnRvU3RyaW5nKCkuaW5kZXhPZihcIl9fXCIpKXJldHVybiAyfWNhdGNoKGEpe31yZXR1cm4gMX0oKTt0aGlzLnJlbmRlclRlbXBsYXRlU291cmNlPWZ1bmN0aW9uKGIsXG5lLGYsayl7az1rfHx3O2Y9Znx8e307aWYoMj5hKXRocm93IEVycm9yKFwiWW91ciB2ZXJzaW9uIG9mIGpRdWVyeS50bXBsIGlzIHRvbyBvbGQuIFBsZWFzZSB1cGdyYWRlIHRvIGpRdWVyeS50bXBsIDEuMC4wcHJlIG9yIGxhdGVyLlwiKTt2YXIgaD1iLmRhdGEoXCJwcmVjb21waWxlZFwiKTtofHwoaD1iLnRleHQoKXx8XCJcIixoPXUudGVtcGxhdGUobnVsbCxcInt7a29fd2l0aCAkaXRlbS5rb0JpbmRpbmdDb250ZXh0fX1cIitoK1wie3sva29fd2l0aH19XCIpLGIuZGF0YShcInByZWNvbXBpbGVkXCIsaCkpO2I9W2UuJGRhdGFdO2U9dS5leHRlbmQoe2tvQmluZGluZ0NvbnRleHQ6ZX0sZi50ZW1wbGF0ZU9wdGlvbnMpO2U9dS50bXBsKGgsYixlKTtlLmFwcGVuZFRvKGsuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7dS5mcmFnbWVudHM9e307cmV0dXJuIGV9O3RoaXMuY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrPWZ1bmN0aW9uKGEpe3JldHVyblwie3trb19jb2RlICgoZnVuY3Rpb24oKSB7IHJldHVybiBcIitcbmErXCIgfSkoKSkgfX1cIn07dGhpcy5hZGRUZW1wbGF0ZT1mdW5jdGlvbihhLGIpe3cud3JpdGUoXCI8c2NyaXB0IHR5cGU9J3RleHQvaHRtbCcgaWQ9J1wiK2ErXCInPlwiK2IrXCJcXHgzYy9zY3JpcHQ+XCIpfTswPGEmJih1LnRtcGwudGFnLmtvX2NvZGU9e29wZW46XCJfXy5wdXNoKCQxIHx8ICcnKTtcIn0sdS50bXBsLnRhZy5rb193aXRoPXtvcGVuOlwid2l0aCgkMSkge1wiLGNsb3NlOlwifSBcIn0pfTthLllhLnByb3RvdHlwZT1uZXcgYS5KO3ZhciBiPW5ldyBhLllhOzA8Yi51YyYmYS5oYihiKTthLmIoXCJqcXVlcnlUbXBsVGVtcGxhdGVFbmdpbmVcIixhLllhKX0pKCl9KX0pKCk7fSkoKTtcbiIsIi8vJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gVE9ETzpcclxuLy8gMS4gTWVudSBidXR0b24gaW4gcmlnaHQgbWVudSBzaG91bGQgYmUgZml4ZWQgZHVyaW5nIHNjcm9sbGluZ1xyXG4vLyAyLiBDcmVhdGUgZmVhdHVyZSB0byBhZGQgbmV3IGxvY2F0aW9ucyB2aWEgVUlcclxuLy8gMy4gQ3JlYXRlIGZlYXR1cmUgdG8gY2hvb3NlIG9uIHdoaWNoIGZpZWxkIHdlIHdhbnQgdG8gc2VhcmNoLlxyXG4vLyA0LiBDb252ZXJ0IGFsbCBjc3MgdG8gQkVNXHJcbi8vIDUuIE1ha2UgZ3JheSBiYWNrZ3JvdW5kIGR1cmluZyBiaWcgcGhvdG8gZGlzcGxheWluZ1xyXG4vLyA2LiBVc2UgbG9jYWxTdG9yYWdlIGFuZCBGaXJlYmFzZSB0byBjb25maWd1cmUgbG9jYXRpb25zIGFuZCByZXN0b3JlIHByZXZpb3VzIHN0YXRlIG9mIGFwcGxpY2F0aW9uXHJcblxyXG52YXIgaW5pdEFsbCA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBtb2RlbCA9IHtcclxuXHQgICAgLy8gYXJyYXkgd2l0aCBhbGwgdmlzaXRlZCBsb2NhdGlvbnNcclxuXHQgICAgbG9jYXRpb25zOiBbXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb250aW5lbnQ6ICdFdXJvcGUnLFxyXG5cdFx0XHRcdGNvdW50cnk6ICdGcmFuY2UnLFxyXG5cdFx0XHRcdGNvdW50cnlfY29kZTogJ2ZyJyxcclxuXHRcdFx0XHRjaXR5OiAnUGFyaXMnLFxyXG5cdFx0XHRcdHR5cGU6ICdleGFjdCcsXHJcblx0XHRcdFx0bW9udGg6ICdBcHJpbCcsXHJcblx0XHRcdFx0eWVhcjogJzIwMTEnLFxyXG5cdFx0XHRcdGxhdDogNDguODU0NzU5LFxyXG5cdFx0XHRcdGxuZzogMi4zMDUwODAsXHJcblx0XHRcdFx0aG90ZWw6ICdIw7R0ZWwgUHJpbmNlJyxcclxuXHRcdFx0XHRhZGRyZXNzOiAnNjYgQXZlbnVlIEJvc3F1ZXQsIDA3LiBUb3VyIEVpZmZlbCAtIEludmFsaWRlcywgUGFyaXMsIDc1MDA3LCBGcmFuY2UnLFxyXG5cdFx0XHRcdG1hcmtlcjogbnVsbCxcclxuXHRcdFx0XHRjb21wYW55OiAyLFxyXG5cdFx0XHRcdHBob3RvczogW11cclxuXHRcdFx0fSxcclxuXHQgICAgICAgIFx0XHQvKntcclxuXHQgICAgICAgIFx0XHRcdGNvbnRpbmVudDogJ0FzaWEnLFxyXG5cdCAgICAgICAgXHRcdFx0Y291bnRyeTogJ0lzcmFlbCcsXHJcblx0ICAgICAgICBcdFx0XHRjb3VudHJ5X2NvZGU6ICdpbCcsXHJcblx0ICAgICAgICBcdFx0XHRjaXR5OiAnQmhldGhsZWhlbScsXHJcblx0ICAgICAgICBcdFx0XHR0eXBlOiAnc28tc28nLFxyXG5cdCAgICAgICAgXHRcdFx0bW9udGg6ICdBcHJpbCcsXHJcblx0ICAgICAgICBcdFx0XHR5ZWFyOiAnMjAxNScsXHJcblx0ICAgICAgICBcdFx0XHRsYXQ6IDMxLjcwOTY2MSxcclxuXHQgICAgICAgIFx0XHRcdGxuZzogMzUuMjAyMTQxLFxyXG5cdCAgICAgICAgXHRcdFx0aG90ZWw6ICdEb25cXCd0IHJlbWVtYmVyLFxyXG5cdCAgICAgICAgXHRcdFx0YWRkcmVzczogJ0RvblxcJ3QgcmVtZW1iZXInLFxyXG5cdCAgICAgICAgXHRcdFx0bWFya2VyOiBudWxsLFxyXG5cdCAgICAgICAgXHRcdFx0Y29tcGFueTogMixcclxuXHQgICAgICAgIFx0XHRcdHBob3RvczogW11cclxuXHQgICAgICAgIFx0XHR9LCovXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb250aW5lbnQ6ICdBc2lhJyxcclxuXHRcdFx0XHRjb3VudHJ5OiAnSXNyYWVsJyxcclxuXHRcdFx0XHRjb3VudHJ5X2NvZGU6ICdpbCcsXHJcblx0XHRcdFx0Y2l0eTogJ0plcnVzYWxlbScsXHJcblx0XHRcdFx0dHlwZTogJ3NvLXNvJyxcclxuXHRcdFx0XHRtb250aDogJ0FwcmlsJyxcclxuXHRcdFx0XHR5ZWFyOiAnMjAxNScsXHJcblx0XHRcdFx0bGF0OiAzMS43NzgyNDUsXHJcblx0XHRcdFx0bG5nOiAzNS4yMjkzOTcsXHJcblx0XHRcdFx0aG90ZWw6ICdOb3QgYXBwbGljYWJsZScsXHJcblx0XHRcdFx0YWRkcmVzczogJ05vdCBhcHBsaWNhYmxlJyxcclxuXHRcdFx0XHRtYXJrZXI6IG51bGwsXHJcblx0XHRcdFx0Y29tcGFueTogMixcclxuXHRcdFx0XHRwaG90b3M6IFtdXHJcblx0XHRcdH0sXHJcblx0ICAgICAgICBcdFx0Lyp7XHJcblx0ICAgICAgICBcdFx0XHRjb250aW5lbnQ6ICdBc2lhJyxcclxuXHQgICAgICAgIFx0XHRcdGNvdW50cnk6ICdJc3JhZWwnLFxyXG5cdCAgICAgICAgXHRcdFx0Y291bnRyeV9jb2RlOiAnaWwnLFxyXG5cdCAgICAgICAgXHRcdFx0Y2l0eTogJ0plcmljaG8nLFxyXG5cdCAgICAgICAgXHRcdFx0dHlwZTogJ3NvLXNvJyxcclxuXHQgICAgICAgIFx0XHRcdG1vbnRoOiAnQXByaWwnLFxyXG5cdCAgICAgICAgXHRcdFx0eWVhcjogJzIwMTUnLFxyXG5cdCAgICAgICAgXHRcdFx0bGF0OiAzMS44NTUxMzIsXHJcblx0ICAgICAgICBcdFx0XHRsbmc6IDM1LjQ1ODI3NixcclxuXHQgICAgICAgIFx0XHRcdGhvdGVsOiAnTm90IGFwcGxpY2FibGUnLFxyXG5cdCAgICAgICAgXHRcdFx0YWRkcmVzczogJ05vdCBhcHBsaWNhYmxlJyxcclxuXHQgICAgICAgIFx0XHRcdG1hcmtlcjogbnVsbCxcclxuXHQgICAgICAgIFx0XHRcdGNvbXBhbnk6IDIsXHJcblx0ICAgICAgICBcdFx0XHRwaG90b3M6IFtdXHJcblx0ICAgICAgICBcdFx0fSwqL1xyXG5cdCAgICAgICAge1xyXG5cdCAgICAgICAgICAgIGNvbnRpbmVudDogJ0FmcmljYScsXHJcblx0ICAgICAgICAgICAgY291bnRyeTogJ0VneXB0JyxcclxuXHQgICAgICAgICAgICBjb3VudHJ5X2NvZGU6ICdlZycsXHJcblx0ICAgICAgICAgICAgY2l0eTogJ0x1eG9yJyxcclxuXHQgICAgICAgICAgICB0eXBlOiAnc28tc28nLFxyXG5cdCAgICAgICAgICAgIG1vbnRoOiAnU2VwdGVtYmVyJyxcclxuXHQgICAgICAgICAgICB5ZWFyOiAnMjAxMCcsXHJcblx0ICAgICAgICAgICAgbGF0OiAyNS43MTQxMjQsXHJcblx0ICAgICAgICAgICAgbG5nOiAzMi42NDk3NjYsXHJcblx0ICAgICAgICAgICAgaG90ZWw6ICdOb3QgYXBwbGljYWJsZScsXHJcblx0ICAgICAgICAgICAgYWRkcmVzczogJ05vdCBhcHBsaWNhYmxlJyxcclxuXHQgICAgICAgICAgICBtYXJrZXI6IG51bGwsXHJcblx0ICAgICAgICAgICAgY29tcGFueTogMTAsXHJcblx0ICAgICAgICBcdHBob3RvczogW11cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICB7XHJcblx0ICAgICAgICAgICAgY29udGluZW50OiAnQWZyaWNhJyxcclxuXHQgICAgICAgICAgICBjb3VudHJ5OiAnRWd5cHQnLFxyXG5cdCAgICAgICAgICAgIGNvdW50cnlfY29kZTogJ2VnJyxcclxuXHQgICAgICAgICAgICBjaXR5OiAnSHVyZ2hhZGEnLFxyXG5cdCAgICAgICAgICAgIHR5cGU6ICdzby1zbycsXHJcblx0ICAgICAgICAgICAgbW9udGg6ICdTZXB0ZW1iZXInLFxyXG5cdCAgICAgICAgICAgIHllYXI6ICcyMDEwJyxcclxuXHQgICAgICAgICAgICBsYXQ6IDI3LjA4MjA4NixcclxuXHQgICAgICAgICAgICBsbmc6IDMzLjg2MDY3OCxcclxuXHQgICAgICAgICAgICBob3RlbDogJ0RvblxcJ3QgcmVtZW1iZXInLFxyXG5cdCAgICAgICAgICAgIGFkZHJlc3M6ICdEb25cXCd0IHJlbWVtYmVyJyxcclxuXHQgICAgICAgICAgICBtYXJrZXI6IG51bGwsXHJcblx0ICAgICAgICAgICAgY29tcGFueTogMTAsXHJcblx0ICAgICAgICBcdHBob3RvczogW11cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKlx0XHR7XHJcblx0ICAgICAgICBcdFx0XHRjb250aW5lbnQ6ICdBZnJpY2EnLFxyXG5cdCAgICAgICAgXHRcdFx0Y291bnRyeTogJ0VneXB0JyxcclxuXHQgICAgICAgIFx0XHRcdGNvdW50cnlfY29kZTogJ2VnJyxcclxuXHQgICAgICAgIFx0XHRcdGNpdHk6ICdTaGFybS1lbC1TaGVpa2gnLFxyXG5cdCAgICAgICAgXHRcdFx0dHlwZTogJ2V4YWN0JyxcclxuXHQgICAgICAgIFx0XHRcdG1vbnRoOiAnQXByaWwnLFxyXG5cdCAgICAgICAgXHRcdFx0eWVhcjogJzIwMTUnLFxyXG5cdCAgICAgICAgXHRcdFx0bGF0OiAyNy44NjE3MzcsXHJcblx0ICAgICAgICBcdFx0XHRsbmc6IDM0LjMxNzUyNSxcclxuXHQgICAgICAgIFx0XHRcdGhvdGVsOiAnUm95YWwgR3JhbmQgU2hhcm0nLFxyXG5cdCAgICAgICAgXHRcdFx0YWRkcmVzczogJ09tIEVsLVNlaWQgSGlsbCBTaGFybSBFbC1TaGVpa2gsIFFlc20gU2hhcm0gQXNoIFNoZWlraCwgU291dGggU2luYWkgR292ZXJub3JhdGUsIEVneXB0JyxcclxuXHQgICAgICAgIFx0XHRcdG1hcmtlcjogbnVsbCxcclxuXHQgICAgICAgIFx0XHRcdHBob3RvczogW11cclxuXHQgICAgICAgIFx0XHR9LCovXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb250aW5lbnQ6ICdBc2lhJyxcclxuXHRcdFx0XHRjb3VudHJ5OiAnVGhhaWxhbmQnLFxyXG5cdFx0XHRcdGNvdW50cnlfY29kZTogJ3RoJyxcclxuXHRcdFx0XHRjaXR5OiAnQmFuZ2tvaycsXHJcblx0XHRcdFx0dHlwZTogJ2V4YWN0JyxcclxuXHRcdFx0XHRtb250aDogJ1NlcHRlbWJlcicsXHJcblx0XHRcdFx0eWVhcjogJzIwMTEnLFxyXG5cdFx0XHRcdGxhdDogMTMuNzU3MTM3LFxyXG5cdFx0XHRcdGxuZzogMTAwLjUwMjc4OSxcclxuXHRcdFx0XHRob3RlbDogJ1NpYW1lc2UgVmlld3MgTG9kZ2UnLFxyXG5cdFx0XHRcdGFkZHJlc3M6ICcyMTEvMjEtMjMgU29pIERhbW5lb24gS2xhbmcgTnVlYSwgUmF0Y2hhZGFtbmVvbiBLbGFuZyBSb2FkLCBCd29ubml3ZXQsIFByYW5ha29ybiwgS2hhb3NhbiwgQmFuZ2tvaywgMTAyMDAsIFRoYWlsYW5kJyxcclxuXHRcdFx0XHRtYXJrZXI6IG51bGwsXHJcblx0XHRcdFx0Y29tcGFueTogMixcclxuXHRcdFx0XHRwaG90b3M6IFtdXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb250aW5lbnQ6ICdBc2lhJyxcclxuXHRcdFx0XHRjb3VudHJ5OiAnVGhhaWxhbmQnLFxyXG5cdFx0XHRcdGNvdW50cnlfY29kZTogJ3RoJyxcclxuXHRcdFx0XHRjaXR5OiAnUGF0dGF5YScsXHJcblx0XHRcdFx0dHlwZTogJ2V4YWN0JyxcclxuXHRcdFx0XHRtb250aDogJ1NlcHRlbWJlcicsXHJcblx0XHRcdFx0eWVhcjogJzIwMTEnLFxyXG5cdFx0XHRcdGxhdDogMTIuOTMwODEzLFxyXG5cdFx0XHRcdGxuZzogMTAwLjg4MDExOSxcclxuXHRcdFx0XHRob3RlbDogJ0lubiBIb3VzZScsXHJcblx0XHRcdFx0YWRkcmVzczogJzMyMi8xIFBhdHRheWEgQmVhY2ggUm9hZCBTb2kgMTMsIFBhdHRheWEgQ2l0eSwgQmFuZ2xhbXVuZywgUGF0dGF5YSwgMjAyNjAsIFRoYWlsYW5kJyxcclxuXHRcdFx0XHRtYXJrZXI6IG51bGwsXHJcblx0XHRcdFx0Y29tcGFueTogMixcclxuXHRcdFx0XHRwaG90b3M6IFtdXHJcblx0XHRcdH0sXHJcblx0ICAgICAgICB7XHJcblx0ICAgICAgICAgICAgY29udGluZW50OiAnTm9ydGggQW1lcmljYScsXHJcblx0ICAgICAgICAgICAgY291bnRyeTogJ1VuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYScsXHJcblx0ICAgICAgICAgICAgY291bnRyeV9jb2RlOiAndXMnLFxyXG5cdCAgICAgICAgICAgIGNpdHk6ICdOZXcgWW9yaycsXHJcblx0ICAgICAgICAgICAgdHlwZTogJ3NvLXNvJyxcclxuXHQgICAgICAgICAgICBtb250aDogJ1NlcHRlbWJlcicsXHJcblx0ICAgICAgICAgICAgeWVhcjogJzIwMDknLFxyXG5cdCAgICAgICAgICAgIGxhdDogNDAuNjIxMTUzLFxyXG5cdCAgICAgICAgICAgIGxuZzogLTczLjk5ODExNCxcclxuXHQgICAgICAgICAgICBob3RlbDogJ0RvblxcJ3QgcmVtZW1iZXInLFxyXG5cdCAgICAgICAgICAgIGFkZHJlc3M6ICdEb25cXCd0IHJlbWVtYmVyJyxcclxuXHQgICAgICAgICAgICBtYXJrZXI6IG51bGwsXHJcblx0ICAgICAgICAgICAgY29tcGFueTogMixcclxuXHQgICAgICAgIFx0cGhvdG9zOiBbXVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHtcclxuXHQgICAgICAgICAgICBjb250aW5lbnQ6ICdOb3J0aCBBbWVyaWNhJyxcclxuXHQgICAgICAgICAgICBjb3VudHJ5OiAnVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhJyxcclxuXHQgICAgICAgICAgICBjb3VudHJ5X2NvZGU6ICd1cycsXHJcblx0ICAgICAgICAgICAgY2l0eTogJ0NoaWNhZ28nLFxyXG5cdCAgICAgICAgICAgIHR5cGU6ICdzby1zbycsXHJcblx0ICAgICAgICAgICAgbW9udGg6ICdTZXB0ZW1iZXInLFxyXG5cdCAgICAgICAgICAgIHllYXI6ICcyMDA5JyxcclxuXHQgICAgICAgICAgICBsYXQ6IDQxLjg4MzU0MyxcclxuXHQgICAgICAgICAgICBsbmc6IC04Ny43OTU5NTMsXHJcblx0ICAgICAgICAgICAgaG90ZWw6ICdEb25cXCd0IHJlbWVtYmVyJyxcclxuXHQgICAgICAgICAgICBhZGRyZXNzOiAnRG9uXFwndCByZW1lbWJlcicsXHJcblx0ICAgICAgICAgICAgbWFya2VyOiBudWxsLFxyXG5cdCAgICAgICAgICAgIGNvbXBhbnk6IDIsXHJcblx0ICAgICAgICBcdHBob3RvczogW11cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKlx0XHR7XHJcblx0ICAgICAgICBcdFx0XHRjb250aW5lbnQ6ICdOb3J0aCBBbWVyaWNhJyxcclxuXHQgICAgICAgIFx0XHRcdGNvdW50cnk6ICdVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2EnLFxyXG5cdCAgICAgICAgXHRcdFx0Y291bnRyeV9jb2RlOiAndXMnLFxyXG5cdCAgICAgICAgXHRcdFx0Y2l0eTogJ0Jvc3RvbicsXHJcblx0ICAgICAgICBcdFx0XHR0eXBlOiAnc28tc28nLFxyXG5cdCAgICAgICAgXHRcdFx0bW9udGg6ICdTZXB0ZW1iZXInLFxyXG5cdCAgICAgICAgXHRcdFx0eWVhcjogJzIwMDknLFxyXG5cdCAgICAgICAgXHRcdFx0bGF0OiA0Mi4zNjI4NjAsXHJcblx0ICAgICAgICBcdFx0XHRsbmc6IC03MS4xMTg2MTIsXHJcblx0ICAgICAgICBcdFx0XHRob3RlbDogJ0RvblxcJ3QgcmVtZW1iZXInLFxyXG5cdCAgICAgICAgXHRcdFx0YWRkcmVzczogJ0RvblxcJ3QgcmVtZW1iZXInLFxyXG5cdCAgICAgICAgXHRcdFx0bWFya2VyOiBudWxsLFxyXG5cdCAgICAgICAgXHRcdFx0Y29tcGFueTogMixcclxuXHQgICAgICAgIFx0XHRcdHBob3RvczogW11cclxuXHQgICAgICAgIFx0XHR9LCovXHJcblx0ICAgICAgICB7XHJcblx0ICAgICAgICAgICAgY29udGluZW50OiAnTm9ydGggQW1lcmljYScsXHJcblx0ICAgICAgICAgICAgY291bnRyeTogJ1VuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYScsXHJcblx0ICAgICAgICAgICAgY291bnRyeV9jb2RlOiAndXMnLFxyXG5cdCAgICAgICAgICAgIGNpdHk6ICdOaWFnYXJhIEZhbGxzJyxcclxuXHQgICAgICAgICAgICB0eXBlOiAnc28tc28nLFxyXG5cdCAgICAgICAgICAgIG1vbnRoOiAnU2VwdGVtYmVyJyxcclxuXHQgICAgICAgICAgICB5ZWFyOiAnMjAwOScsXHJcblx0ICAgICAgICAgICAgbGF0OiA0My4wOTA2MjgsXHJcblx0ICAgICAgICAgICAgbG5nOiAtNzkuMDU4OTI3LFxyXG5cdCAgICAgICAgICAgIGhvdGVsOiAnRG9uXFwndCByZW1lbWJlcicsXHJcblx0ICAgICAgICAgICAgYWRkcmVzczogJ0RvblxcJ3QgcmVtZW1iZXInLFxyXG5cdCAgICAgICAgICAgIG1hcmtlcjogbnVsbCxcclxuXHQgICAgICAgICAgICBjb21wYW55OiAyLFxyXG5cdCAgICAgICAgXHRwaG90b3M6IFtdXHJcblx0ICAgICAgICB9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29udGluZW50OiAnRXVyb3BlJyxcclxuXHRcdFx0XHRjb3VudHJ5OiAnR2VybWFueScsXHJcblx0XHRcdFx0Y291bnRyeV9jb2RlOiAnZGUnLFxyXG5cdFx0XHRcdGNpdHk6ICdCZXJsaW4nLFxyXG5cdFx0XHRcdHR5cGU6ICdleGFjdCcsXHJcblx0XHRcdFx0bW9udGg6ICdOb3ZlbWJlcicsXHJcblx0XHRcdFx0eWVhcjogJzIwMTEnLFxyXG5cdFx0XHRcdGxhdDogNTIuNTAxOTM5LFxyXG5cdFx0XHRcdGxuZzogMTMuMzg0OTgxLFxyXG5cdFx0XHRcdGhvdGVsOiAnSG9saWRheSBJbm4gRXhwcmVzcyBCZXJsaW4gQ2l0eSBDZW50cmUgV2VzdCcsXHJcblx0XHRcdFx0YWRkcmVzczogJ0t1cmbDvHJzdGVuc3RyYcOfZSA3OCwgVGllcmdhcnRlbiwgQmVybGluLCAxMDc4NywgR2VybWFueScsXHJcblx0XHRcdFx0bWFya2VyOiBudWxsLFxyXG5cdFx0XHRcdGNvbXBhbnk6IDYsXHJcblx0XHRcdFx0cGhvdG9zOiBbXVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29udGluZW50OiAnRXVyb3BlJyxcclxuXHRcdFx0XHRjb3VudHJ5OiAnRmlubGFuZCcsXHJcblx0XHRcdFx0Y291bnRyeV9jb2RlOiAnZmknLFxyXG5cdFx0XHRcdGNpdHk6ICdIZWxzaW5raScsXHJcblx0XHRcdFx0dHlwZTogJ3NvLXNvJyxcclxuXHRcdFx0XHRtb250aDogJ0p1bmUnLFxyXG5cdFx0XHRcdHllYXI6ICcyMDEyJyxcclxuXHRcdFx0XHRsYXQ6IDYwLjE3MTA0MCxcclxuXHRcdFx0XHRsbmc6IDI0LjkzOTczNyxcclxuXHRcdFx0XHRob3RlbDogJ0RvblxcJ3QgcmVtZW1iZXInLFxyXG5cdFx0XHRcdGFkZHJlc3M6ICdEb25cXCd0IHJlbWVtYmVyJyxcclxuXHRcdFx0XHRtYXJrZXI6IG51bGwsXHJcblx0XHRcdFx0Y29tcGFueTogMixcclxuXHRcdFx0XHRwaG90b3M6IFtdXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb250aW5lbnQ6ICdFdXJvcGUnLFxyXG5cdFx0XHRcdGNvdW50cnk6ICdOb3J3YXknLFxyXG5cdFx0XHRcdGNvdW50cnlfY29kZTogJ25vJyxcclxuXHRcdFx0XHRjaXR5OiAnT3NsbycsXHJcblx0XHRcdFx0dHlwZTogJ3NvLXNvJyxcclxuXHRcdFx0XHRtb250aDogJ0p1bmUnLFxyXG5cdFx0XHRcdHllYXI6ICcyMDEyJyxcclxuXHRcdFx0XHRsYXQ6IDU5LjkxMzMzMSxcclxuXHRcdFx0XHRsbmc6IDEwLjc0OTQxMSxcclxuXHRcdFx0XHRob3RlbDogJ0RvblxcJ3QgcmVtZW1iZXInLFxyXG5cdFx0XHRcdGFkZHJlc3M6ICdEb25cXCd0IHJlbWVtYmVyJyxcclxuXHRcdFx0XHRtYXJrZXI6IG51bGwsXHJcblx0XHRcdFx0Y29tcGFueTogMixcclxuXHRcdFx0XHRwaG90b3M6IFtdXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb250aW5lbnQ6ICdFdXJvcGUnLFxyXG5cdFx0XHRcdGNvdW50cnk6ICdTd2VkZW4nLFxyXG5cdFx0XHRcdGNvdW50cnlfY29kZTogJ3NlJyxcclxuXHRcdFx0XHRjaXR5OiAnU3RvY2tob2xtJyxcclxuXHRcdFx0XHR0eXBlOiAnc28tc28nLFxyXG5cdFx0XHRcdG1vbnRoOiAnSnVuZScsXHJcblx0XHRcdFx0eWVhcjogJzIwMTInLFxyXG5cdFx0XHRcdGxhdDogNTkuMzI3NTEwLFxyXG5cdFx0XHRcdGxuZzogMTguMDcwODQ0LFxyXG5cdFx0XHRcdGhvdGVsOiAnTm90IGFwcGxpY2FibGUnLFxyXG5cdFx0XHRcdGFkZHJlc3M6ICdOb3QgYXBwbGljYWJsZScsXHJcblx0XHRcdFx0bWFya2VyOiBudWxsLFxyXG5cdFx0XHRcdGNvbXBhbnk6IDIsXHJcblx0XHRcdFx0cGhvdG9zOiBbXVxyXG5cdFx0XHR9LFxyXG5cdCAgICAgICAgXHRcdC8qe1xyXG5cdCAgICAgICAgXHRcdFx0Y29udGluZW50OiAnRXVyb3BlJyxcclxuXHQgICAgICAgIFx0XHRcdGNvdW50cnk6ICdMaXRodWFuaWEnLFxyXG5cdCAgICAgICAgXHRcdFx0Y291bnRyeV9jb2RlOiAnbHQnLFxyXG5cdCAgICAgICAgXHRcdFx0Y2l0eTogJ0thdW5hcycsXHJcblx0ICAgICAgICBcdFx0XHR0eXBlOiAnc28tc28nLFxyXG5cdCAgICAgICAgXHRcdFx0bW9udGg6ICdKYW51YXJ5JyxcclxuXHQgICAgICAgIFx0XHRcdHllYXI6ICcyMDEwJyxcclxuXHQgICAgICAgIFx0XHRcdGxhdDogNTQuODk4MTYzLFxyXG5cdCAgICAgICAgXHRcdFx0bG5nOiAyMy44OTcyNDcsXHJcblx0ICAgICAgICBcdFx0XHRob3RlbDogJ05vdCBhcHBsaWNhYmxlJyxcclxuXHQgICAgICAgIFx0XHRcdGFkZHJlc3M6ICdOb3QgYXBwbGljYWJsZScsXHJcblx0ICAgICAgICBcdFx0XHRtYXJrZXI6IG51bGwsXHJcblx0ICAgICAgICBcdFx0XHRjb21wYW55OiA0LFxyXG5cdCAgICAgICAgXHRcdFx0cGhvdG9zOiBbXVxyXG5cdCAgICAgICAgXHRcdH0sKi9cclxuXHQgICAgICAgIHtcclxuXHQgICAgICAgICAgICBjb250aW5lbnQ6ICdFdXJvcGUnLFxyXG5cdCAgICAgICAgICAgIGNvdW50cnk6ICdMaXRodWFuaWEnLFxyXG5cdCAgICAgICAgICAgIGNvdW50cnlfY29kZTogJ2x0JyxcclxuXHQgICAgICAgICAgICBjaXR5OiAnVmlsbml1cycsXHJcblx0ICAgICAgICAgICAgdHlwZTogJ2V4YWN0JyxcclxuXHQgICAgICAgICAgICBtb250aDogJ0phbnVhcnknLFxyXG5cdCAgICAgICAgICAgIHllYXI6ICcyMDEwJyxcclxuXHQgICAgICAgICAgICBsYXQ6IDU0LjY3NDA3MixcclxuXHQgICAgICAgICAgICBsbmc6IDI1LjI4NTAzNixcclxuXHQgICAgICAgICAgICBob3RlbDogJ0FsZXhhJyxcclxuXHQgICAgICAgICAgICBhZGRyZXNzOiAnUHlsaW1vIHN0ci4gNTMgLyBTb2R1IHN0ci4gMiwgVmlsbml1cyAsIDAxMTM2LCBMaXRodWFuaWEnLFxyXG5cdCAgICAgICAgICAgIG1hcmtlcjogbnVsbCxcclxuXHQgICAgICAgICAgICBjb21wYW55OiA0LFxyXG5cdCAgICAgICAgXHRwaG90b3M6IFtdXHJcblx0ICAgICAgICB9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29udGluZW50OiAnRXVyb3BlJyxcclxuXHRcdFx0XHRjb3VudHJ5OiAnQmVsYXJ1cycsXHJcblx0XHRcdFx0Y291bnRyeV9jb2RlOiAnYnknLFxyXG5cdFx0XHRcdGNpdHk6ICdNaW5zaycsXHJcblx0XHRcdFx0dHlwZTogJ2V4YWN0JyxcclxuXHRcdFx0XHRtb250aDogJ0phbnVhcnknLFxyXG5cdFx0XHRcdHllYXI6ICcyMDE1JyxcclxuXHRcdFx0XHRsYXQ6IDUzLjYyNzMxOCxcclxuXHRcdFx0XHRsbmc6IDI3Ljk3Nzg1OCxcclxuXHRcdFx0XHRob3RlbDogJ0R1YnJhdnVzaGthJyxcclxuXHRcdFx0XHRhZGRyZXNzOiAnU3RhbmtpLCAxNiwgUHVob3ZpY2hza2l5IGRpc3RyaWN0LCBNaW5zayByZWdpb24sIEJlbGFydXMnLFxyXG5cdFx0XHRcdG1hcmtlcjogbnVsbCxcclxuXHRcdFx0XHRjb21wYW55OiAxMixcclxuXHRcdFx0XHRwaG90b3M6IFtdXHJcblx0XHRcdH0sXHJcblx0ICAgICAgICBcdFx0Lyp7XHJcblx0ICAgICAgICBcdFx0XHRjb250aW5lbnQ6ICdFdXJvcGUnLFxyXG5cdCAgICAgICAgXHRcdFx0Y291bnRyeTogJ1J1c3NpYScsXHJcblx0ICAgICAgICBcdFx0XHRjb3VudHJ5X2NvZGU6ICdydScsXHJcblx0ICAgICAgICBcdFx0XHRjaXR5OiAnTW9zY293JyxcclxuXHQgICAgICAgIFx0XHRcdHR5cGU6ICdzby1zbycsXHJcblx0ICAgICAgICBcdFx0XHRtb250aDogJ1NlcHRlbWJlcicsXHJcblx0ICAgICAgICBcdFx0XHR5ZWFyOiAnVEJEJyxcclxuXHQgICAgICAgIFx0XHRcdGxhdDogNTUuNzc1NjkxLFxyXG5cdCAgICAgICAgXHRcdFx0bG5nOiAzNy41ODY5NzIsXHJcblx0ICAgICAgICBcdFx0XHRob3RlbDogJ0RvblxcJ3QgcmVtZW1iZXInLFxyXG5cdCAgICAgICAgXHRcdFx0YWRkcmVzczogJ0RvblxcJ3QgcmVtZW1iZXInLFxyXG5cdCAgICAgICAgXHRcdFx0bWFya2VyOiBudWxsLFxyXG5cdCAgICAgICAgXHRcdFx0Y29tcGFueTogMixcclxuXHQgICAgICAgIFx0XHRcdHBob3RvczogW11cclxuXHQgICAgICAgIFx0XHR9LCovXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb250aW5lbnQ6ICdFdXJvcGUnLFxyXG5cdFx0XHRcdGNvdW50cnk6ICdSdXNzaWEnLFxyXG5cdFx0XHRcdGNvdW50cnlfY29kZTogJ3J1JyxcclxuXHRcdFx0XHRjaXR5OiAnVmxhZGltaXInLFxyXG5cdFx0XHRcdHR5cGU6ICdzby1zbycsXHJcblx0XHRcdFx0bW9udGg6ICdOb3ZlbWJlcicsXHJcblx0XHRcdFx0eWVhcjogJzIwMTEnLFxyXG5cdFx0XHRcdGxhdDogNTYuMTI4MjAxLFxyXG5cdFx0XHRcdGxuZzogNDAuNDAzMTkzLFxyXG5cdFx0XHRcdGhvdGVsOiAnTm90IGFwcGxpY2FibGUnLFxyXG5cdFx0XHRcdGFkZHJlc3M6ICdOb3QgYXBwbGljYWJsZScsXHJcblx0XHRcdFx0bWFya2VyOiBudWxsLFxyXG5cdFx0XHRcdGNvbXBhbnk6IDIsXHJcblx0XHRcdFx0cGhvdG9zOiBbXVxyXG5cdFx0XHR9LFxyXG5cdCAgICAgICAge1xyXG5cdCAgICAgICAgICAgIGNvbnRpbmVudDogJ0V1cm9wZScsXHJcblx0ICAgICAgICAgICAgY291bnRyeTogJ1J1c3NpYScsXHJcblx0ICAgICAgICAgICAgY291bnRyeV9jb2RlOiAncnUnLFxyXG5cdCAgICAgICAgICAgIGNpdHk6ICdTYWludC1QZXRlcnNidXJnJyxcclxuXHQgICAgICAgICAgICB0eXBlOiAnZXhhY3QnLFxyXG5cdCAgICAgICAgICAgIG1vbnRoOiAnTm92ZW1iZXInLFxyXG5cdCAgICAgICAgICAgIHllYXI6ICcyMDEwJyxcclxuXHQgICAgICAgICAgICBsYXQ6IDU5LjkzMjIzNixcclxuXHQgICAgICAgICAgICBsbmc6IDMwLjM1MzQ5NixcclxuXHQgICAgICAgICAgICBob3RlbDogJ05ldnNreSBNYXlhayBIb3RlbCcsXHJcblx0ICAgICAgICAgICAgYWRkcmVzczogJ05ldnNreSBQcm9zcGVrdCA5NCwgU3QgUGV0ZXJzYnVyZywgMTkxMDI1LCBSdXNzaWEnLFxyXG5cdCAgICAgICAgICAgIG1hcmtlcjogbnVsbCxcclxuXHQgICAgICAgICAgICBjb21wYW55OiAyLFxyXG5cdCAgICAgICAgXHRwaG90b3M6IFtdXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAge1xyXG5cdCAgICAgICAgICAgIGNvbnRpbmVudDogJ0V1cm9wZScsXHJcblx0ICAgICAgICAgICAgY291bnRyeTogJ1J1c3NpYScsXHJcblx0ICAgICAgICAgICAgY291bnRyeV9jb2RlOiAncnUnLFxyXG5cdCAgICAgICAgICAgIGNpdHk6ICdLdXJzaycsXHJcblx0ICAgICAgICAgICAgdHlwZTogJ2V4YWN0JyxcclxuXHQgICAgICAgICAgICBtb250aDogJ01heScsXHJcblx0ICAgICAgICAgICAgeWVhcjogJzIwMDknLFxyXG5cdCAgICAgICAgICAgIGxhdDogNTEuNzQ4NTQ3LFxyXG5cdCAgICAgICAgICAgIGxuZzogMzYuMTg5NjU5LFxyXG5cdCAgICAgICAgICAgIGhvdGVsOiAnSG9tZSwgc3dlZXQgaG9tZSA6KScsXHJcblx0ICAgICAgICAgICAgYWRkcmVzczogJ0hvbWUsIHN3ZWV0IGhvbWUhJyxcclxuXHQgICAgICAgICAgICBtYXJrZXI6IG51bGwsXHJcblx0ICAgICAgICAgICAgY29tcGFueTogMixcclxuXHQgICAgICAgIFx0cGhvdG9zOiBbXVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHtcclxuXHQgICAgICAgICAgICBjb250aW5lbnQ6ICdFdXJvcGUnLFxyXG5cdCAgICAgICAgICAgIGNvdW50cnk6ICdSdXNzaWEnLFxyXG5cdCAgICAgICAgICAgIGNvdW50cnlfY29kZTogJ3J1JyxcclxuXHQgICAgICAgICAgICBjaXR5OiAnQmVsZ29yb2QnLFxyXG5cdCAgICAgICAgICAgIHR5cGU6ICdzby1zbycsXHJcblx0ICAgICAgICAgICAgbW9udGg6ICdNYXknLFxyXG5cdCAgICAgICAgICAgIHllYXI6ICcyMDA5JyxcclxuXHQgICAgICAgICAgICBsYXQ6IDUwLjU5OTM5MixcclxuXHQgICAgICAgICAgICBsbmc6IDM2LjU5MTY3NCxcclxuXHQgICAgICAgICAgICBob3RlbDogJ05vdCBhcHBsaWNhYmxlJyxcclxuXHQgICAgICAgICAgICBhZGRyZXNzOiAnTm90IGFwcGxpY2FibGUnLFxyXG5cdCAgICAgICAgICAgIG1hcmtlcjogbnVsbCxcclxuXHQgICAgICAgICAgICBjb21wYW55OiAyLFxyXG5cdCAgICAgICAgXHRwaG90b3M6IFtdXHJcblx0ICAgICAgICB9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29udGluZW50OiAnQXNpYScsXHJcblx0XHRcdFx0Y291bnRyeTogJ1VuaXRlZCBBcmFiIEVtaXJhdGVzJyxcclxuXHRcdFx0XHRjb3VudHJ5X2NvZGU6ICdhZScsXHJcblx0XHRcdFx0Y2l0eTogJ0R1YmFpJyxcclxuXHRcdFx0XHR0eXBlOiAnc28tc28nLFxyXG5cdFx0XHRcdG1vbnRoOiAnU2VwdGVtYmVyJyxcclxuXHRcdFx0XHR5ZWFyOiAnMjAxMScsXHJcblx0XHRcdFx0bGF0OiAyNS4yMDMxNTYsXHJcblx0XHRcdFx0bG5nOiA1NS4yNzAzMTAsXHJcblx0XHRcdFx0aG90ZWw6ICdOb3QgYXBwbGljYWJsZScsXHJcblx0XHRcdFx0YWRkcmVzczogJ05vdCBhcHBsaWNhYmxlJyxcclxuXHRcdFx0XHRtYXJrZXI6IG51bGwsXHJcblx0XHRcdFx0Y29tcGFueTogMixcclxuXHRcdFx0XHRwaG90b3M6IFtdXHJcblx0XHRcdH0sXHJcblx0ICAgICAgICB7XHJcblx0ICAgICAgICAgICAgY29udGluZW50OiAnQXNpYScsXHJcblx0ICAgICAgICAgICAgY291bnRyeTogJ0themFraHN0YW4nLFxyXG5cdCAgICAgICAgICAgIGNvdW50cnlfY29kZTogJ2t6JyxcclxuXHQgICAgICAgICAgICBjaXR5OiAnQWxtYXR5JyxcclxuXHQgICAgICAgICAgICB0eXBlOiAnZXhhY3QnLFxyXG5cdCAgICAgICAgICAgIG1vbnRoOiAnQXByaWwnLFxyXG5cdCAgICAgICAgICAgIHllYXI6ICcyMDEwJyxcclxuXHQgICAgICAgICAgICBsYXQ6IDQzLjM4MjkzNyxcclxuXHQgICAgICAgICAgICBsbmc6IDc3LjEyODMzMixcclxuXHQgICAgICAgICAgICBob3RlbDogJ2hvbWUnLFxyXG5cdCAgICAgICAgICAgIGFkZHJlc3M6ICdob21lJyxcclxuXHQgICAgICAgICAgICBtYXJrZXI6IG51bGwsXHJcblx0ICAgICAgICAgICAgY29tcGFueTogMixcclxuXHQgICAgICAgIFx0cGhvdG9zOiBbXVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHtcclxuXHQgICAgICAgICAgICBjb250aW5lbnQ6ICdBc2lhJyxcclxuXHQgICAgICAgICAgICBjb3VudHJ5OiAnVHVya2V5JyxcclxuXHQgICAgICAgICAgICBjb3VudHJ5X2NvZGU6ICd0cicsXHJcblx0ICAgICAgICAgICAgY2l0eTogJ0lzdGFuYnVsJyxcclxuXHQgICAgICAgICAgICB0eXBlOiAnZXhhY3QnLFxyXG5cdCAgICAgICAgICAgIG1vbnRoOiAnTm92ZW1iZXInLFxyXG5cdCAgICAgICAgICAgIHllYXI6ICcyMDA5JyxcclxuXHQgICAgICAgICAgICBsYXQ6IDQxLjAxMDIxMyxcclxuXHQgICAgICAgICAgICBsbmc6IDI4Ljk3Nzc5OCxcclxuXHQgICAgICAgICAgICBob3RlbDogJ01vZGVybiBTdWx0YW4gSG90ZWwnLFxyXG5cdCAgICAgICAgICAgIGFkZHJlc3M6ICdaZXluZXAgU3VsdGFuIENhZC4gTm8gMTkgU3VsdGFuYWhtZXQsIElzdGFuYnVsICwgMzQxMTAsIFR1cmtleScsXHJcblx0ICAgICAgICAgICAgbWFya2VyOiBudWxsLFxyXG5cdCAgICAgICAgICAgIGNvbXBhbnk6IDQsXHJcblx0ICAgICAgICBcdHBob3RvczogW11cclxuXHQgICAgICAgIH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb250aW5lbnQ6ICdBc2lhJyxcclxuXHRcdFx0XHRjb3VudHJ5OiAnQ2FtYm9kaWEnLFxyXG5cdFx0XHRcdGNvdW50cnlfY29kZTogJ2toJyxcclxuXHRcdFx0XHRjaXR5OiAnU2llbSBSZWFwJyxcclxuXHRcdFx0XHR0eXBlOiAnc28tc28nLFxyXG5cdFx0XHRcdG1vbnRoOiAnU2VwdGVtYmVyJyxcclxuXHRcdFx0XHR5ZWFyOiAnMjAxMScsXHJcblx0XHRcdFx0bGF0OiAxMy4zNDEzODQsXHJcblx0XHRcdFx0bG5nOiAxMDMuODM2ODYyLFxyXG5cdFx0XHRcdGhvdGVsOiAnRG9uXFwndCByZW1lbWJlcicsXHJcblx0XHRcdFx0YWRkcmVzczogJ0RvblxcJ3QgcmVtZW1iZXInLFxyXG5cdFx0XHRcdG1hcmtlcjogbnVsbCxcclxuXHRcdFx0XHRjb21wYW55OiAyLFxyXG5cdFx0XHRcdHBob3RvczogW11cclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNvbnRpbmVudDogJ0V1cm9wZScsXHJcblx0XHRcdFx0Y291bnRyeTogJ0ZyYW5jZScsXHJcblx0XHRcdFx0Y291bnRyeV9jb2RlOiAnZnInLFxyXG5cdFx0XHRcdGNpdHk6ICdWZXJzYWlsbGVzJyxcclxuXHRcdFx0XHR0eXBlOiAnc28tc28nLFxyXG5cdFx0XHRcdG1vbnRoOiAnQXByaWwnLFxyXG5cdFx0XHRcdHllYXI6ICcyMDExJyxcclxuXHRcdFx0XHRsYXQ6IDQ4LjgwNDc0MSxcclxuXHRcdFx0XHRsbmc6IDIuMTIwNTcwLFxyXG5cdFx0XHRcdGhvdGVsOiAnTm90IGFwcGxpY2FibGUnLFxyXG5cdFx0XHRcdGFkZHJlc3M6ICdOb3QgYXBwbGljYWJsZScsXHJcblx0XHRcdFx0bWFya2VyOiBudWxsLFxyXG5cdFx0XHRcdGNvbXBhbnk6IDIsXHJcblx0XHRcdFx0cGhvdG9zOiBbXVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29udGluZW50OiAnRXVyb3BlJyxcclxuXHRcdFx0XHRjb3VudHJ5OiAnR2VybWFueScsXHJcblx0XHRcdFx0Y291bnRyeV9jb2RlOiAnZGUnLFxyXG5cdFx0XHRcdGNpdHk6ICdQb3RzZGFtJyxcclxuXHRcdFx0XHR0eXBlOiAnc28tc28nLFxyXG5cdFx0XHRcdG1vbnRoOiAnTm92ZW1iZXInLFxyXG5cdFx0XHRcdHllYXI6ICcyMDExJyxcclxuXHRcdFx0XHRsYXQ6IDUyLjQwMzQ0MyxcclxuXHRcdFx0XHRsbmc6IDEzLjA2MTA1OCxcclxuXHRcdFx0XHRob3RlbDogJ05vdCBhcHBsaWNhYmxlJyxcclxuXHRcdFx0XHRhZGRyZXNzOiAnTm90IGFwcGxpY2FibGUnLFxyXG5cdFx0XHRcdG1hcmtlcjogbnVsbCxcclxuXHRcdFx0XHRjb21wYW55OiA2LFxyXG5cdFx0XHRcdHBob3RvczogW11cclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNvbnRpbmVudDogJ0V1cm9wZScsXHJcblx0XHRcdFx0Y291bnRyeTogJ1J1c3NpYScsXHJcblx0XHRcdFx0Y291bnRyeV9jb2RlOiAncnUnLFxyXG5cdFx0XHRcdGNpdHk6ICdQdXNoa2luJyxcclxuXHRcdFx0XHR0eXBlOiAnc28tc28nLFxyXG5cdFx0XHRcdG1vbnRoOiAnSnVuZScsXHJcblx0XHRcdFx0eWVhcjogJzIwMTInLFxyXG5cdFx0XHRcdGxhdDogNTkuNzExMDQ2LFxyXG5cdFx0XHRcdGxuZzogMzAuNDAwMjkzLFxyXG5cdFx0XHRcdGhvdGVsOiAnTm90IGFwcGxpY2FibGUnLFxyXG5cdFx0XHRcdGFkZHJlc3M6ICdOb3QgYXBwbGljYWJsZScsXHJcblx0XHRcdFx0bWFya2VyOiBudWxsLFxyXG5cdFx0XHRcdGNvbXBhbnk6IDMsXHJcblx0XHRcdFx0cGhvdG9zOiBbXVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29udGluZW50OiAnRXVyb3BlJyxcclxuXHRcdFx0XHRjb3VudHJ5OiAnUnVzc2lhJyxcclxuXHRcdFx0XHRjb3VudHJ5X2NvZGU6ICdydScsXHJcblx0XHRcdFx0Y2l0eTogJ1N1emRhbCcsXHJcblx0XHRcdFx0dHlwZTogJ3NvLXNvJyxcclxuXHRcdFx0XHRtb250aDogJ0FwcmlsJyxcclxuXHRcdFx0XHR5ZWFyOiAnMjAxMicsXHJcblx0XHRcdFx0bGF0OiA1Ni40MTc5NzcsXHJcblx0XHRcdFx0bG5nOiA0MC40NDg2ODEsXHJcblx0XHRcdFx0aG90ZWw6ICdEb25cXCd0IHJlbWVtYmVyJyxcclxuXHRcdFx0XHRhZGRyZXNzOiAnRG9uXFwndCByZW1lbWJlcicsXHJcblx0XHRcdFx0bWFya2VyOiBudWxsLFxyXG5cdFx0XHRcdGNvbXBhbnk6IDQsXHJcblx0XHRcdFx0cGhvdG9zOiBbXVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29udGluZW50OiAnRXVyb3BlJyxcclxuXHRcdFx0XHRjb3VudHJ5OiAnUnVzc2lhJyxcclxuXHRcdFx0XHRjb3VudHJ5X2NvZGU6ICdydScsXHJcblx0XHRcdFx0Y2l0eTogJ1Rvcnpob2snLFxyXG5cdFx0XHRcdHR5cGU6ICdzby1zbycsXHJcblx0XHRcdFx0bW9udGg6ICdKYW51YXJ5JyxcclxuXHRcdFx0XHR5ZWFyOiAnMjAxMicsXHJcblx0XHRcdFx0bGF0OiA1Ny4wMzg5MTEsXHJcblx0XHRcdFx0bG5nOiAzNC45NjIyNDMsXHJcblx0XHRcdFx0aG90ZWw6ICdOb3QgYXBwbGljYWJsZScsXHJcblx0XHRcdFx0YWRkcmVzczogJ05vdCBhcHBsaWNhYmxlJyxcclxuXHRcdFx0XHRtYXJrZXI6IG51bGwsXHJcblx0XHRcdFx0Y29tcGFueTogMixcclxuXHRcdFx0XHRwaG90b3M6IFtdXHJcblx0XHRcdH1cclxuXHQgICAgXSxcclxuXHQgICAgY29sdW1uczogWydjb250aW5lbnQnLCAnY291bnRyeScsICdjaXR5JywgJ3llYXInLCAnbW9udGgnXSwgLy9jb2x1bW5zIHRvIHNlYXJjaCBsb2NhdGlvbnNcclxuXHQgICAgbWFwOiBudWxsLFxyXG5cdCAgICBsYXllcjogbnVsbCAvL2xheWVyIHVzZWQgdG8gZmlsbCBpbiB2aXNpdGVkIGNvdW50cmllcy5cclxuXHR9O1xyXG5cclxuXHQvLyBmdW5jdGlvbiB0byBjcmVhdGUgbmV3IGxvY2F0aW9uIG9iamVjdFxyXG5cdC8vIHBhcmFtZXRlcjpcclxuXHQvL1x0XHRkYXRhIC0gZGF0YSB0byBjcmVhdGUgbG9jYXRpb24gKGNvbnRpbmVudCwgY291bnRyeSwgY2l0eSBhbmQgc28gb24uLi4pXHJcblx0dmFyIExvY2F0aW9uID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHR0aGlzLmNvbnRpbmVudCA9IGtvLm9ic2VydmFibGUoZGF0YS5jb250aW5lbnQpO1xyXG5cdFx0dGhpcy5jb3VudHJ5ID0ga28ub2JzZXJ2YWJsZShkYXRhLmNvdW50cnkpO1xyXG5cdFx0dGhpcy5jaXR5ID0ga28ub2JzZXJ2YWJsZShkYXRhLmNpdHkpO1xyXG5cdFx0dGhpcy50eXBlID0ga28ub2JzZXJ2YWJsZShkYXRhLnR5cGUpO1xyXG5cdFx0dGhpcy5tb250aCA9IGtvLm9ic2VydmFibGUoZGF0YS5tb250aCk7XHJcblx0XHR0aGlzLnllYXIgPSBrby5vYnNlcnZhYmxlKGRhdGEueWVhcik7XHJcblx0XHR0aGlzLmxhdCA9IGtvLm9ic2VydmFibGUoZGF0YS5sYXQpO1xyXG5cdFx0dGhpcy5sbmcgPSBrby5vYnNlcnZhYmxlKGRhdGEubG5nKTtcclxuXHRcdHRoaXMuaG90ZWwgPSBrby5vYnNlcnZhYmxlKGRhdGEuaG90ZWwpO1xyXG5cdFx0dGhpcy5hZGRyZXNzID0ga28ub2JzZXJ2YWJsZShkYXRhLmFkZHJlc3MpO1xyXG5cdFx0dGhpcy5waG90b3MgPSBrby5vYnNlcnZhYmxlQXJyYXkoW10pO1xyXG5cdFx0dGhpcy5zaG93ID0ga28ub2JzZXJ2YWJsZShkYXRhLnNob3cpO1xyXG5cdFx0dGhpcy5tYXJrZXIgPSBrby5vYnNlcnZhYmxlKGRhdGEubWFya2VyKTtcclxuXHRcdHRoaXMuY29tcGFueSA9IGtvLm9ic2VydmFibGUoZGF0YS5jb21wYW55KTtcclxuXHRcdHRoaXMuaXNIaWRkZW5EZXRhaWxzID0ga28ub2JzZXJ2YWJsZSh0cnVlKTtcclxuXHRcdHRoaXMuc2hvd0RldGFpbHMgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0dGhpcy5pc0hpZGRlbkRldGFpbHMoIXNlbGYuaXNIaWRkZW5EZXRhaWxzKCkpO1xyXG5cdFx0fTtcclxuXHR9O1xyXG5cclxuXHR2YXIgdmlld01vZGVsID0gZnVuY3Rpb24oKSB7XHJcblx0ICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0ICAgIC8vIGZ1bmN0aW9uIHRvIGluaXRpYWxpemUgbWFwLCBtYXJrZXMsIGluZm93aW5kb3cgYW5kIGFsbCBuZWNjZXNzYXJ5IG9ic2VydmFibGVzXHJcblx0ICAgIHNlbGYuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0ICAgIHNlbGYuaXNIaWRkZW5MZWZ0ID0ga28ub2JzZXJ2YWJsZSh0cnVlKTsgLy8gaW5pdGlhbGx5IGxlZnQgc2lkZWJhciBpcyBoaWRkZW5cclxuXHRcdCAgICBzZWxmLmlzSGlkZGVuUmlnaHQgPSBrby5vYnNlcnZhYmxlKHRydWUpOyAvLyBpbml0aWFsbHkgcmlnaHQgc2lkZWJhciBpcyBoaWRkZW5cclxuXHQgICAgXHRzZWxmLnNlYXJjaFF1ZXJ5ID0ga28ub2JzZXJ2YWJsZSgpOyAvLyBpbmlzaWFsaXplIG9ic2VydmFibGUgZm9yIHNlYXJjaCBpbnB1dFxyXG5cdFx0XHRzZWxmLmNvbHVtbnNUb1NlYXJjaCA9IGtvLm9ic2VydmFibGVBcnJheShtb2RlbC5jb2x1bW5zKTsgLy8gaW5pc2lhbGl6ZSBvYnNlcnZhYmxlIGZvciBjb2x1bW5zIHRvIHNlYXJjaFxyXG5cdFx0XHRzZWxmLmN1cnJlbnRMb2NhdGlvbiA9IGtvLm9ic2VydmFibGUoKTsgLy8gaW5pc2lhbGl6ZSBvYnNlcnZhYmxlIGZvciBjdXJyZW50IGxvY2F0aW9uXHJcblx0XHRcdHNlbGYuY3VycmVudFBob3RvcyA9IGtvLm9ic2VydmFibGVBcnJheShbXSk7IC8vIGluaXNpYWxpemUgb2JzZXJ2YWJsZSBmb3IgcGhvdG9zIGZvciBjdXJyZW50IGxvY2F0aW9uXHJcblx0XHRcdHNlbGYuY3VycmVudEJpZ1Bob3RvID0ga28ub2JzZXJ2YWJsZSgpOyAvLyBpbmlzaWFsaXplIG9ic2VydmFibGUgZm9yIGJpZyBwaG90b1xyXG5cdFx0XHRzZWxmLmJpZ1Bob3RvV2lkdGggPSBrby5vYnNlcnZhYmxlKCk7IC8vIGluaXNpYWxpemUgb2JzZXJ2YWJsZSBmb3Igd2lkdGggb2YgYmlnIHBob3RvXHJcblx0ICAgIFx0c2VsZi5iaWdQaG90b0hlaWdodCA9IGtvLm9ic2VydmFibGUoKTsgLy8gaW5pc2lhbGl6ZSBvYnNlcnZhYmxlIGZvciBoZWlnaHQgb2YgYmlnIHBob3RvXHJcblx0XHQgICAgc2VsZi5pbmZvSGVpZ2h0ID0ga28ub2JzZXJ2YWJsZSgkKHdpbmRvdykuaGVpZ2h0KCkgLSA3MCk7IC8vIHNldCBoZWlnaHQgcHJvcGVydHkgdG8gcmlnaHQgc2lkZWJhclxyXG5cdCAgICBcdHNlbGYucGhvdG9zSGVpZ2h0ID0ga28ub2JzZXJ2YWJsZSgkKHdpbmRvdykuaGVpZ2h0KCkgLSA3MCk7IC8vIHNldCBoZWlnaHQgcHJvcGVydHkgdG8gbGVmdCBzaWRlYmFyXHJcblx0ICAgIFx0c2VsZi53aW5kb3dXaWR0aCA9IGtvLm9ic2VydmFibGUoJCh3aW5kb3cpLndpZHRoKCkpO1xyXG5cdCAgICBcdHNlbGYud2luZG93SGVpZ2h0ID0ga28ub2JzZXJ2YWJsZSgkKHdpbmRvdykuaGVpZ2h0KCkpO1xyXG5cclxuXHRcdFx0Ly8gaW5pdGlhbGl6ZSBHb29nbGUgTWFwIHZpYSBBUElcclxuXHRcdFx0c2VsZi5pbml0TWFwID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Ly8gZGlzcGxheSBtYXAgaW4gZWxlbWVudCB3aXRoIGlkICdtYXAnXHJcblx0XHRcdFx0bW9kZWwubWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcclxuXHRcdFx0ICAgICAgICAvLyBjZW50ZXIgbWFwIHNvbWV3aGVyZSBuZWFyIEl0YWx5IDopXHJcblx0XHRcdCAgICAgICAgY2VudGVyOiB7XHJcblx0XHRcdCAgICAgICAgICAgIGxhdDogMzkuMTA0ODkyLFxyXG5cdFx0XHQgICAgICAgICAgICBsbmc6IDkuNDU2NjU2XHJcblx0XHRcdCAgICAgICAgfSxcclxuXHRcdFx0ICAgICAgICB6b29tOiAzLFxyXG5cdFx0XHQgICAgICAgIG1hcFR5cGVDb250cm9sOiB0cnVlLFxyXG5cdFx0XHQgICAgICAgIG1hcFR5cGVJZDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsXHJcblx0XHRcdCAgICAgICAgbWFwVHlwZUNvbnRyb2xPcHRpb25zOiB7XHJcblx0XHRcdCAgICAgICAgICAgIHBvc2l0aW9uOiBnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb24uQk9UVE9NX0NFTlRFUlxyXG5cdFx0XHQgICAgICAgIH0sXHJcblx0XHRcdCAgICAgICAgem9vbUNvbnRyb2w6IHRydWUsXHJcblx0XHRcdCAgICAgICAgem9vbUNvbnRyb2xPcHRpb25zOiB7XHJcblx0XHRcdCAgICAgICAgICAgIHBvc2l0aW9uOiBnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb24uTEVGVF9DRU5URVJcclxuXHRcdFx0ICAgICAgICB9LFxyXG5cdFx0XHQgICAgICAgIHN0cmVldFZpZXdDb250cm9sOiB0cnVlLFxyXG5cdFx0XHQgICAgICAgIHN0cmVldFZpZXdDb250cm9sT3B0aW9uczoge1xyXG5cdFx0XHQgICAgICAgICAgICBwb3NpdGlvbjogZ29vZ2xlLm1hcHMuQ29udHJvbFBvc2l0aW9uLkxFRlRfQ0VOVEVSXHJcblx0XHRcdCAgICAgICAgfVxyXG5cdFx0XHQgICAgfSk7XHJcblxyXG5cdFx0XHRcdHZhciBhdXRvY29tcGxldGUgPSBuZXcgZ29vZ2xlLm1hcHMucGxhY2VzLkF1dG9jb21wbGV0ZShcclxuXHRcdFx0XHQgICAgICAvKiogQHR5cGUgeyFIVE1MSW5wdXRFbGVtZW50fSAqLyAoXHJcblx0XHRcdFx0ICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWMtaW5wdXQnKSksIHtcclxuXHRcdFx0XHQgICAgICAgIHR5cGVzOiBbJyhjaXRpZXMpJ11cclxuXHRcdFx0XHQgICAgICAgIC8vY29tcG9uZW50UmVzdHJpY3Rpb25zOiBjb3VudHJ5UmVzdHJpY3RcclxuXHRcdFx0XHQgICAgICB9KTtcclxuXHRcdFx0XHQvLyBSZXN0cmljdGlvbiBmb3IgbXVsdGlwbGUgY291bnRyaWVzIGlzIG5vdCB3b3JraW5nXHJcblx0XHRcdFx0Ly8gSXQgaXMgYSBrbm93biBidWcgbWVudGlvbmVkIGhlcmU6XHJcblx0XHRcdFx0Ly8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9nbWFwcy1hcGktaXNzdWVzL2lzc3Vlcy9kZXRhaWw/aWQ9NDIzM1xyXG5cdFx0XHRcdC8vdmFyIGNvdW50cmllcyA9IFtdO1xyXG5cdFx0XHRcdC8vZm9yICggdmFyIGxvYyBpbiBtb2RlbC5sb2NhdGlvbnMpXHJcblx0XHRcdFx0Ly9cdGNvdW50cmllcy5wdXNoKG1vZGVsLmxvY2F0aW9uc1tsb2NdLmNvdW50cnlfY29kZSk7XHJcblx0XHRcdFx0Ly9hdXRvY29tcGxldGUuc2V0Q29tcG9uZW50UmVzdHJpY3Rpb25zKHsnY291bnRyeSc6IGNvdW50cmllc30pO1xyXG5cclxuXHRcdFx0ICAgIHNlbGYuZmlsbENvdW50cmllcyhtb2RlbC5tYXApO1x0Ly8gZmlsbCB2aXNpdGVkIGNvdW50cmllcyBjb3VudHJpZXMgaW4gbW9kZWxcclxuXHRcdFx0ICAgIHNlbGYuYWRkTWFya2Vycyhtb2RlbC5tYXApO1x0XHQvLyBhZGQgbWFya2VycyBvbiBtYXAgYWNjb3JkaW5nIHRvIGxvY2F0aW9ucyBpbiBtb2RlbFxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0Ly8gZnVuY3Rpb24gdG8gYWRkIG1hcmtlcnMgb24gbWFwXHJcblx0XHRcdC8vIHBhcmFtZXRlcjpcclxuXHRcdFx0Ly8gXHRcdG1hcCAtIG1hcCB3aGVyZSBtYXJrZXJzIHdpbGwgYmUgZGlzcGxheWVkXHJcblx0XHRcdHNlbGYuYWRkTWFya2VycyA9IGZ1bmN0aW9uKG1hcCkge1xyXG5cclxuXHRcdFx0ICAgIC8vIGl0ZXJhdGUgdGhyb3VnaCBhbGwgbG9jYXRpb25zIGluIG1vZGVsIHRvIGNyZWF0ZSBtYXJrZXIgZm9yIGVhY2ggbG9jYXRpb25cclxuXHRcdFx0ICAgIGZvciAoIHZhciBsb2MgaW4gbW9kZWwubG9jYXRpb25zKSB7XHJcblx0XHRcdCAgICAgICAgLy8gY3JlYXRlIG5ldyBtYXJrZXIgYXQgbG9jYXRpb25zIHBvc2l0aW9uXHJcblx0XHRcdCAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xyXG5cdFx0XHQgICAgICAgICAgICBwb3NpdGlvbjogbW9kZWwubG9jYXRpb25zW2xvY10sXHJcblx0XHRcdCAgICAgICAgICAgIG1hcDogbWFwLFxyXG5cdFx0XHQgICAgICAgICAgICB0aXRsZTogbW9kZWwubG9jYXRpb25zW2xvY10uY2l0eSxcclxuXHRcdFx0ICAgICAgICAgICAgYW5pbWF0aW9uOiBnb29nbGUubWFwcy5BbmltYXRpb24uRFJPUFxyXG5cdFx0XHQgICAgICAgIH0pO1xyXG5cclxuXHRcdFx0ICAgICAgICAvLyBjaG9vc2UgaWNvbiBmb3IgbWFya2VyXHJcblx0XHRcdCAgICAgICAgLy8gaWYgbG9jYXRpb24gd2FzIHZpc2l0ZWQgd2l0aCBmYW1pbHkgKHdpZmUgYW5kIGNoaWxkcmVuKSAtIGNob29zZSBoZWFydCBpY29uXHJcblx0XHRcdCAgICAgICAgLy8gaWYgbG9jYXRpb24gd2FzIHZpc2l0ZWQgd2l0aCBmcmllbmRzIChhcyB3ZWxsIGFzIHdpdGggZmFtaWx5KSAtIGNob29zZSBmcmllbmRzIGljb25cclxuXHRcdFx0ICAgICAgICBpZiAobW9kZWwubG9jYXRpb25zW2xvY10uY29tcGFueSA9PT0gMikge1xyXG5cdFx0XHRcdFx0XHRtYXJrZXIuc2V0SWNvbignaW1nL2hlYXJ0LnBuZycpO1xyXG5cdFx0XHQgICAgICAgIH0gZWxzZSB7XHJcblx0XHRcdCAgICAgICAgXHRtYXJrZXIuc2V0SWNvbignaW1nL2ZyaWVuZHMucG5nJyk7XHJcblx0XHRcdCAgICAgICAgfVxyXG5cclxuXHRcdFx0ICAgICAgICAvLyBhc3NvY2lhdGUgbWFya2VyIHdpdGggbG9jYXRpb24gaW4gbW9kZWxcclxuXHRcdFx0ICAgICAgICBtb2RlbC5sb2NhdGlvbnNbbG9jXS5tYXJrZXIgPSBtYXJrZXI7XHJcblx0XHRcdCAgICB9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHQvLyBmdW5jdGlvbiB0byBmaWxsIHZpc2l0ZWQgY291bnRyaWVzIHdpdGggbGF5ZXJcclxuXHRcdFx0Ly8gRnVzaW9uIFRhYmxlIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIGNvdW50cnkncyBib3JkZXJcclxuXHRcdFx0Ly8gcGFyYW1ldGVyOlxyXG5cdFx0XHQvLyBcdFx0bWFwIC0gbWFwIHRvIGZpbGxcclxuXHRcdFx0c2VsZi5maWxsQ291bnRyaWVzID0gZnVuY3Rpb24obWFwKSB7XHJcblx0ICAgIFx0XHR2YXIgY291bnRyaWVzQXJyYXkgPSBbXTtcclxuXHQgICAgXHRcdHZhciBjb3VudHJpZXMgPSAnKCc7XHJcblx0ICAgIFx0XHQvLyBpdGVyYXRlIHRocm91Z2ggYWxsIGxvY2F0aW9ucyBpbiBtb2RlbCB0byBkZXRlcm1pbmUgdW5pcXVlIHNldCBvZiBjb3VudHJpZXNcclxuXHQgICAgXHRcdC8vIHJlc3VsdCBvZiB0aGlzIGxvb3AgaXMgJ2NvdW50cmllcycgc3RyaW5nIHRoYXQgc2hvdWxkIGJlIGFkZGVkIGludG8gcXVlcnkgdG8gRnVzaW9uIFRhYmxlXHJcblx0ICAgIFx0XHRmb3IgKHZhciBsb2MgaW4gbW9kZWwubG9jYXRpb25zKSB7XHJcblx0ICAgIFx0XHRcdHZhciBjbnRyID0gbW9kZWwubG9jYXRpb25zW2xvY10uY291bnRyeTtcclxuXHQgICAgXHRcdFx0Ly8gaWYgY291bnRyeSBpcyBub3QgaW4gY291bnRyaWVzQXJyYXkgZG8gbm90aGluZ1xyXG5cdCAgICBcdFx0XHQvLyBhZGQgaXQgdG8gY291bnRyaWVzQXJyYXkgYXJyYXkgYW5kIHRvICdjb3VudHJpZXMnIHN0cmluZ1xyXG5cdCAgICBcdFx0XHRpZiAoY291bnRyaWVzQXJyYXkuaW5kZXhPZihjbnRyKSA8PSAtMSkge1xyXG5cdCAgICBcdFx0XHRcdGNvdW50cmllc0FycmF5LnB1c2goY250cik7XHJcblx0ICAgIFx0XHRcdFx0Y291bnRyaWVzICs9IFwiJ1wiICsgY250ciArIFwiJywgXCI7XHJcblx0ICAgIFx0XHRcdH1cclxuXHQgICAgXHRcdH1cclxuXHQgICAgXHRcdC8vIHJlbW92ZSB0aGUgbGFzdCB0byBjaGFyYWN0ZXIgJywgJyBmcm9tIHRoZSBzdHJpbmcgb2YgY291bnRyaWVzIGFuZCAgYWRkIGNsb3NlIGJyYWNrZXQuXHJcblx0ICAgIFx0XHRjb3VudHJpZXMgPSBjb3VudHJpZXMuc3Vic3RyaW5nKDAsIGNvdW50cmllcy5sZW5ndGggLSAyKSArIFwiKVwiO1xyXG5cclxuXHQgICAgXHRcdC8vIEZ1c2lvbiBUYWJsZSBkYXRhIElEIHRvIGRlcnRlbWluZSBjb29udHJ5J3MgYm9yZGVyXHJcblx0XHRcdFx0dmFyIEZUX1RhYmxlSUQgPSA0MjA0MTk7XHJcblx0XHRcdFx0Ly8gY3JlYXRlIGxheWVyIHRvIGZpbGwgdmlzaXRlZCBjb3VudHJpZXNcclxuXHRcdFx0XHRtb2RlbC5sYXllciA9IG5ldyBnb29nbGUubWFwcy5GdXNpb25UYWJsZXNMYXllcih7XHJcblx0ICBcdFx0XHRcdHF1ZXJ5OiB7XHJcblx0ICBcdFx0XHRcdFx0c2VsZWN0OiBcImttbF80MzI2XCIsXHJcblx0ICAgICAgICAgIFx0XHRcdGZyb206IEZUX1RhYmxlSUQsXHJcblx0ICAgICAgICAgIFx0XHRcdHdoZXJlOiBcIiduYW1lXzAnIElOIFwiICsgY291bnRyaWVzXHJcblx0ICAgICAgICAgIFx0XHR9LFxyXG5cdCAgXHRcdFx0XHRzdHlsZXM6IFt7XHJcblx0ICBcdFx0XHRcdFx0cG9seWdvbk9wdGlvbnM6IHtcclxuXHRcdFx0XHRcdFx0ICAgIGZpbGxPcGFjaXR5OiBcIjAuMlwiLFxyXG5cdCAgICBcdFx0XHRcdFx0ZmlsbENvbG9yOiBcIiMwNkZGMURcIlxyXG5cdCAgXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1dXHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdC8vIGFzc2lnbiBsYXllciB0byBtYXBcclxuXHRcdFx0XHRtb2RlbC5sYXllci5zZXRNYXAobWFwKTtcclxuXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHQvLyBmdW5jdGlvbiB0byBhZGQgbGlzdGVuZXJzIG9uICdjbGljaycgZXZlbnQgdG8gYWxsIG1hcmtlcnNcclxuXHRcdFx0Ly8gcGFyYW1ldGVyOlxyXG5cdFx0XHQvLyBcdFx0bWFwIC0gbWFwIHdoZXJlIG1hcmtlciBpcyBkaXNwbGF5ZWRcclxuXHRcdFx0Ly9cdFx0bGF5ZXIgLSBsYXllciB0aHRhIHNob3VsZCBiZSBzaG93biBvciBoaWRkZW5cclxuXHRcdFx0c2VsZi5jbGlja01hcmtlciA9IGZ1bmN0aW9uKG1hcCwgbGF5ZXIpIHtcclxuXHRcdFx0XHQvLyBpdGVyYXRlIHRocm91Z2ggYWxsIGxvY2F0aW9ucyB0byBhZGQgZXZlbnQgbGlzdGVuZXJcclxuXHRcdFx0XHRrby51dGlscy5hcnJheUZvckVhY2goc2VsZi5sb2NhdGlvbnNMaXN0KCksIGZ1bmN0aW9uIChsb2MpIHtcclxuXHRcdFx0XHRcdHZhciBtYXJrZXIgPSBsb2MubWFya2VyKCk7XHJcblx0XHRcdFx0XHQvLyBab29tIHRvIDEyIHdoZW4gY2xpY2tpbmcgb24gbWFya2VyXHJcblx0XHRcdFx0XHRnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsJ2NsaWNrJyxmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogdGhpcyBpZiBlbHNlIGNvbnRpdGlvbiBwb3NzaWJsZSBzaG91bGQgYmUgcmVmYWN0b3IgdG8gd29yayBjb3JyZWN0bHkgd2l0aCBzaG93L2hpZGUgbGF5ZXJcclxuXHRcdFx0XHRcdFx0Ly8gaWYgbWFya2VyIGlzIGFuaW1hdGVkIChib3VuY2UpIGRvbid0IGFuaW1hdGUgYW5kIGRpc3BsYXkgbGF5ZXJcclxuXHRcdFx0XHRcdFx0aWYgKG1hcmtlci5nZXRBbmltYXRpb24oKSAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0XHQgICAgbWFya2VyLnNldEFuaW1hdGlvbihudWxsKTtcclxuXHRcdFx0XHRcdFx0ICAgIGxheWVyLnNldE1hcChtYXApO1xyXG5cdFx0XHRcdFx0XHQvLyBlbHNlIGFuaW1hdGUgYW5kIHJlbW92ZSBsYXllclxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHQgICAgbWFya2VyLnNldEFuaW1hdGlvbihnb29nbGUubWFwcy5BbmltYXRpb24uQk9VTkNFKTtcclxuXHRcdFx0XHRcdFx0ICAgIGxheWVyLnNldE1hcChudWxsKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHQvLyB6b29tIGFuZCBjZW50ZXIgdG8gY2xpY2tlZCBtYXJrZXJcclxuXHRcdFx0XHRcdFx0bWFwLnNldFpvb20oMTIpO1xyXG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKG1hcmtlci5nZXRQb3NpdGlvbigpLmxhdCgpLG1hcmtlci5nZXRQb3NpdGlvbigpLmxuZygpKTtcclxuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhsb2MubGF0KCktMTAwLjEsbG9jLmxuZygpKzEwMC4xKTtcclxuXHRcdFx0XHRcdFx0dmFyIG15TGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2MubGF0KCkrMC4wNCxsb2MubG5nKCkrMC4wNCk7XHJcblx0XHRcdFx0XHRcdG1hcC5zZXRDZW50ZXIobXlMYXRMbmcpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdCAgICB9KTtcclxuXHRcdFx0fTtcclxuXHJcblxyXG5cdFx0XHQvLyBmdW5jdGlvbiB0byBpbmZvd2luZG93cyBhbmQgZmlsbCB0aGVtIHdpdGggYXBwcm9wcmlhdGUgY29udGVudFxyXG5cdFx0XHQvLyBwYXJhbWV0ZXI6XHJcblx0XHRcdC8vIFx0XHRtYXAgLSBtYXAgd2hlcmUgbWFya2VyIGlzIGRpc3BsYXllZFxyXG5cdFx0XHRzZWxmLmFkZEluZm9XaW5kb3cgPSBmdW5jdGlvbihtYXApIHtcclxuXHRcdFx0XHQvLyBpdGVyYXRlIHRocm91Z2ggYWxsIGxvY2F0aW9ucyB0byBjcmVhdGUgaW5mb3dpbmRvdyBmb3IgZWFjaCBtYXJrZXJcclxuXHRcdFx0XHRrby51dGlscy5hcnJheUZvckVhY2goc2VsZi5sb2NhdGlvbnNMaXN0KCksIGZ1bmN0aW9uIChsb2MpIHtcclxuXHRcdFx0XHRcdHZhciBtYXJrZXIgPSBsb2MubWFya2VyKCk7XHJcblx0XHRcdFx0XHR2YXIgY2l0eSA9IGxvYy5jaXR5KCk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gdXJsIHRoYXQgd2lsbCBiZSB1c2VkIHRvIHJlcXVlc3QgZm9yIGxpbmtzIGZvciBwYXJ0aWN1bGFyIGNpdHkgdG8gZGlzcGxheSB0aGVtIGluIGluZm93aW5kb3cgY29udGVudFxyXG5cdFx0XHRcdFx0dmFyIHdpa2lVcmwgPSAnaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvdy9hcGkucGhwP2FjdGlvbj1vcGVuc2VhcmNoJnNlYXJjaD0nICsgY2l0eSArICcmZm9ybWF0PWpzb24mY2FsbGJhY2s9d2lraUNhbGxiYWNrJztcclxuXHJcblx0XHRcdFx0XHQvLyBwcmV2aW91cyBlcnJvciBoYW5kbGVyIGZ1bmN0aW9uXHJcblx0XHRcdFx0XHQvLyBkb24ndCByZW1vdmUgaXQgZm9yIGZ1cnRoZXIgaW52ZXN0aWdhdGlvblxyXG5cdFx0XHRcdCAgICAvL3ZhciB3aWtpTGlzdFJlcXVlc3RUaW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24gKCl7XHJcblx0XHRcdFx0ICAgIC8vICAgIGFsZXJ0KCdGYWlsZWQgdG8gZ2V0IFdpa2kgcmVzb3VyY2VzJyk7XHJcblx0XHRcdFx0ICAgIC8vfSwgODAwMCk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gYWpheCByZXF1ZXN0IHRvIHJlY2VpdmUgd2lraSBsaW5rcyBvbiBhcnRpY2xlcyB0aGF0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gaW5mb3dpbmRvdyBjb250ZW50XHJcblx0XHRcdFx0ICAgICQuYWpheCh7XHJcblx0XHRcdFx0ICAgICAgICB1cmw6IHdpa2lVcmwsXHJcblx0XHRcdFx0ICAgICAgICBkYXRhVHlwZTogJ2pzb25wJyxcclxuXHRcdFx0XHQgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0ICAgICAgICBcdC8vIGhhbmRsZSByZXNwb25zZSB3aXRoIGhhbmRsZVdpa2kgZnVuY3Rpb25cclxuXHRcdFx0XHQgICAgICAgIFx0aGFuZGxlV2lraShyZXNwb25zZSk7XHJcblx0XHRcdFx0ICAgICAgICAgICAgLy9jbGVhclRpbWVvdXQod2lraUxpc3RSZXF1ZXN0VGltZW91dCk7XHJcblx0XHRcdFx0ICAgICAgICB9LFxyXG5cdFx0XHRcdCAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh4aHIsIGFqYXhPcHRpb25zLCB0aHJvd25FcnJvcikge1xyXG5cdFx0XHRcdCAgICAgICAgXHQvLyBhbGVydCBpZiBhamF4IHJlcXVlc3Qgd2FzIG5vdCBleGVjdXRlZCBjb3JyZWN0bHlcclxuXHRcdFx0XHRcdCAgICAgICAgYWxlcnQoeGhyLnN0YXR1cyArICcgZmFpbGVkIHRvIGdldCBXaWtpIHJlc291cmNlcyBmb3IgY2l0eSAnICsgY2l0eSArICdcXG5VcmwgcmVxdWVzdGVkOiBcXG4nICsgd2lraVVybCk7XHJcblx0XHRcdFx0XHQgICAgfVxyXG5cdFx0XHRcdCAgICB9KTtcclxuXHJcblx0XHRcdFx0ICAgIC8vIGZ1bmN0aW9uIHRvIGhhbmRsZSBhamF4IHJlcXVlc3RcclxuXHRcdFx0XHQgICAgLy8gcGFyYW1ldGVyOlxyXG5cdFx0XHRcdCAgICAvL1x0XHRkYXRhIC0gZGF0YSByZWNlaXZlZCBmcm9tIHdpa2ksIGNvbnRhdGlucyBsaXN0IG9mIGFydGljbGVzIGZvciBwYXJ0aWN1bGFyIGNpdHkuXHJcblx0XHRcdFx0ICAgIHZhciBoYW5kbGVXaWtpID0gZnVuY3Rpb24oZGF0YSkge1xyXG5cdFx0XHQgICAgXHRcdHZhciBhcnRpY2xlTGlzdCA9IGRhdGFbMV07XHJcblx0XHRcdCAgICBcdFx0dmFyIHdpa2lBcnRpY2xlTGlzdCA9ICcnO1xyXG5cclxuXHRcdFx0ICAgIFx0XHQvLyBpdGVyYXRlIHRocm91Z2ggYWxsIGFydGljbGVzIGFuZCBhZGQgdGhlbSBpbnRvIGEgbGlzdCB0aHRhIHdpbGwgYmUgZGlzcGxheWVkIGluIGluZm93aW5kb3dcclxuXHRcdFx0ICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgbCA9IGFydGljbGVMaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKylcclxuXHRcdFx0ICAgICAgICAgICAgICAgIHdpa2lBcnRpY2xlTGlzdCArPSAnPGxpPjxhIGhyZWY9XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpLycgKyBhcnRpY2xlTGlzdFtpXSArICdcIj4nICsgYXJ0aWNsZUxpc3RbaV0gKyAnPC9hPjwvbGk+JztcclxuXHJcblx0XHRcdCAgICAgICAgICAgIC8vIHZhcmlhYmxlIHdpbGwgYmUgdXNlZCB0byBzZWFyY2ggYnJpZWYgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBjaXR5IGluIHdpa2lwZWRpYVxyXG5cdFx0XHQgICAgICAgICAgICB2YXIgYXJ0aWNsZSA9IGFydGljbGVMaXN0WzBdO1xyXG5cdFx0XHQgICAgICAgICAgICAvLyBjaXRpZXMgUHVzaGtpbiBhbmQgVmVyc2FpbGxlcyBoYXZlIG5vdCBzdGFuZGFyZCBuYW1lcyBpbiB3aWtpXHJcblx0XHRcdCAgICAgICAgICAgIC8vIHNvIGltcGxlbWVudCBsb2dpYyB0byBzZWFyY2ggZnVydGhlciBpbmZvcm1hdGlvbiB1c2luZyBjb3JyZWN0IGRhdGFcclxuXHRcdFx0ICAgICAgICAgICAgaWYgKGNpdHkgPT09ICdQdXNoa2luJylcclxuXHRcdFx0ICAgICAgICAgICAgXHRhcnRpY2xlID0gYXJ0aWNsZUxpc3RbN107XHJcblx0XHRcdCAgICAgICAgICAgIGlmIChjaXR5ID09PSAnVmVyc2FpbGxlcycpXHJcblx0XHRcdCAgICAgICAgICAgIFx0YXJ0aWNsZSA9IGFydGljbGVMaXN0WzFdO1xyXG5cdFx0XHQgICAgICAgICAgICAvLyB1cmwgdG8gc2VhcmNoIGJyaWVmIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggY2l0eSBpbiB3aWtpcGVkaWFcclxuXHRcdFx0ICAgIFx0XHR2YXIgd2lraUFib3V0VXJsID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93L2FwaS5waHA/YWN0aW9uPXF1ZXJ5JnByb3A9ZXh0cmFjdHMmZm9ybWF0PWpzb24mZXhpbnRybz0mdGl0bGVzPScgKyBhcnRpY2xlO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gcHJldmlvdXMgZXJyb3IgaGFuZGxlciBmdW5jdGlvblxyXG5cdFx0XHRcdFx0XHQvLyBkb24ndCByZW1vdmUgaXQgZm9yIGZ1cnRoZXIgaW52ZXN0aWdhdGlvblxyXG5cdFx0XHRcdFx0XHQvL3ZhciB3aWtpQXJ0aWNsZVJlcXVlc3RUaW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24gKCl7XHJcblx0XHRcdFx0XHRcdC8vXHRhbGVydCgnRmFpbGVkIHRvIGdldCBXaWtpIHJlc291cmNlcycpO1xyXG5cdFx0XHRcdFx0ICAgIC8vfSwgODAwMCk7XHJcblxyXG5cdFx0XHQgICAgXHRcdHZhciBhYm91dENpdHkgPSAnJztcclxuXHRcdFx0ICAgIFx0XHQvLyBhamF4IHJlcXVlc3QgdG8gcmVjZWl2ZSBicmllZiBpbmZvcm1hdGlvbiBhYm91dCBlYWNoIGNpdHkgaW4gd2lraXBlZGlhIHRoYXQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBpbmZvd2luZG93IGNvbnRlbnRcclxuXHRcdFx0XHRcdFx0JC5hamF4KHtcclxuXHRcdFx0XHRcdCAgICAgICAgdXJsOiB3aWtpQWJvdXRVcmwsXHJcblx0XHRcdFx0XHQgICAgICAgIGRhdGFUeXBlOiAnanNvbnAnLFxyXG5cdFx0XHRcdFx0ICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0ICAgICAgICBcdC8vIGhhbmRsZSByZXNwb25zZSB3aXRoIGhhbmRsZVdpa2lBYm91dCBmdW5jdGlvblxyXG5cdFx0XHRcdFx0ICAgICAgICBcdGhhbmRsZVdpa2lBYm91dChyZXNwb25zZSk7XHJcblx0XHRcdFx0XHQgICAgICAgICAgICAvL2NsZWFyVGltZW91dCh3aWtpQXJ0aWNsZVJlcXVlc3RUaW1lb3V0KTtcclxuXHRcdFx0XHRcdCAgICAgICAgfSxcclxuXHRcdFx0XHRcdCAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh4aHIsIGFqYXhPcHRpb25zLCB0aHJvd25FcnJvcikge1xyXG5cdFx0XHRcdFx0ICAgICAgICBcdC8vIGFsZXJ0IGlmIGFqYXggcmVxdWVzdCB3YXMgbm90IGV4ZWN1dGVkIGNvcnJlY3RseVxyXG5cdFx0XHRcdFx0XHQgICAgICAgIGFsZXJ0KHhoci5zdGF0dXMgKyAnIGZhaWxlZCB0byBnZXQgV2lraSByZXNvdXJjZXMgZm9yIGNpdHkgJyArIGNpdHkgKyAnXFxuVXJsIHJlcXVlc3RlZDogXFxuJyArIHdpa2lBYm91dFVybCk7XHJcblx0XHRcdFx0XHRcdCAgICB9XHJcblx0XHRcdFx0XHQgICAgfSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBmdW5jdGlvbiB0byBoYW5kbGUgYWpheCByZXF1ZXN0XHJcblx0XHRcdFx0ICAgIFx0Ly8gcGFyYW1ldGVyOlxyXG5cdFx0XHRcdCAgICBcdC8vXHRcdGRhdGEgLSBkYXRhIHJlY2VpdmVkIGZyb20gd2lraSwgY29udGF0aW5zIGxpc3Qgb2YgYXJ0aWNsZXMgZm9yIHBhcnRpY3VsYXIgY2l0eS5cclxuXHRcdFx0XHRcdFx0dmFyIGhhbmRsZVdpa2lBYm91dCA9IGZ1bmN0aW9uKGRhdGEpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBleHRyYWN0IGJyaWVmIGluZm9ybWF0aW9uIGZyb20gcmVzcG9uc2VcclxuXHRcdFx0XHRcdFx0XHRhcnRpY2xlT2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzKGRhdGEucXVlcnkucGFnZXMpO1xyXG5cdFx0XHRcdFx0XHRcdGtleSA9IGFydGljbGVPYmplY3RLZXlzWzBdO1xyXG5cdFx0XHRcdFx0XHRcdHdpa2lBcnRpY2xlID0gZGF0YS5xdWVyeS5wYWdlc1trZXldLmV4dHJhY3Q7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIGNyZWF0ZSBjb250ZW50IHRvIGJlIGRpc3BsYXllZCBpbiBpbmZvd2luZG93XHJcblx0XHRcdFx0XHRcdFx0Ly8gaXQgaW5jbHVkZTpcclxuXHRcdFx0XHRcdFx0XHQvL1x0aW5mb3JtYXRpb24gYWJvdXQgdmlzaXRcclxuXHRcdFx0XHRcdFx0XHQvL1x0YnJpZWYgaW5mb3JtYXRpb24gYWJvdXQgY2l0eSBmcm9tIHdpa2lwZWRpYVxyXG5cdFx0XHRcdFx0XHRcdC8vXHRsaXN0IG9mIGxpbmtzIG9uIGFydGljbGVzIGFib3V0IGNpdHkgYW5kIGFyb3VuZCBpdCBpbiB3aWtpcGVkaWFcclxuXHRcdFx0XHRcdFx0XHR2YXIgY29udGVudCA9ICc8ZGl2IGlkPVwiaXctY29udGFpbmVyXCI+JyArXHJcblx0XHRcdFx0ICAgICAgICAgICAgXHQgICAgICAgICAgXHQnPGRpdiBjbGFzcz1cIml3LXRpdGxlXCI+JyArIGxvYy5jb250aW5lbnQoKSArICcsICcgKyBsb2MuY291bnRyeSgpICsgJywgJyArIGxvYy5jaXR5KCkgKyAnPC9kaXY+JyArXHJcblx0XHRcdFx0ICAgICAgICAgICAgXHQgICAgICAgICAgXHQnPGhyIGNsYXNzPVwibGluZVwiPicgK1xyXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgIFx0XHQgIFx0JzxkaXYgY2xhc3M9XCJpdy1jb250ZW50XCI+JyArXHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgIFx0ICBcdFx0JzxkaXYgY2xhc3M9XCJpdy1zdWJUaXRsZVwiPlZpc2l0IGluZm88L2Rpdj4nICtcclxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgXHQgIFx0XHQnPHNwYW4gY2xhc3M9XCJob3RlbFwiPicgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0XHRcdFx0JzxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1ob21lXCI+PC9zcGFuPicgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0XHRcdFx0JzxzdHJvbmc+IEhvdGVsOiA8L3N0cm9uZz4nICtcclxuXHRcdFx0XHRcdFx0XHRcdCAgICBcdFx0XHRcdCc8c3Bhbj4nICsgbG9jLmhvdGVsKCkgKyAnPC9zcGFuPicgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0XHRcdCc8L3NwYW4+JyArXHJcblx0XHRcdFx0XHRcdFx0XHQgICAgXHRcdFx0Jzxicj4nICtcclxuXHRcdFx0XHRcdFx0XHRcdCAgICBcdFx0XHQnPHNwYW4gY2xhc3M9XCJhZGRyZXNzXCI+JyArXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JzxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1ib29rXCI+PC9zcGFuPicgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0XHRcdFx0JzxzdHJvbmc+IEhvdGVsIGFkZHJlc3M6IDwvc3Ryb25nPicgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0XHRcdFx0JzxzcGFuPicgKyBsb2MuYWRkcmVzcygpICsgJzwvc3Bhbj4nICtcclxuXHRcdFx0XHRcdFx0XHRcdCAgICBcdFx0XHQnPC9zcGFuPicgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0XHRcdCc8YnI+JyArXHJcblx0XHRcdFx0XHRcdFx0XHQgICAgXHRcdFx0JzxzcGFuIGNsYXNzPVwiY29tcGFueVwiPicgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0XHRcdFx0JzxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi11c2VyXCI+PC9zcGFuPicgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0XHRcdFx0JzxzdHJvbmc+IENvbXBhbnk6IDwvc3Ryb25nPicgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0XHRcdFx0JzxzcGFuPicgKyBsb2MuY29tcGFueSgpICsgJzwvc3Bhbj4nICtcclxuXHRcdFx0XHRcdFx0XHRcdCAgICBcdFx0XHQnPC9zcGFuPicgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0XHRcdCc8aHIgY2xhc3M9XCJsaW5lXCI+JyArXHJcblx0XHRcdFx0XHRcdFx0XHQgICAgXHRcdFx0JzxkaXYgY2xhc3M9XCJpdy1zdWJUaXRsZVwiPkFib3V0ICcgKyBsb2MuY2l0eSgpICsgJzwvZGl2PicgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0XHRcdHdpa2lBcnRpY2xlICtcclxuXHRcdFx0XHRcdFx0XHRcdCAgICBcdFx0XHQnPGhyIGNsYXNzPVwibGluZVwiPicgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0XHRcdCc8ZGl2IGNsYXNzPVwiaXctc3ViVGl0bGVcIj5PdGhlciB3aWtpcGVkaWEgYXJ0aWNsZXM8L2Rpdj4nICtcclxuXHRcdFx0XHRcdFx0XHRcdCAgICBcdFx0XHQnPHVsPicgKyB3aWtpQXJ0aWNsZUxpc3QgKyAnPC91bD4nICtcclxuXHRcdFx0XHRcdFx0XHRcdCAgICBcdFx0JzwvZGl2PicgK1xyXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgXHQgIFx0JzxkaXYgY2xhc3M9XCJpdy1ib3R0b20tZ3JhZGllbnRcIj48L2Rpdj4nICtcclxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICBcdFx0ICAnPC9kaXY+JztcclxuXHJcblx0XHRcdCAgICAgICAgICAgICAgICAvLyBhIG5ldyBJbmZvIFdpbmRvdyBpcyBjcmVhdGVkIGFuZCBzZXQgY29udGVudFxyXG5cdFx0XHRcdFx0XHRcdHZhciBpbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coe1xyXG5cdFx0XHRcdFx0XHRcdCAgIFx0Y29udGVudDogY29udGVudCxcclxuXHRcdFx0XHRcdFx0XHQgICAgbWF4V2lkdGg6IDM1MFxyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyB0aGlzIGV2ZW50IGV4cGVjdHMgYSBjbGljayBvbiBhIG1hcmtlclxyXG5cdFx0XHRcdFx0XHRcdC8vIHdoZW4gdGhpcyBldmVudCBpcyBmaXJlZCB0aGUgSW5mbyBXaW5kb3cgaXMgb3BlbmVkLlxyXG5cdFx0XHRcdFx0XHRcdGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRtb2RlbC5sYXllci5zZXRNYXAobnVsbCk7XHJcblx0XHRcdFx0XHRcdFx0XHRpbmZvd2luZG93Lm9wZW4obWFwLCBtYXJrZXIpO1xyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBldmVudCB0aGF0IGNsb3NlcyB0aGUgSW5mbyBXaW5kb3cgd2l0aCBhIGNsaWNrIG9uIHRoZSBtYXBcclxuXHRcdFx0XHRcdFx0XHRnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXAsICdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aW5mb3dpbmRvdy5jbG9zZSgpO1xyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdCAgICB9O1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdCAgICBzZWxmLmluaXRNYXAoKTtcclxuXHRcdFx0Ly9pbml0aWFsaXplIGxvY2F0aW9ucyBsaXN0IGFjY29yZGluZyB0byBsb2NhdGlvbnMgaW4gbW9kZWxcclxuXHRcdFx0c2VsZi5sb2NhdGlvbnNMaXN0ID0ga28ub2JzZXJ2YWJsZUFycmF5KFtdKTtcclxuXHRcdFx0bW9kZWwubG9jYXRpb25zLmZvckVhY2goZnVuY3Rpb24obG9jYXRpb25JdGVtKSB7XHJcblx0XHRcdFx0c2VsZi5sb2NhdGlvbnNMaXN0LnB1c2gobmV3IExvY2F0aW9uKGxvY2F0aW9uSXRlbSkpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdHNlbGYuY2xpY2tNYXJrZXIobW9kZWwubWFwLCBtb2RlbC5sYXllcik7XHJcblx0XHRcdHNlbGYuYWRkSW5mb1dpbmRvdyhtb2RlbC5tYXApO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBpbml0aWFsaXplIG1hcCwgbWFya2VzLCBpbmZvd2luZG93IGFuZCBhbGwgbmVjY2Vzc2FyeSBvYnNlcnZhYmxlc1xyXG5cdFx0c2VsZi5pbml0aWFsaXplKCk7XHJcblxyXG5cdFx0Ly8gc2V0IGJpZyBwaG90byB3aWR0aCBhbmQgaGVpZ2h0IGFjY29yZGluZyB0byBhdmFsYWlibGUgYXJlYSB0byBkaXNwbGF5XHJcblx0XHRzZWxmLnBob3Rvc1dpZHRoID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XHJcblx0ICAgIFx0aWYgKHNlbGYud2luZG93V2lkdGgoKSA+IDcwMClcclxuXHRcdFx0XHRyZXR1cm4gKHNlbGYud2luZG93V2lkdGgoKSAtIDM3MCk7XHJcblx0XHRcdGVsc2VcclxuXHQgICAgXHRcdHJldHVybiAoc2VsZi53aW5kb3dXaWR0aCgpIC0gNjApO1xyXG5cdCAgICB9KTtcclxuXHJcblx0ICAgIC8vIGZpbHRlciBsb2NhdGlvbnMgYXJyYXkgdG8gZGlzcGxheSBpbiByaWdodCBzaWRlYmFyIGFjY29yZGlueSB0byBzZWFyY2ggaW5wdXQgdmFsdWVcclxuXHQgICAgLy8gaWYgc2VhcmNoIGlzIGVtcHR5IC0gZGlzcGxheSBhbGwgbG9jYXRpb25zXHJcblx0ICAgIC8vIGlmIHNlYXJjaCBpcyBub3QgZW1wdHkgYW5kIHRoZXJlIGFyZSBjb250aW5lbnQsIGNvdW50cnksIGNpdHksIHlhZXIgb3IgbW9udGggaW4gc2VhcmNoXHJcblx0ICAgIC8vIHRoYXQgaXMgcHJlc2VudGVkIGluIGFycmF5IG9mIGxvY2F0aW9ucyB0aGVuIGRpc3BsYXkgbG9jYXRpb25zIGFjY29yZGluZyB0byB0aGlzIHNlYXJjaFxyXG5cdCAgICAvLyBvdGhlcndpc2UgZG9uJ3QgZGlzcGxheSBhbnl0aGluZ1xyXG5cdFx0c2VsZi5maWx0ZXJlZEl0ZW1zID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdC8vIHJlYWQgc2VhcmNoIGlucHV0IGJveFxyXG5cdFx0XHR2YXIgZmlsdGVyID0gc2VsZi5zZWFyY2hRdWVyeSgpO1xyXG5cdFx0XHRpZiAoc2VsZi5zZWFyY2hRdWVyeSgpKVxyXG5cdFx0ICAgIFx0ZmlsdGVyID0gZmlsdGVyLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdFx0ICAgIC8vIGlmIHNlYXJjaCBpcyBlbXB0eSB3ZSBzaG91bGQgZGlzcGxheSBhbGwgbG9jYXRpb25zXHJcblx0XHQgICAgaWYgKCFmaWx0ZXIpIHtcclxuXHRcdCAgICBcdC8vIHNldCBhbGwgbWFya2VycyB0byB2aXNpYmxlIHN0YXRlXHJcblx0XHQgICAgXHRrby51dGlscy5hcnJheUZvckVhY2goc2VsZi5sb2NhdGlvbnNMaXN0KCksIGZ1bmN0aW9uIChsb2MpIHtcclxuXHRcdCAgICBcdFx0bG9jLm1hcmtlcigpLnNldFZpc2libGUodHJ1ZSk7XHJcblx0XHQgICAgXHR9KTtcclxuXHRcdCAgICBcdC8vIHNldCBhbGwgbG9jYXRpb25zIHZpc2libGVcclxuXHRcdCAgICAgICAgcmV0dXJuIHNlbGYubG9jYXRpb25zTGlzdCgpO1xyXG5cdFx0ICAgIC8vIGVsc2UgaWYgc2VhcmNoIGlzIG5vdCBlbXB0eVxyXG5cdFx0ICAgIH0gZWxzZSB7XHJcblx0XHQgICAgXHQvLyBzZXQgYWxsIG1hcmtlcnMgaW52aXNpYmxlIChsYXRlciB3ZSB3aWxsIGRpc3BsYXkgb25seSByZXF1aXJlZCBtYXJrZXJzKVxyXG5cdFx0ICAgIFx0a28udXRpbHMuYXJyYXlGb3JFYWNoKHNlbGYubG9jYXRpb25zTGlzdCgpLCBmdW5jdGlvbiAobG9jKSB7XHJcblx0XHQgICAgXHRcdGxvYy5tYXJrZXIoKS5zZXRWaXNpYmxlKGZhbHNlKTtcclxuXHRcdCAgICBcdH0pO1xyXG5cdFx0ICAgIFx0Ly8gZmlsdGVyIG9ubHkgZm91bmQgbG9jYXRpb25zIGluIHJpZ2h0IHNpZGViYXJcclxuXHRcdCAgICAgICAgdmFyIG1hdGNoID0ga28udXRpbHMuYXJyYXlGaWx0ZXIoc2VsZi5sb2NhdGlvbnNMaXN0KCksIGZ1bmN0aW9uKGl0ZW0pIHtcclxuXHRcdCAgICAgICAgXHR2YXIgbWF0Y2hpbmcgPSAtMTtcclxuXHRcdCAgICAgICAgXHQvLyBsb29wIHRocm91Z2ggYWxsIHNlYXJjaGFibGUgZmllbGRzXHJcblx0XHQgICAgICAgIFx0a28udXRpbHMuYXJyYXlGb3JFYWNoKHNlbGYuY29sdW1uc1RvU2VhcmNoKCksIGZ1bmN0aW9uIChjKSB7XHJcblx0XHQgICAgICAgIFx0XHQvLyBjb252ZXJ0IHNlYXJjaGFibGUgZmlsZWQgdG8gc3RyaW5nIGlmIGl0IGlzIGEgbnVtYmVyXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gaXRlbVtjXSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gdmFsLnRvU3RyaW5nKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAvLyBkZXJ0ZW1pbmUgbG9jYXRpb25zIHRoYXQgbWF0Y2ggc2VhcmNoIHF1ZXJ5XHJcblx0ICAgICAgICAgICAgICAgICAgICBtYXRjaGluZys9IHZhbC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyLnRvTG93ZXJDYXNlKCkpKzE7XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hpbmc+PTA7XHJcblx0XHQgICAgICAgICAgICAvL3JldHVybiBzdHJpbmdTdGFydHNXaXRoKGl0ZW0uY2l0eSgpLnRvTG93ZXJDYXNlKCksIGZpbHRlcik7XHJcblx0XHQgICAgICAgIH0pO1xyXG5cdFx0ICAgICAgICAvLyBzaG93IG9ubHkgdGhvc2UgbWFya2VycyB0aGF0IG1hdGNoIHNlYXJjaCBxdWVyeVxyXG5cdFx0ICAgICAgICBmb3IgKHZhciBsb2MgaW4gbWF0Y2gpXHJcblx0XHQgICAgICAgIFx0bWF0Y2hbbG9jXS5tYXJrZXIoKS5zZXRWaXNpYmxlKHRydWUpO1xyXG5cdFx0ICAgICAgICByZXR1cm4gbWF0Y2g7XHJcblx0XHQgICAgfVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gZnVuY3Rpb24gdG8gc2hvdy9oaWRlIHJpZ2h0IHNpZGViYXJcclxuXHQgICAgc2VsZi50b2dnbGVIaWRkZW5SaWdodCA9IGZ1bmN0aW9uKCkge1xyXG5cdCAgICBcdC8vIGlmIGl0IGlzIGhpZGRlbiBzaG93IGl0IGFuZCB2aWNlIHZlcnNhXHJcblx0ICAgICAgICBzZWxmLmlzSGlkZGVuUmlnaHQoIXNlbGYuaXNIaWRkZW5SaWdodCgpKTtcclxuXHQgICAgICAgIC8vIGlmIGxlZnQgbWVudSBpcyBzaG93biBoaWRlIGl0XHJcblx0ICAgICAgICBpZiAoIXNlbGYuaXNIaWRkZW5MZWZ0KCkpXHJcblx0ICAgICAgICAgICAgc2VsZi50b2dnbGVIaWRkZW5MZWZ0KCk7XHJcblx0ICAgIH07XHJcblxyXG5cdFx0Ly8gZnVuY3Rpb24gdG8gc2hvdy9oaWRlIGxlZnQgc2lkZWJhclxyXG5cdCAgICBzZWxmLnRvZ2dsZUhpZGRlbkxlZnQgPSBmdW5jdGlvbigpIHtcclxuXHQgICAgICAgIHNlbGYuaXNIaWRkZW5MZWZ0KCFzZWxmLmlzSGlkZGVuTGVmdCgpKTtcclxuXHQgICAgfTtcclxuXHJcblx0XHQvLyBmdW5jdGlvbiB0byBjZW50ZXIgYW5kIHpvb20gb24gbWFya2VyIHdoZW4gd2UgY2xpY2sgb24gbG9jYXRpb24gaW4gcmlnaHQgc2lkZWJhclxyXG5cdFx0Ly8gcGFyYW1ldGVyOlxyXG5cdCAgICAvLyBcdFx0bG9jYXRpb24gLSBzZWxlY3RlZCBmcm9tIHJpZ2h0IHNpZGViYXIgbG9jYXRpb25cclxuXHRcdHNlbGYuc2hvd01hcmtlciA9IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XHJcblx0XHRcdC8vIGRlcnRlbWluZSBjdXJyZW50IG1hcmtlciBhbmQgaXRzIGxvY2F0aW9uXHJcblx0XHRcdHZhciBteUxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCkrMC4wNixsb2NhdGlvbi5sbmcoKSswLjA0KTtcclxuXHRcdFx0dmFyIG1hcmtlciA9IGxvY2F0aW9uLm1hcmtlcigpO1xyXG5cdFx0XHQvLyBjZW50ZXIgbWFwIHRvIGN1cnJlbnQgbG9jYXRpb24sIHpvb20gaXQsIHJlbW92ZSBsYXllciBhbmQgb3BlbiBpbmZvd2luZG93XHJcblx0XHRcdG1vZGVsLm1hcC5zZXRDZW50ZXIobXlMYXRMbmcpO1xyXG5cdFx0XHRtb2RlbC5tYXAuc2V0Wm9vbSgxMik7XHJcblx0XHRcdG1vZGVsLmxheWVyLnNldE1hcChudWxsKTtcclxuXHRcdFx0Z29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXJrZXIsICdjbGljaycpO1xyXG5cdFx0XHQvLyB0b2dnbGUgYW5vbWF0aW9uIG9mIG1hcmtlciBhbmQgbGF5ZXIgdGhhdCBmaWxsIGluIHZpc2l0ZWQgY291bnRyeVxyXG5cdFx0XHRpZiAobWFya2VyLmdldEFuaW1hdGlvbigpICE9PSBudWxsKVxyXG5cdCAgIFx0XHRcdG1hcmtlci5zZXRBbmltYXRpb24obnVsbCk7XHJcblx0ICBcdFx0ZWxzZVxyXG5cdCAgICBcdFx0bWFya2VyLnNldEFuaW1hdGlvbihnb29nbGUubWFwcy5BbmltYXRpb24uQk9VTkNFKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gZnVuY3Rpb24gdG8gcmVzdG9yZSBtYXAgdG8gaW5pdGlhbCBzdGF0ZTpcclxuXHRcdC8vXHRcdHpvb20gb3V0IGl0XHJcblx0XHQvL1x0XHRjZW50ZXIgaXQgdG8gc2hvdyBhbGwgbWFya2Vyc1xyXG5cdFx0Ly9cdFx0cmVzdG9yZSBsYXllclxyXG5cdFx0c2VsZi5mdWxsTWFwID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdG15TGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZygzOS4xMDQ4OTIsIDkuNDU2NjU2KTtcclxuXHRcdFx0bW9kZWwubWFwLnNldENlbnRlcihteUxhdExuZyk7XHJcblx0XHRcdG1vZGVsLm1hcC5zZXRab29tKDMpO1xyXG5cdFx0XHRtb2RlbC5sYXllci5zZXRNYXAobW9kZWwubWFwKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gc2hvdyBwaG90b3MgaW4gbGVmdCBzaWRlYmFyIGFjY29yZGluZyB0byBzZWxlY3RlZCBsb2NhdGlvblxyXG5cdCAgICAvLyBwYXJhbWV0ZXI6XHJcblx0ICAgIC8vIFx0XHRsb2NhdGlvbiAtIHNlbGVjdGVkIGZyb20gcmlnaHQgc2lkZWJhciBsb2NhdGlvblxyXG5cdCAgICBzZWxmLnNob3dQaG90b3MgPSBmdW5jdGlvbihsb2NhdGlvbikge1xyXG5cdCAgICBcdC8vIGluaXRpYWxpemUgdmFsdWVzIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gbGVmdCBzaWRlYmFyXHJcblx0ICAgIFx0c2VsZi5jdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvbjtcclxuXHQgICAgXHRzZWxmLmN1cnJlbnRQaG90b3MoW10pO1xyXG5cdCAgICBcdHNlbGYuY3VycmVudEJpZ1Bob3RvKCk7XHJcblxyXG5cdCAgICBcdC8vIHByZXZpb3VzIGVycm9yIGhhbmRsZXIgZnVuY3Rpb25cclxuXHRcdFx0Ly8gZG9uJ3QgcmVtb3ZlIGl0IGZvciBmdXJ0aGVyIGludmVzdGlnYXRpb25cclxuXHRcdFx0Ly92YXIgZmxpY2tyQ29sbGVjdGlvblJlcXVlc3RUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly9cdGNvbnNvbGUubG9nKCdmYWlsIGluIGZsaWNrckNvbGxlY3Rpb25SZXF1ZXN0VGltZW91dCcpO1xyXG5cdFx0XHQvLyAgICBhbGVydCgnRmFpbGVkIHRvIGdldCBGbGlja3IgcmVzb3VyY2VzJyk7XHJcblx0XHRcdC8vfSwgODAwMCk7XHJcblxyXG5cclxuXHRcdFx0Ly8gdXJsIHRvIHVzZSBGbGlja3IgQVBJIHRvIHJlY2VpdmUgYWxsIG15IGFsYnVtc1xyXG5cdFx0XHR2YXIgcGhvdG9zZXRzID0gJ2h0dHBzOi8vYXBpLmZsaWNrci5jb20vc2VydmljZXMvcmVzdC8/bWV0aG9kPWZsaWNrci5waG90b3NldHMuZ2V0TGlzdCZhcGlfa2V5PWM2OWY0ZmI1Njg1MTU5ZTM3MTk2Y2I4YjJiNTI3M2NiJnVzZXJfaWQ9MTM2NDM0OTIwJTQwTjA0JmZvcm1hdD1qc29uJm5vanNvbmNhbGxiYWNrPTEnO1xyXG5cdFx0XHQvLyBhamF4IHJlcXVlc3QgdG8gcmVjZWl2ZSBhbGJ1bXMgb2YgcGhvdG9zXHJcblx0XHRcdCQuYWpheCh7XHJcblx0XHRcdCAgICB1cmw6IHBob3Rvc2V0cyxcclxuXHRcdFx0ICAgIGRhdGFUeXBlOiAnanNvbicsXHJcblx0XHRcdCAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHQgICAgXHQvLyByZXNwb25zZSB3aWxsIGJlIGhhbmRsZWQgYnkgdGhpcyBmdW5jdGlvblxyXG5cdFx0XHQgICAgICAgIGhhbmRsZVBob3Rvc2V0cyhyZXNwb25zZSk7XHJcblx0XHRcdCAgICAgICAgLy9jbGVhclRpbWVvdXQoZmxpY2tyQ29sbGVjdGlvblJlcXVlc3RUaW1lb3V0KTtcclxuXHRcdFx0ICAgIH0sXHJcblx0XHQgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBhamF4T3B0aW9ucywgdGhyb3duRXJyb3IpIHtcclxuXHRcdCAgICAgICAgXHQvLyBhbGVydCBpZiBhamF4IHJlcXVlc3Qgd2FzIG5vdCBleGVjdXRlZCBjb3JyZWN0bHlcclxuXHRcdFx0ICAgICAgICBhbGVydCh4aHIuc3RhdHVzICsgJyBmYWlsZWQgdG8gZ2V0IEZsaWNrciByZXNvdXJjZXMgZm9yIGNpdHkgJyArIGxvY2F0aW9uLmNpdHkoKSArICdcXG5VcmwgcmVxdWVzdGVkOiBcXG4nICsgcGhvdG9zZXRzKTtcclxuXHRcdFx0ICAgIH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHQvLyBoYW5kbGUgYWpheCByZXF1ZXN0IHJlc3VsdHNcclxuXHRcdFx0Ly8gdGhpcyBmdW5jdGlvbiBleHRyYWN0cyBpZHMgb2YgRmxpY2tyIGFsYnVtcywgcmVxdWVzdHMgcGhvdG9zIGluIHJlcXVpcmVkIGFsYnVtXHJcblx0XHRcdC8vIGFuZCBhc3NpZ24gdGhlc2UgdmFsdWVzIHRvIGFwcHJvcHJpYXRlIHZhcmlhYmxlcyB0byBkaXNwbGF5IHRoZW0gaW4gbGVmdCBzaWRlYmFyXHJcblx0XHRcdC8vIHBhcmFtdGVyOlxyXG5cdFx0XHQvL1x0XHRyZXNwb25zZURhdGEgLSBkYXRhIHJlY2VpdmVkIGZyb20gYWpheCByZXF1ZXN0XHJcblx0XHRcdHZhciBoYW5kbGVQaG90b3NldHMgPSBmdW5jdGlvbihyZXNwb25zZURhdGEpIHtcclxuXHRcdFx0XHQvLyBkZXJ0ZW1pbmUgYWxidW1zIGZyb20gcmVzcG9uc2VcclxuXHRcdFx0ICAgIHZhciBwaG90b3NldHNMaXN0ID0gcmVzcG9uc2VEYXRhLnBob3Rvc2V0cy5waG90b3NldDtcclxuXHRcdFx0ICAgIC8vIGxvb3AgdGhyb3VnaCBhbGwgYWxidW1zLCBkZXJ0ZW1pbmUgYWxidW0gaWQgZm9yIHJlcXVpcmVkIGNpdHkgKGJ5IG5hbWUgb2YgYWxidW0pXHJcblx0XHRcdCAgICAvLyBhbmQgZG93bmxvYWQgcGhvdG9zIGZyb20gdGhpcyBhbGJ1bVxyXG5cdFx0XHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwaG90b3NldHNMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdCAgICBcdHZhciBjaXR5ID0gcGhvdG9zZXRzTGlzdFtpXS50aXRsZS5fY29udGVudDtcclxuXHRcdFx0ICAgIFx0Ly8gaWYgbmFtZSBvZiBhbGJ1bSBpcyBlcXVhbCB0byBuYW1lIG9mIGNpdHkgZnJvbSByZXF1ZXN0ZWQgbG9jYXRpb24gaGFuZGxlIHBob3RvcyBmcm9tIGFsYnVtXHJcblx0XHRcdCAgICBcdGlmIChjaXR5ID09IHNlbGYuY3VycmVudExvY2F0aW9uLmNpdHkoKSkge1xyXG5cdFx0XHRcdCAgICBcdHZhciBwaG90b3NldElkID0gcGhvdG9zZXRzTGlzdFtpXS5pZDtcclxuXHRcdFx0XHQgICAgICAgIGdldFBob3RvcyhjaXR5LCBwaG90b3NldElkKTtcclxuXHRcdFx0XHQgICAgICAgIGJyZWFrO1xyXG5cdFx0XHQgICAgXHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0Ly8gZnVuY3Rpb24gdG8gaGFuZGxlIHBob3RvcyBmcm9tIGFsYnVtXHJcblx0XHRcdC8vIHBhcmFtZXRlcnM6XHJcblx0XHRcdC8vXHRcdGNpdHkgLSBjaXR5IG9mIGNob29zZW4gbG9jYXRpb25cclxuXHRcdFx0Ly9cdFx0cGhvdG9zZXRJZCAtIGlkIG9mIHBob3Rvc2V0IGZyb20gd2hpY2ggd2Ugd2lsbCBkaXNwbGF5IHBob3Rvc1xyXG5cdFx0XHR2YXIgZ2V0UGhvdG9zID0gZnVuY3Rpb24oY2l0eSwgcGhvdG9zZXRJZCkge1xyXG5cclxuXHRcdFx0XHQvLyBwcmV2aW91cyBlcnJvciBoYW5kbGVyIGZ1bmN0aW9uXHJcblx0XHRcdFx0Ly8gZG9uJ3QgcmVtb3ZlIGl0IGZvciBmdXJ0aGVyIGludmVzdGlnYXRpb25cclxuXHRcdFx0XHQvL3ZhciBmbGlja3JQaG90b3NSZXF1ZXN0VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdCAgICAvL1x0Y29uc29sZS5sb2coJ2ZhaWwgaW4gZmxpY2tyUGhvdG9zUmVxdWVzdFRpbWVvdXQnKTtcclxuXHRcdFx0ICAgIC8vICAgIGFsZXJ0KCdGYWlsZWQgdG8gZ2V0IEZsaWNrciByZXNvdXJjZXMnKTtcclxuXHRcdFx0ICAgIC8vfSwgODAwMCk7XHJcblxyXG5cdFx0XHRcdC8vIHVybCB0byB1c2UgRmxpY2tyIEFQSSB0byByZWNlaXZlIGFsbCBwaG90b3NcclxuXHRcdFx0XHR2YXIgcGhvdG9zID0gJ2h0dHBzOi8vYXBpLmZsaWNrci5jb20vc2VydmljZXMvcmVzdC8/bWV0aG9kPWZsaWNrci5waG90b3NldHMuZ2V0UGhvdG9zJmFwaV9rZXk9YzY5ZjRmYjU2ODUxNTllMzcxOTZjYjhiMmI1MjczY2ImcGhvdG9zZXRfaWQ9JyArIHBob3Rvc2V0SWQgKyAnJnVzZXJfaWQ9MTM2NDM0OTIwJTQwTjA0JmZvcm1hdD1qc29uJm5vanNvbmNhbGxiYWNrPTEnO1xyXG5cclxuXHRcdFx0XHQvLyBpZiBwaG90b3Mgd2FzIHJlY2VpdmVkIGZyb20gc29tZSBwcmV2aW91cyByZXF1ZXN0IHRoZXkgYWxyZWFkeSBzdG9yZWQgaW4gbW9kZWwgYW5kIHdlIGNhbiB1c2UgdGhlbVxyXG5cdFx0XHRcdC8vIHdpdGhvdXQgYWRkaXRpb25hbCBhamF4IHJlcXVlc3RcclxuXHRcdFx0XHRpZiAoc2VsZi5jdXJyZW50TG9jYXRpb24ucGhvdG9zKCkubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHQvLyBmaWxsIGFycmF5IHdpdGggYWRkcmVzc2VzIG9mIGFsbCBwaG90b3MgZnJvbSBhbGJ1bSBhbmQgc2V0IGJpZyBwaG90b1xyXG5cdFx0XHRcdFx0c2VsZi5jdXJyZW50UGhvdG9zKHNlbGYuY3VycmVudExvY2F0aW9uLnBob3RvcygpKTtcclxuXHRcdFx0XHRcdHNlbGYuY3VycmVudEJpZ1Bob3RvKHtcclxuXHRcdFx0XHRcdFx0aW1nQWx0OiBzZWxmLmN1cnJlbnRMb2NhdGlvbi5waG90b3MoKVswXS5pbWdBbHQsXHJcblx0XHRcdFx0XHRcdGltZ1NyYzogc2VsZi5jdXJyZW50TG9jYXRpb24ucGhvdG9zKClbMF0uaW1nU3JjLFxyXG5cdFx0XHRcdFx0XHRpbWdTaXplOiBkZXRlcm1pbmVCaWdTaXplKClcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0Ly8gc2V0IHNpemUgb2YgYmlnIHBob3RvIHRvIGJlIGZpdCBpbiBkaXNwbGF5aW5nIGFyZWEgYW5kIHRvIGF2b2lkIG9mIGFwcGVhcmluZyBzY3JvbGxiYXJzXHJcblx0XHRcdFx0XHRzZWxmLnNldEJpZ1Bob3RvU2l6ZShzZWxmLmN1cnJlbnRCaWdQaG90bygpLmltZ1NyYytzZWxmLmN1cnJlbnRCaWdQaG90bygpLmltZ1NpemUpO1xyXG5cdFx0XHRcdFx0Ly9jbGVhclRpbWVvdXQoZmxpY2tyUGhvdG9zUmVxdWVzdFRpbWVvdXQpO1xyXG5cdFx0XHRcdC8vIGlmIHBob3RvcyB3YXMgbm90IHJlcXVlc3RlZCBwcmV2aW91c2x5IHJlcXVlc3QgdGhlbSB2aWEgYWpheCByZXF1ZXN0XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQgICAgJC5hamF4KHtcclxuXHRcdFx0XHQgICAgICAgIHVybDogcGhvdG9zLFxyXG5cdFx0XHRcdCAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdFx0XHQgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0ICAgICAgICBcdC8vIGhhbmRsZSByZXF1ZXN0IGJ5IGhhbmRsZVBob3RvcyBmdW5jdGlvblxyXG5cdFx0XHRcdCAgICAgICAgICAgIGhhbmRsZVBob3RvcyhyZXNwb25zZSk7XHJcblx0XHRcdFx0ICAgICAgICAgICAgLy9jbGVhclRpbWVvdXQoZmxpY2tyUGhvdG9zUmVxdWVzdFRpbWVvdXQpO1xyXG5cdFx0XHRcdCAgICAgICAgfSxcclxuXHRcdFx0XHQgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBhamF4T3B0aW9ucywgdGhyb3duRXJyb3IpIHtcclxuXHRcdFx0XHQgICAgICAgIFx0Ly8gYWxlcnQgaWYgYWpheCByZXF1ZXN0IHdhcyBub3QgZXhlY3V0ZWQgY29ycmVjdGx5XHJcblx0XHRcdFx0XHQgICAgICAgIGFsZXJ0KHhoci5zdGF0dXMgKyAnIGZhaWxlZCB0byBnZXQgRmxpY2tyIHJlc291cmNlcyBmb3IgY2l0eSAnICsgY2l0eSArICdcXG5VcmwgcmVxdWVzdGVkOiBcXG4nICsgcGhvdG9zKTtcclxuXHRcdFx0XHRcdCAgICB9XHJcblx0XHRcdFx0ICAgIH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdC8vIGZ1bmN0aW9uIHRvIGRlcnRlbWluZSBzaXplIG9mIGJpZyBwaG90bywgdGhhdCBzaG91bGQgYmUgZG93bmxvYWRlZCBhY2Nyb2RpbmcgdG8gYXZhaWxhYmxlIHNpemUgdG8gZGlzcGxheVxyXG5cdFx0XHR2YXIgZGV0ZXJtaW5lQmlnU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdC8vIGRlcnRlbWluZSBhdmFpbGFibGUgc2l6ZSB0byBkaXNwbGF5XHJcblx0XHRcdFx0dmFyIHNpZGUgPSBNYXRoLm1pbihNYXRoLm1heChzZWxmLndpbmRvd1dpZHRoKCkgLSA5MCwgc2VsZi53aW5kb3dXaWR0aCgpIC0gNDAwKSwgc2VsZi53aW5kb3dIZWlnaHQoKSAtIDI3MCk7XHJcblx0XHRcdFx0dmFyIHBob3RvU2l6ZSA9ICcuanBnJztcclxuXHRcdFx0XHQvLyBkZXJ0ZW1pbmUgc2l6ZSBkZXBlbmRpbmcgZnJvbSBhdmFpbGFibGUgc2l6ZSB0byBkaXNwbGF5IHRvIGRpc3BsYXkgYmlnIHBob3RvXHJcblx0XHRcdFx0aWYgKHNpZGUgPiAzMjAgJiYgc2lkZSA8PSA1MDApXHJcblx0XHRcdFx0XHRwaG90b1NpemUgPSAnX3ouanBnJztcclxuXHRcdFx0XHRlbHNlIGlmIChzaWRlID4gNTAwICYmIHNpZGUgPD0gNjQwKVxyXG5cdFx0XHRcdFx0cGhvdG9TaXplID0gJ19jLmpwZyc7XHJcblx0XHRcdFx0ZWxzZSBpZiAoc2lkZSA+IDY0MCAmJiBzaWRlIDw9IDgwMClcclxuXHRcdFx0XHRcdHBob3RvU2l6ZSA9ICdfYi5qcGcnO1xyXG5cdFx0XHRcdGVsc2UgaWYgKHNpZGUgPiA4MDAgJiYgc2lkZSA8PSAxMDI0KVxyXG5cdFx0XHRcdFx0cGhvdG9TaXplID0gJ19oLmpwZyc7XHJcblx0XHRcdFx0ZWxzZSBpZiAoc2lkZSA+IDEwMjQgJiYgc2lkZSA8PSAxNjAwKVxyXG5cdFx0XHRcdFx0cGhvdG9TaXplID0gJ19rLmpwZyc7XHJcblx0XHRcdFx0ZWxzZSBpZiAoc2lkZSA+IDE2MDApXHJcblx0XHRcdFx0XHRwaG90b1NpemUgPSAnX28uanBnJztcclxuXHRcdFx0XHRyZXR1cm4gcGhvdG9TaXplO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0Ly8gZnVuY3Rpb24gdG8gc2F2ZSB1cmwgb2YgcGhvdG9zIHJlbGF0ZWQgdG8gc2VsZWN0ZWQgbG9jYXRpb25cclxuXHRcdFx0Ly8gcGFyYW10ZXI6XHJcblx0XHRcdC8vXHRcdHJlc3BvbnNlRGF0YSAtIGRhdGEgcmVjZWl2ZWQgZnJvbSBhamF4IHJlcXVlc3RcclxuXHRcdFx0dmFyIGhhbmRsZVBob3RvcyA9IGZ1bmN0aW9uKHJlc3BvbnNlRGF0YSkge1xyXG5cdFx0XHRcdC8vIHNldCBiaWcgcGhvdG8gdG8gZmlyc3QgcGhvdG8gZnJvbSBkb3dubG9hZGVkIGZyb20gYWxidW1cclxuXHRcdFx0XHR2YXIgZmlyc3RQaG90byA9IHJlc3BvbnNlRGF0YS5waG90b3NldC5waG90b1swXTtcclxuXHRcdFx0XHRzZWxmLmN1cnJlbnRCaWdQaG90byh7XHJcblx0XHRcdFx0XHRcdC8vIGFsdCBhdHRyaWJ1dGUgb2YgaW1hZ2VcclxuXHRcdFx0XHRcdFx0aW1nQWx0OiBmaXJzdFBob3RvLnRpdGxlLFxyXG5cdFx0XHRcdFx0XHQvLyB1cmwgb2YgcGhvdG9cclxuXHRcdFx0XHRcdFx0aW1nU3JjOiAnaHR0cHM6Ly9mYXJtJyArXHJcblx0XHQgICAgXHRcdFx0XHRcdCBmaXJzdFBob3RvLmZhcm0gK1xyXG5cdFx0ICAgIFx0XHRcdFx0XHQgJy5zdGF0aWNmbGlja3IuY29tLycgK1xyXG5cdFx0ICAgIFx0XHRcdFx0XHQgZmlyc3RQaG90by5zZXJ2ZXIgK1xyXG5cdFx0ICAgIFx0XHRcdFx0XHQgJy8nICtcclxuXHRcdCAgICBcdFx0XHRcdFx0IGZpcnN0UGhvdG8uaWQgK1xyXG5cdFx0ICAgIFx0XHRcdFx0XHQgJ18nICtcclxuXHRcdCAgICBcdFx0XHRcdFx0IGZpcnN0UGhvdG8uc2VjcmV0LFxyXG5cdFx0ICAgIFx0XHRcdC8vIHNpeiBvZiBwaG90b1xyXG5cdFx0ICAgIFx0XHRcdGltZ1NpemU6IGRldGVybWluZUJpZ1NpemUoKVxyXG5cdFx0ICAgICAgICBcdH0pO1xyXG5cdFx0XHRcdC8vIHNldCBzaXplIG9mIGJpZyBwaG90byB0byBiZSBmaXQgaW4gZGlzcGxheWluZyBhcmVhIGFuZCB0byBhdm9pZCBvZiBhcHBlYXJpbmcgc2Nyb2xsYmFyc1xyXG5cdFx0XHRcdHNlbGYuc2V0QmlnUGhvdG9TaXplKHNlbGYuY3VycmVudEJpZ1Bob3RvKCkuaW1nU3JjK3NlbGYuY3VycmVudEJpZ1Bob3RvKCkuaW1nU2l6ZSk7XHJcblx0XHRcdFx0Ly8gbG9vcCB0aHJvdWdoIGFsbCBwaG90b3NcclxuXHRcdFx0XHQvLyBhZGQgcGhvdG8gdXJsLCBzaXplIGFuZCBhbHQgdGV4dCBpbnRvIG1vZGVsIGFuZCBjdXJyZW50UGhvdG9zXHJcblx0XHQgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCByZXNwb25zZURhdGEucGhvdG9zZXQucGhvdG8ubGVuZ3RoOyBpKyspIHtcclxuXHRcdCAgICAgICAgXHR2YXIgcGggPSByZXNwb25zZURhdGEucGhvdG9zZXQucGhvdG9baV07XHJcblx0XHQgICAgICAgIFx0c2VsZi5jdXJyZW50TG9jYXRpb24ucGhvdG9zLnB1c2goXHJcblx0XHQgICAgICAgIFx0XHR7XHJcblx0XHRcdFx0XHRcdGltZ0FsdDogcGgudGl0bGUsXHJcblx0XHRcdFx0XHRcdGltZ1NyYzogJ2h0dHBzOi8vZmFybScgK1xyXG5cdFx0ICAgIFx0XHRcdFx0XHQgcGguZmFybSArXHJcblx0XHQgICAgXHRcdFx0XHRcdCAnLnN0YXRpY2ZsaWNrci5jb20vJyArXHJcblx0XHQgICAgXHRcdFx0XHRcdCBwaC5zZXJ2ZXIgK1xyXG5cdFx0ICAgIFx0XHRcdFx0XHQgJy8nICtcclxuXHRcdCAgICBcdFx0XHRcdFx0IHBoLmlkICtcclxuXHRcdCAgICBcdFx0XHRcdFx0ICdfJyArXHJcblx0XHQgICAgXHRcdFx0XHRcdCBwaC5zZWNyZXQsXHJcblx0XHQgICAgXHRcdFx0aW1nU2l6ZTogJ19zLmpwZydcclxuXHRcdCAgICBcdFx0XHR9XHJcblx0XHQgICAgICAgIFx0KTtcclxuXHRcdCAgICAgICAgXHRzZWxmLmN1cnJlbnRQaG90b3MucHVzaChcclxuXHRcdCAgICAgICAgXHRcdHtcclxuXHRcdFx0XHRcdFx0aW1nQWx0OiBwaC50aXRsZSxcclxuXHRcdFx0XHRcdFx0aW1nU3JjOiAnaHR0cHM6Ly9mYXJtJyArXHJcblx0XHQgICAgXHRcdFx0XHRcdCBwaC5mYXJtICtcclxuXHRcdCAgICBcdFx0XHRcdFx0ICcuc3RhdGljZmxpY2tyLmNvbS8nICtcclxuXHRcdCAgICBcdFx0XHRcdFx0IHBoLnNlcnZlciArXHJcblx0XHQgICAgXHRcdFx0XHRcdCAnLycgK1xyXG5cdFx0ICAgIFx0XHRcdFx0XHQgcGguaWQgK1xyXG5cdFx0ICAgIFx0XHRcdFx0XHQgJ18nICtcclxuXHRcdCAgICBcdFx0XHRcdFx0IHBoLnNlY3JldCxcclxuXHRcdCAgICBcdFx0XHRpbWdTaXplOiAnX3MuanBnJ1xyXG5cdFx0ICAgIFx0XHRcdH1cclxuXHRcdCAgICAgICAgXHQpO1xyXG5cdFx0ICAgICAgICB9XHJcblx0XHQgICAgfTtcclxuXHJcblx0XHRcdC8vIHNob3cgbGVmdCBzaWRlYmFyIGlmIGl0IGlzIGhpZGRlblxyXG5cdFx0XHRpZiAoc2VsZi5pc0hpZGRlbkxlZnQoKSlcclxuXHQgICAgICAgICAgICBzZWxmLnRvZ2dsZUhpZGRlbkxlZnQoKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gZnVuY3Rpb24gdG8gY2hhbmdlIGJpZyBwaG90byB3aGVuIHNtYWxsIHBob3RvIGluIHRoZSBsaXN0IGlzIGNsaWNrZWRcclxuXHRcdC8vIHBhcmFtZXRlclxyXG5cdFx0Ly9cdFx0cGhvdG8gLSBjbGlja2VkIHRodW1ibmFpbCBvZiBwaG90b1xyXG5cdFx0c2VsZi5jaGFuZ2VCaWdQaG90byA9IGZ1bmN0aW9uKHBob3RvKSB7XHJcblx0XHRcdHZhciBzaXplID0gc2VsZi5jdXJyZW50QmlnUGhvdG8oKS5pbWdTaXplO1xyXG5cdFx0XHRzZWxmLmN1cnJlbnRCaWdQaG90byh7XHJcblx0XHRcdFx0aW1nQWx0OiBwaG90by5pbWdBbHQsXHJcblx0XHRcdFx0XHRcdGltZ1NyYzogcGhvdG8uaW1nU3JjLFxyXG5cdFx0ICAgIFx0XHRcdGltZ1NpemU6IHNpemVcclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIHNldCBzaXplIG9mIGJpZyBwaG90byB0byBiZSBmaXQgaW4gZGlzcGxheWluZyBhcmVhIGFuZCB0byBhdm9pZCBvZiBhcHBlYXJpbmcgc2Nyb2xsYmFyc1xyXG5cdFx0XHRzZWxmLnNldEJpZ1Bob3RvU2l6ZShzZWxmLmN1cnJlbnRCaWdQaG90bygpLmltZ1NyYytzZWxmLmN1cnJlbnRCaWdQaG90bygpLmltZ1NpemUpO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBmdW5jdGlvbiB0aSBkZXRlcm1pbmUgYmlnIHBob3RvIHNpemVcclxuXHRcdC8vIGlmIHdpZHRoLCBoZWlnaHQgb3IgYm90aCBvZiBiaWcgcGhvdG8gaXMgYmlnZ2VyIHRoYW4gYXJlYSB0byBkaXNwbGF5XHJcblx0XHQvLyB0aGVuIHBob3RvIHNob3VsZCBiZSBmaXQgaW4gdGhpcyBhcmVhXHJcblx0XHQvLyBwYXJhbWV0ZXI6XHJcblx0XHQvL1x0XHR1cmwgLSB1cmwgdG8gbG9hZCBiaWcgcGhvdG9cclxuXHRcdHNlbGYuc2V0QmlnUGhvdG9TaXplID0gZnVuY3Rpb24odXJsKSB7XHJcblx0XHRcdC8vIGxvYWQgaW1hZ2VcclxuXHRcdFx0dmFyIGltZyA9IG5ldyBJbWFnZSgpO1xyXG5cdFx0XHRpbWcub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Ly8gZGVydGVtaW5lIGltYWdlIHNpemUgKHdpZHRoIGFuZCBoZWlnaHQpXHJcblx0XHRcdFx0dmFyIGltYWdlID0ge1xyXG5cdFx0XHRcdFx0aDogaW1nLmhlaWdodCxcclxuXHRcdFx0ICAgIFx0dzogaW1nLndpZHRoXHJcblx0XHRcdCAgICB9O1xyXG5cdFx0XHQgICAgLy8gZGVydGVtaW5lIGRpc3BsYXkgYXJlYSBzaXplICh3aWR0aCBhbmQgaGVpZ2h0KVxyXG5cdFx0XHRcdHZhciBoZWlnaHQgPSBzZWxmLndpbmRvd0hlaWdodCgpIC0gMjcwO1xyXG5cdFx0XHRcdHZhciB3aWR0aCA9IE1hdGgubWF4KHNlbGYud2luZG93V2lkdGgoKSAtIDkwLCBzZWxmLndpbmRvd1dpZHRoKCkgLSA0MDApO1xyXG5cdFx0XHRcdC8vIHNldCB3aWR0aCBvciBoZWlnaHQgb2YgYmlnIHBob3RvIHRvIGZpdCBkaXNwbGF5IGFyZWFcclxuXHRcdFx0XHRpZiAod2lkdGggPCBpbWFnZS53ICYmIGhlaWdodCA+IGltYWdlLmgpXHJcblx0XHRcdFx0XHRzZWxmLmJpZ1Bob3RvV2lkdGgod2lkdGgpO1xyXG5cdFx0XHRcdGVsc2UgaWYgKHdpZHRoID4gaW1hZ2UudyAmJiBoZWlnaHQgPCBpbWFnZS5oKVxyXG5cdFx0XHRcdFx0c2VsZi5iaWdQaG90b0hlaWdodChoZWlnaHQpO1xyXG5cdFx0XHRcdGVsc2UgaWYgKGltYWdlLncvd2lkdGggPCBpbWFnZS5oL2hlaWdodClcclxuXHRcdFx0XHRcdHNlbGYuYmlnUGhvdG9IZWlnaHQoaGVpZ2h0KTtcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRzZWxmLmJpZ1Bob3RvV2lkdGgod2lkdGgpO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0aW1nLnNyYyA9IHVybDtcclxuXHRcdH07XHJcblx0fTtcclxuXHJcblx0dmFyIHZtID0gbmV3IHZpZXdNb2RlbCgpO1xyXG5cdGtvLmFwcGx5QmluZGluZ3Modm0pO1xyXG59O1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
=======
var initAll=function(){var o={locations:[{continent:"Europe",country:"France",country_code:"fr",city:"Paris",type:"exact",month:"April",year:"2011",lat:48.854759,lng:2.30508,hotel:"Hôtel Prince",address:"66 Avenue Bosquet, 07. Tour Eiffel - Invalides, Paris, 75007, France",marker:null,company:2,photos:[]},{continent:"Asia",country:"Israel",country_code:"il",city:"Jerusalem",type:"so-so",month:"April",year:"2015",lat:31.778245,lng:35.229397,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]},{continent:"Africa",country:"Egypt",country_code:"eg",city:"Luxor",type:"so-so",month:"September",year:"2010",lat:25.714124,lng:32.649766,hotel:"Not applicable",address:"Not applicable",marker:null,company:10,photos:[]},{continent:"Africa",country:"Egypt",country_code:"eg",city:"Hurghada",type:"so-so",month:"September",year:"2010",lat:27.082086,lng:33.860678,hotel:"Don't remember",address:"Don't remember",marker:null,company:10,photos:[]},{continent:"Asia",country:"Thailand",country_code:"th",city:"Bangkok",type:"exact",month:"September",year:"2011",lat:13.757137,lng:100.502789,hotel:"Siamese Views Lodge",address:"211/21-23 Soi Damneon Klang Nuea, Ratchadamneon Klang Road, Bwonniwet, Pranakorn, Khaosan, Bangkok, 10200, Thailand",marker:null,company:2,photos:[]},{continent:"Asia",country:"Thailand",country_code:"th",city:"Pattaya",type:"exact",month:"September",year:"2011",lat:12.930813,lng:100.880119,hotel:"Inn House",address:"322/1 Pattaya Beach Road Soi 13, Pattaya City, Banglamung, Pattaya, 20260, Thailand",marker:null,company:2,photos:[]},{continent:"North America",country:"United States of America",country_code:"us",city:"New York",type:"so-so",month:"September",year:"2009",lat:40.621153,lng:-73.998114,hotel:"Don't remember",address:"Don't remember",marker:null,company:2,photos:[]},{continent:"North America",country:"United States of America",country_code:"us",city:"Chicago",type:"so-so",month:"September",year:"2009",lat:41.883543,lng:-87.795953,hotel:"Don't remember",address:"Don't remember",marker:null,company:2,photos:[]},{continent:"North America",country:"United States of America",country_code:"us",city:"Niagara Falls",type:"so-so",month:"September",year:"2009",lat:43.090628,lng:-79.058927,hotel:"Don't remember",address:"Don't remember",marker:null,company:2,photos:[]},{continent:"Europe",country:"Germany",country_code:"de",city:"Berlin",type:"exact",month:"November",year:"2011",lat:52.501939,lng:13.384981,hotel:"Holiday Inn Express Berlin City Centre West",address:"Kurfürstenstraße 78, Tiergarten, Berlin, 10787, Germany",marker:null,company:6,photos:[]},{continent:"Europe",country:"Finland",country_code:"fi",city:"Helsinki",type:"so-so",month:"June",year:"2012",lat:60.17104,lng:24.939737,hotel:"Don't remember",address:"Don't remember",marker:null,company:2,photos:[]},{continent:"Europe",country:"Norway",country_code:"no",city:"Oslo",type:"so-so",month:"June",year:"2012",lat:59.913331,lng:10.749411,hotel:"Don't remember",address:"Don't remember",marker:null,company:2,photos:[]},{continent:"Europe",country:"Sweden",country_code:"se",city:"Stockholm",type:"so-so",month:"June",year:"2012",lat:59.32751,lng:18.070844,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]},{continent:"Europe",country:"Lithuania",country_code:"lt",city:"Vilnius",type:"exact",month:"January",year:"2010",lat:54.674072,lng:25.285036,hotel:"Alexa",address:"Pylimo str. 53 / Sodu str. 2, Vilnius , 01136, Lithuania",marker:null,company:4,photos:[]},{continent:"Europe",country:"Belarus",country_code:"by",city:"Minsk",type:"exact",month:"January",year:"2015",lat:53.627318,lng:27.977858,hotel:"Dubravushka",address:"Stanki, 16, Puhovichskiy district, Minsk region, Belarus",marker:null,company:12,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Vladimir",type:"so-so",month:"November",year:"2011",lat:56.128201,lng:40.403193,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Saint-Petersburg",type:"exact",month:"November",year:"2010",lat:59.932236,lng:30.353496,hotel:"Nevsky Mayak Hotel",address:"Nevsky Prospekt 94, St Petersburg, 191025, Russia",marker:null,company:2,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Kursk",type:"exact",month:"May",year:"2009",lat:51.748547,lng:36.189659,hotel:"Home, sweet home :)",address:"Home, sweet home!",marker:null,company:2,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Belgorod",type:"so-so",month:"May",year:"2009",lat:50.599392,lng:36.591674,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]},{continent:"Asia",country:"United Arab Emirates",country_code:"ae",city:"Dubai",type:"so-so",month:"September",year:"2011",lat:25.203156,lng:55.27031,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]},{continent:"Asia",country:"Kazakhstan",country_code:"kz",city:"Almaty",type:"exact",month:"April",year:"2010",lat:43.382937,lng:77.128332,hotel:"home",address:"home",marker:null,company:2,photos:[]},{continent:"Asia",country:"Turkey",country_code:"tr",city:"Istanbul",type:"exact",month:"November",year:"2009",lat:41.010213,lng:28.977798,hotel:"Modern Sultan Hotel",address:"Zeynep Sultan Cad. No 19 Sultanahmet, Istanbul , 34110, Turkey",marker:null,company:4,photos:[]},{continent:"Asia",country:"Cambodia",country_code:"kh",city:"Siem Reap",type:"so-so",month:"September",year:"2011",lat:13.341384,lng:103.836862,hotel:"Don't remember",address:"Don't remember",marker:null,company:2,photos:[]},{continent:"Europe",country:"France",country_code:"fr",city:"Versailles",type:"so-so",month:"April",year:"2011",lat:48.804741,lng:2.12057,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]},{continent:"Europe",country:"Germany",country_code:"de",city:"Potsdam",type:"so-so",month:"November",year:"2011",lat:52.403443,lng:13.061058,hotel:"Not applicable",address:"Not applicable",marker:null,company:6,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Pushkin",type:"so-so",month:"June",year:"2012",lat:59.711046,lng:30.400293,hotel:"Not applicable",address:"Not applicable",marker:null,company:3,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Suzdal",type:"so-so",month:"April",year:"2012",lat:56.417977,lng:40.448681,hotel:"Don't remember",address:"Don't remember",marker:null,company:4,photos:[]},{continent:"Europe",country:"Russia",country_code:"ru",city:"Torzhok",type:"so-so",month:"January",year:"2012",lat:57.038911,lng:34.962243,hotel:"Not applicable",address:"Not applicable",marker:null,company:2,photos:[]}],columns:["continent","country","city","year","month"],map:null,layer:null},e=function(o){var e=this;e.continent=ko.observable(o.continent),e.country=ko.observable(o.country),e.city=ko.observable(o.city),e.type=ko.observable(o.type),e.month=ko.observable(o.month),e.year=ko.observable(o.year),e.lat=ko.observable(o.lat),e.lng=ko.observable(o.lng),e.hotel=ko.observable(o.hotel),e.address=ko.observable(o.address),e.photos=ko.observableArray([]),e.show=ko.observable(o.show),e.marker=ko.observable(o.marker),e.company=ko.observable(o.company),e.isHiddenDetails=ko.observable(!0),this.showDetails=function(){e.isHiddenDetails(!e.isHiddenDetails())}},t=function(){var t=this;t.initialize=function(){t.isHiddenLeft=ko.observable(!0),t.isHiddenRight=ko.observable(!0),t.searchQuery=ko.observable(),t.columnsToSearch=ko.observableArray(o.columns),t.currentLocation=ko.observable(),t.currentPhotos=ko.observableArray([]),t.currentBigPhoto=ko.observable(),t.bigPhotoWidth=ko.observable(),t.bigPhotoHeight=ko.observable(),t.infoHeight=ko.observable($(window).height()-70),t.photosHeight=ko.observable($(window).height()-70),t.windowWidth=ko.observable($(window).width()),t.windowHeight=ko.observable($(window).height()),t.initMap=function(){o.map=new google.maps.Map(document.getElementById("map"),{center:{lat:39.104892,lng:9.456656},zoom:3,mapTypeControl:!0,mapTypeId:google.maps.MapTypeId.ROADMAP,mapTypeControlOptions:{position:google.maps.ControlPosition.BOTTOM_CENTER},zoomControl:!0,zoomControlOptions:{position:google.maps.ControlPosition.LEFT_CENTER},streetViewControl:!0,streetViewControlOptions:{position:google.maps.ControlPosition.LEFT_CENTER}});new google.maps.places.Autocomplete(document.getElementById("pac-input"),{types:["(cities)"]});t.fillCountries(o.map),t.addMarkers(o.map)},t.addMarkers=function(e){for(var t in o.locations){var n=new google.maps.Marker({position:o.locations[t],map:e,title:o.locations[t].city,animation:google.maps.Animation.DROP});2===o.locations[t].company?n.setIcon("img/heart.png"):n.setIcon("img/friends.png"),o.locations[t].marker=n}},t.fillCountries=function(e){var t=[],n="(";for(var a in o.locations){var r=o.locations[a].country;t.indexOf(r)<=-1&&(t.push(r),n+="'"+r+"', ")}n=n.substring(0,n.length-2)+")";var i=420419;o.layer=new google.maps.FusionTablesLayer({query:{select:"kml_4326",from:i,where:"'name_0' IN "+n},styles:[{polygonOptions:{fillOpacity:"0.2",fillColor:"#06FF1D"}}]}),o.layer.setMap(e)},t.clickMarker=function(o,e){ko.utils.arrayForEach(t.locationsList(),function(t){var n=t.marker();google.maps.event.addListener(n,"click",function(){null!==n.getAnimation()?(n.setAnimation(null),e.setMap(o)):(n.setAnimation(google.maps.Animation.BOUNCE),e.setMap(null)),o.setZoom(12);var a=new google.maps.LatLng(t.lat()+.04,t.lng()+.04);o.setCenter(a)})})},t.addInfoWindow=function(e){ko.utils.arrayForEach(t.locationsList(),function(t){var n=t.marker(),a=t.city(),r="http://en.wikipedia.org/w/api.php?action=opensearch&search="+a+"&format=json&callback=wikiCallback";$.ajax({url:r,dataType:"jsonp",success:function(o){i(o)},error:function(o,e,t){alert(o.status+" failed to get Wiki resources for city "+a+"\nUrl requested: \n"+r)}});var i=function(r){for(var i=r[1],s="",l=0,c=i.length;c>l;l++)s+='<li><a href="http://en.wikipedia.org/wiki/'+i[l]+'">'+i[l]+"</a></li>";var p=i[0];"Pushkin"===a&&(p=i[7]),"Versailles"===a&&(p=i[1]);var u="https://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro=&titles="+p;$.ajax({url:u,dataType:"jsonp",success:function(o){m(o)},error:function(o,e,t){alert(o.status+" failed to get Wiki resources for city "+a+"\nUrl requested: \n"+u)}});var m=function(a){articleObjectKeys=Object.keys(a.query.pages),key=articleObjectKeys[0],wikiArticle=a.query.pages[key].extract;var r='<div id="iw-container" class="iw-container"><div class="iw-title">'+t.continent()+", "+t.country()+", "+t.city()+'</div><hr class="line"><div class="iw-content"><div class="iw-subTitle">Visit info</div><span class="hotel"><span class="glyphicon glyphicon-home"></span><strong> Hotel: </strong><span>'+t.hotel()+'</span></span><br><span class="address"><span class="glyphicon glyphicon-book"></span><strong> Hotel address: </strong><span>'+t.address()+'</span></span><br><span class="company"><span class="glyphicon glyphicon-user"></span><strong> Company: </strong><span>'+t.company()+'</span></span><hr class="line"><div class="iw-subTitle">About '+t.city()+"</div>"+wikiArticle+'<hr class="line"><div class="iw-subTitle">Other wikipedia articles</div><ul>'+s+'</ul></div><div class="iw-bottom-gradient"></div></div>',i=new google.maps.InfoWindow({content:r,maxWidth:350});google.maps.event.addListener(n,"click",function(){o.layer.setMap(null),i.open(e,n)}),google.maps.event.addListener(e,"click",function(){i.close()})}}})},t.initMap(),t.locationsList=ko.observableArray([]),o.locations.forEach(function(o){t.locationsList.push(new e(o))}),t.clickMarker(o.map,o.layer),t.addInfoWindow(o.map)},t.initialize(),t.filteredItems=ko.computed(function(){var o=t.searchQuery();if(t.searchQuery()&&(o=o.toLowerCase()),o){ko.utils.arrayForEach(t.locationsList(),function(o){o.marker().setVisible(!1)});var e=ko.utils.arrayFilter(t.locationsList(),function(e){var n=-1;return ko.utils.arrayForEach(t.columnsToSearch(),function(t){var a=e[t]();"number"==typeof a&&(a=a.toString()),n+=a.toLowerCase().indexOf(o.toLowerCase())+1}),n>=0});for(var n in e)e[n].marker().setVisible(!0);return e}return ko.utils.arrayForEach(t.locationsList(),function(o){o.marker().setVisible(!0)}),t.locationsList()}),t.toggleHiddenRight=function(){t.isHiddenRight(!t.isHiddenRight()),t.isHiddenLeft()||t.toggleHiddenLeft()},t.toggleHiddenLeft=function(){t.isHiddenLeft(!t.isHiddenLeft())},t.showMarker=function(e){var t=new google.maps.LatLng(e.lat()+.06,e.lng()+.04),n=e.marker();o.map.setCenter(t),o.map.setZoom(12),o.layer.setMap(null),google.maps.event.trigger(n,"click"),null!==n.getAnimation()?n.setAnimation(null):n.setAnimation(google.maps.Animation.BOUNCE)},t.fullMap=function(){myLatLng=new google.maps.LatLng(39.104892,9.456656),o.map.setCenter(myLatLng),o.map.setZoom(3),o.layer.setMap(o.map)},t.showPhotos=function(o){t.currentLocation=o,t.currentPhotos([]),t.currentBigPhoto();var e="https://api.flickr.com/services/rest/?method=flickr.photosets.getList&api_key=c69f4fb5685159e37196cb8b2b5273cb&user_id=136434920%40N04&format=json&nojsoncallback=1";$.ajax({url:e,dataType:"json",success:function(o){n(o)},error:function(t,n,a){alert(t.status+" failed to get Flickr resources for city "+o.city()+"\nUrl requested: \n"+e)}});var n=function(o){for(var e=o.photosets.photoset,n=0;n<e.length;n++){var r=e[n].title._content;if(r==t.currentLocation.city()){var i=e[n].id;a(r,i);break}}},a=function(o,e){var n="https://api.flickr.com/services/rest/?method=flickr.photosets.getPhotos&api_key=c69f4fb5685159e37196cb8b2b5273cb&photoset_id="+e+"&user_id=136434920%40N04&format=json&nojsoncallback=1";t.currentLocation.photos().length?(t.currentPhotos(t.currentLocation.photos()),t.currentBigPhoto({imgAlt:t.currentLocation.photos()[0].imgAlt,imgSrc:t.currentLocation.photos()[0].imgSrc,imgSize:r()}),t.setBigPhotoSize(t.currentBigPhoto().imgSrc+t.currentBigPhoto().imgSize)):$.ajax({url:n,dataType:"json",success:function(o){i(o)},error:function(e,t,a){alert(e.status+" failed to get Flickr resources for city "+o+"\nUrl requested: \n"+n)}})},r=function(){var o=Math.min(Math.max(t.windowWidth()-90,t.windowWidth()-400),t.windowHeight()-270),e=".jpg";return o>320&&500>=o?e="_z.jpg":o>500&&640>=o?e="_c.jpg":o>640&&800>=o?e="_b.jpg":o>800&&1024>=o?e="_h.jpg":o>1024&&1600>=o?e="_k.jpg":o>1600&&(e="_o.jpg"),e},i=function(o){var e=o.photoset.photo[0];t.currentBigPhoto({imgAlt:e.title,imgSrc:"https://farm"+e.farm+".staticflickr.com/"+e.server+"/"+e.id+"_"+e.secret,imgSize:r()}),t.setBigPhotoSize(t.currentBigPhoto().imgSrc+t.currentBigPhoto().imgSize);for(var n=0;n<o.photoset.photo.length;n++){var a=o.photoset.photo[n];t.currentLocation.photos.push({imgAlt:a.title,imgSrc:"https://farm"+a.farm+".staticflickr.com/"+a.server+"/"+a.id+"_"+a.secret,imgSize:"_s.jpg"}),t.currentPhotos.push({imgAlt:a.title,imgSrc:"https://farm"+a.farm+".staticflickr.com/"+a.server+"/"+a.id+"_"+a.secret,imgSize:"_s.jpg"})}};t.isHiddenLeft()&&t.toggleHiddenLeft()},t.changeBigPhoto=function(o){var e=t.currentBigPhoto().imgSize;t.currentBigPhoto({imgAlt:o.imgAlt,imgSrc:o.imgSrc,imgSize:e}),t.setBigPhotoSize(t.currentBigPhoto().imgSrc+t.currentBigPhoto().imgSize)},t.setBigPhotoSize=function(o){var e=new Image;e.onload=function(){var o={h:e.height,w:e.width},n=t.windowHeight()-270,a=Math.max(t.windowWidth()-90,t.windowWidth()-400);a<o.w&&n>o.h?t.bigPhotoWidth(a):a>o.w&&n<o.h?t.bigPhotoHeight(n):o.w/a<o.h/n?t.bigPhotoHeight(n):t.bigPhotoWidth(a)},e.src=o}},n=new t;ko.applyBindings(n)};
//# sourceMappingURL=data:application/json;base64,
>>>>>>> master
